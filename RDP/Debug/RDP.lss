
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00802000  00005e50  00005ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000404  0080210c  0080210c  00005ff0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005ff0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000604c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  00006090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015025  00000000  00000000  00006650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005151  00000000  00000000  0001b675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b08c  00000000  00000000  000207c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a50  00000000  00000000  0002b854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ed6a  00000000  00000000  0002d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007cc6  00000000  00000000  0005c00e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  00063cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8d8  00000000  00000000  000641d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	00 00       	nop
       4:	4d c1       	rjmp	.+666    	; 0x2a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c1       	rjmp	.+658    	; 0x2a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c1       	rjmp	.+654    	; 0x2a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c1       	rjmp	.+650    	; 0x2a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c1       	rjmp	.+646    	; 0x2a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c1       	rjmp	.+642    	; 0x2a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c1       	rjmp	.+638    	; 0x2a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c1       	rjmp	.+634    	; 0x2a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c1       	rjmp	.+630    	; 0x2a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c1       	rjmp	.+626    	; 0x2a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c1       	rjmp	.+622    	; 0x2a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c7       	rjmp	.+3684   	; 0xe9a <__vector_13>
      36:	00 00       	nop
      38:	6f c2       	rjmp	.+1246   	; 0x518 <__vector_14>
      3a:	00 00       	nop
      3c:	96 c2       	rjmp	.+1324   	; 0x56a <__vector_15>
      3e:	00 00       	nop
      40:	bd c2       	rjmp	.+1402   	; 0x5bc <__vector_16>
      42:	00 00       	nop
      44:	e4 c2       	rjmp	.+1480   	; 0x60e <__vector_17>
      46:	00 00       	nop
      48:	0b c3       	rjmp	.+1558   	; 0x660 <__vector_18>
      4a:	00 00       	nop
      4c:	32 c3       	rjmp	.+1636   	; 0x6b2 <__vector_19>
      4e:	00 00       	nop
      50:	59 c3       	rjmp	.+1714   	; 0x704 <__vector_20>
      52:	00 00       	nop
      54:	80 c3       	rjmp	.+1792   	; 0x756 <__vector_21>
      56:	00 00       	nop
      58:	a7 c3       	rjmp	.+1870   	; 0x7a8 <__vector_22>
      5a:	00 00       	nop
      5c:	ce c3       	rjmp	.+1948   	; 0x7fa <__vector_23>
      5e:	00 00       	nop
      60:	1f c1       	rjmp	.+574    	; 0x2a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_25>
      68:	1b c1       	rjmp	.+566    	; 0x2a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	19 c1       	rjmp	.+562    	; 0x2a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	17 c1       	rjmp	.+558    	; 0x2a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c1       	rjmp	.+554    	; 0x2a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	13 c1       	rjmp	.+550    	; 0x2a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	11 c1       	rjmp	.+546    	; 0x2a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c1       	rjmp	.+542    	; 0x2a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	0d c1       	rjmp	.+538    	; 0x2a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0b c1       	rjmp	.+534    	; 0x2a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	09 c1       	rjmp	.+530    	; 0x2a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	07 c1       	rjmp	.+526    	; 0x2a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	05 c1       	rjmp	.+522    	; 0x2a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	03 c1       	rjmp	.+518    	; 0x2a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	01 c1       	rjmp	.+514    	; 0x2a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ff c0       	rjmp	.+510    	; 0x2a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fd c0       	rjmp	.+506    	; 0x2a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fb c0       	rjmp	.+502    	; 0x2a0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f9 c0       	rjmp	.+498    	; 0x2a0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f7 c0       	rjmp	.+494    	; 0x2a0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f5 c0       	rjmp	.+490    	; 0x2a0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	13 c7       	rjmp	.+3622   	; 0xee0 <__vector_46>
      ba:	00 00       	nop
      bc:	61 c5       	rjmp	.+2754   	; 0xb80 <__vector_47>
      be:	00 00       	nop
      c0:	88 c5       	rjmp	.+2832   	; 0xbd2 <__vector_48>
      c2:	00 00       	nop
      c4:	af c5       	rjmp	.+2910   	; 0xc24 <__vector_49>
      c6:	00 00       	nop
      c8:	d6 c5       	rjmp	.+2988   	; 0xc76 <__vector_50>
      ca:	00 00       	nop
      cc:	fd c5       	rjmp	.+3066   	; 0xcc8 <__vector_51>
      ce:	00 00       	nop
      d0:	24 c6       	rjmp	.+3144   	; 0xd1a <__vector_52>
      d2:	00 00       	nop
      d4:	e5 c0       	rjmp	.+458    	; 0x2a0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e3 c0       	rjmp	.+454    	; 0x2a0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e1 c0       	rjmp	.+450    	; 0x2a0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	df c0       	rjmp	.+446    	; 0x2a0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd c0       	rjmp	.+442    	; 0x2a0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	db c0       	rjmp	.+438    	; 0x2a0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d9 c0       	rjmp	.+434    	; 0x2a0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d7 c0       	rjmp	.+430    	; 0x2a0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d5 c0       	rjmp	.+426    	; 0x2a0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d3 c0       	rjmp	.+422    	; 0x2a0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d1 c0       	rjmp	.+418    	; 0x2a0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__vector_64>
     104:	cd c0       	rjmp	.+410    	; 0x2a0 <__bad_interrupt>
     106:	00 00       	nop
     108:	cb c0       	rjmp	.+406    	; 0x2a0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c9 c0       	rjmp	.+402    	; 0x2a0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c7 c0       	rjmp	.+398    	; 0x2a0 <__bad_interrupt>
     112:	00 00       	nop
     114:	c5 c0       	rjmp	.+394    	; 0x2a0 <__bad_interrupt>
     116:	00 00       	nop
     118:	c3 c0       	rjmp	.+390    	; 0x2a0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3b c1       	rjmp	.+630    	; 0x394 <__vector_71>
     11e:	00 00       	nop
     120:	67 c1       	rjmp	.+718    	; 0x3f0 <__vector_72>
     122:	00 00       	nop
     124:	93 c1       	rjmp	.+806    	; 0x44c <__vector_73>
     126:	00 00       	nop
     128:	bf c1       	rjmp	.+894    	; 0x4a8 <__vector_74>
     12a:	00 00       	nop
     12c:	b9 c0       	rjmp	.+370    	; 0x2a0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b7 c0       	rjmp	.+366    	; 0x2a0 <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c3       	rjmp	.+1814   	; 0x84c <__vector_77>
     136:	00 00       	nop
     138:	b2 c3       	rjmp	.+1892   	; 0x89e <__vector_78>
     13a:	00 00       	nop
     13c:	d9 c3       	rjmp	.+1970   	; 0x8f0 <__vector_79>
     13e:	00 00       	nop
     140:	00 c4       	rjmp	.+2048   	; 0x942 <__vector_80>
     142:	00 00       	nop
     144:	27 c4       	rjmp	.+2126   	; 0x994 <__vector_81>
     146:	00 00       	nop
     148:	4e c4       	rjmp	.+2204   	; 0x9e6 <__vector_82>
     14a:	00 00       	nop
     14c:	75 c4       	rjmp	.+2282   	; 0xa38 <__vector_83>
     14e:	00 00       	nop
     150:	9c c4       	rjmp	.+2360   	; 0xa8a <__vector_84>
     152:	00 00       	nop
     154:	c3 c4       	rjmp	.+2438   	; 0xadc <__vector_85>
     156:	00 00       	nop
     158:	ea c4       	rjmp	.+2516   	; 0xb2e <__vector_86>
     15a:	00 00       	nop
     15c:	a1 c0       	rjmp	.+322    	; 0x2a0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	9f c0       	rjmp	.+318    	; 0x2a0 <__bad_interrupt>
     162:	00 00       	nop
     164:	9d c0       	rjmp	.+314    	; 0x2a0 <__bad_interrupt>
     166:	00 00       	nop
     168:	9b c0       	rjmp	.+310    	; 0x2a0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	99 c0       	rjmp	.+306    	; 0x2a0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	97 c0       	rjmp	.+302    	; 0x2a0 <__bad_interrupt>
     172:	00 00       	nop
     174:	95 c0       	rjmp	.+298    	; 0x2a0 <__bad_interrupt>
     176:	00 00       	nop
     178:	93 c0       	rjmp	.+294    	; 0x2a0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	91 c0       	rjmp	.+290    	; 0x2a0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	8f c0       	rjmp	.+286    	; 0x2a0 <__bad_interrupt>
     182:	00 00       	nop
     184:	8d c0       	rjmp	.+282    	; 0x2a0 <__bad_interrupt>
     186:	00 00       	nop
     188:	8b c0       	rjmp	.+278    	; 0x2a0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	89 c0       	rjmp	.+274    	; 0x2a0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	87 c0       	rjmp	.+270    	; 0x2a0 <__bad_interrupt>
     192:	00 00       	nop
     194:	85 c0       	rjmp	.+266    	; 0x2a0 <__bad_interrupt>
     196:	00 00       	nop
     198:	83 c0       	rjmp	.+262    	; 0x2a0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	81 c0       	rjmp	.+258    	; 0x2a0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7f c0       	rjmp	.+254    	; 0x2a0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7d c0       	rjmp	.+250    	; 0x2a0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7b c0       	rjmp	.+246    	; 0x2a0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	79 c0       	rjmp	.+242    	; 0x2a0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	77 c0       	rjmp	.+238    	; 0x2a0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	75 c0       	rjmp	.+234    	; 0x2a0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	73 c0       	rjmp	.+230    	; 0x2a0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	71 c0       	rjmp	.+226    	; 0x2a0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6f c0       	rjmp	.+222    	; 0x2a0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6d c0       	rjmp	.+218    	; 0x2a0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6b c0       	rjmp	.+214    	; 0x2a0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	69 c0       	rjmp	.+210    	; 0x2a0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	67 c0       	rjmp	.+206    	; 0x2a0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	65 c0       	rjmp	.+202    	; 0x2a0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	63 c0       	rjmp	.+198    	; 0x2a0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	61 c0       	rjmp	.+194    	; 0x2a0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5f c0       	rjmp	.+190    	; 0x2a0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5d c0       	rjmp	.+186    	; 0x2a0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5b c0       	rjmp	.+182    	; 0x2a0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	59 c0       	rjmp	.+178    	; 0x2a0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	57 c0       	rjmp	.+174    	; 0x2a0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	53 c0       	rjmp	.+166    	; 0x2a0 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <__vector_52+0x2>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 00       	.word	0x003f	; ????

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e2       	ldi	r29, 0x2F	; 47
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_copy_data>:
     272:	11 e2       	ldi	r17, 0x21	; 33
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b0 e2       	ldi	r27, 0x20	; 32
     278:	e0 e5       	ldi	r30, 0x50	; 80
     27a:	fe e5       	ldi	r31, 0x5E	; 94
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	ac 30       	cpi	r26, 0x0C	; 12
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	25 e2       	ldi	r18, 0x25	; 37
     28a:	ac e0       	ldi	r26, 0x0C	; 12
     28c:	b1 e2       	ldi	r27, 0x21	; 33
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a0 31       	cpi	r26, 0x10	; 16
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <main>
     29c:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <_exit>

000002a0 <__bad_interrupt>:
     2a0:	af ce       	rjmp	.-674    	; 0x0 <__vectors>

000002a2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2a2:	08 95       	ret

000002a4 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     2aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     2ae:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     2b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     2b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     2ba:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     2be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     2c2:	08 95       	ret

000002c4 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2ce:	9f b7       	in	r25, 0x3f	; 63
     2d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2d2:	f8 94       	cli
	return flags;
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2d6:	e8 2f       	mov	r30, r24
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	e0 59       	subi	r30, 0x90	; 144
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	60 95       	com	r22
     2e0:	80 81       	ld	r24, Z
     2e2:	68 23       	and	r22, r24
     2e4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2e6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     2fa:	c6 2f       	mov	r28, r22
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
     2fe:	de 01       	movw	r26, r28
     300:	02 2e       	mov	r0, r18
     302:	02 c0       	rjmp	.+4      	; 0x308 <ioport_configure_port_pin+0x18>
     304:	b5 95       	asr	r27
     306:	a7 95       	ror	r26
     308:	0a 94       	dec	r0
     30a:	e2 f7       	brpl	.-8      	; 0x304 <ioport_configure_port_pin+0x14>
     30c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     30e:	50 8b       	std	Z+16, r21	; 0x10
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	31 05       	cpc	r19, r1
     31a:	89 f7       	brne	.-30     	; 0x2fe <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     31c:	40 ff       	sbrs	r20, 0
     31e:	0a c0       	rjmp	.+20     	; 0x334 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     320:	41 ff       	sbrs	r20, 1
     322:	03 c0       	rjmp	.+6      	; 0x32a <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     324:	fc 01       	movw	r30, r24
     326:	65 83       	std	Z+5, r22	; 0x05
     328:	02 c0       	rjmp	.+4      	; 0x32e <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     32a:	fc 01       	movw	r30, r24
     32c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     32e:	fc 01       	movw	r30, r24
     330:	61 83       	std	Z+1, r22	; 0x01
     332:	02 c0       	rjmp	.+4      	; 0x338 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     334:	fc 01       	movw	r30, r24
     336:	62 83       	std	Z+2, r22	; 0x02
	}
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	1f 92       	push	r1
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     348:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <stdio_base>
     34c:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <stdio_base+0x1>
     350:	e0 91 7d 22 	lds	r30, 0x227D	; 0x80227d <ptr_get>
     354:	f0 91 7e 22 	lds	r31, 0x227E	; 0x80227e <ptr_get+0x1>
     358:	be 01       	movw	r22, r28
     35a:	6f 5f       	subi	r22, 0xFF	; 255
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	09 95       	icall
	return c;
     360:	89 81       	ldd	r24, Y+1	; 0x01
}
     362:	08 2e       	mov	r0, r24
     364:	00 0c       	add	r0, r0
     366:	99 0b       	sbc	r25, r25
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     370:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     372:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <stdio_base>
     376:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <stdio_base+0x1>
     37a:	e0 91 7f 22 	lds	r30, 0x227F	; 0x80227f <ptr_put>
     37e:	f0 91 80 22 	lds	r31, 0x2280	; 0x802280 <ptr_put+0x1>
     382:	09 95       	icall
     384:	99 23       	and	r25, r25
     386:	1c f0       	brlt	.+6      	; 0x38e <_write+0x1e>
		return -1;
	}
	return 1;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     392:	08 95       	ret

00000394 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	3f 93       	push	r19
     3a2:	4f 93       	push	r20
     3a4:	5f 93       	push	r21
     3a6:	6f 93       	push	r22
     3a8:	7f 93       	push	r23
     3aa:	8f 93       	push	r24
     3ac:	9f 93       	push	r25
     3ae:	af 93       	push	r26
     3b0:	bf 93       	push	r27
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3b6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3ba:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3be:	e0 91 83 22 	lds	r30, 0x2283	; 0x802283 <adca_callback>
     3c2:	f0 91 84 22 	lds	r31, 0x2284	; 0x802284 <adca_callback+0x1>
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	09 95       	icall
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     412:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     416:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     41a:	e0 91 83 22 	lds	r30, 0x2283	; 0x802283 <adca_callback>
     41e:	f0 91 84 22 	lds	r31, 0x2284	; 0x802284 <adca_callback+0x1>
     422:	62 e0       	ldi	r22, 0x02	; 2
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	09 95       	icall
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     46e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     472:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     476:	e0 91 83 22 	lds	r30, 0x2283	; 0x802283 <adca_callback>
     47a:	f0 91 84 22 	lds	r31, 0x2284	; 0x802284 <adca_callback+0x1>
     47e:	64 e0       	ldi	r22, 0x04	; 4
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	09 95       	icall
}
     486:	ff 91       	pop	r31
     488:	ef 91       	pop	r30
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	7f 91       	pop	r23
     494:	6f 91       	pop	r22
     496:	5f 91       	pop	r21
     498:	4f 91       	pop	r20
     49a:	3f 91       	pop	r19
     49c:	2f 91       	pop	r18
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 93       	push	r18
     4b4:	3f 93       	push	r19
     4b6:	4f 93       	push	r20
     4b8:	5f 93       	push	r21
     4ba:	6f 93       	push	r22
     4bc:	7f 93       	push	r23
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25
     4c2:	af 93       	push	r26
     4c4:	bf 93       	push	r27
     4c6:	ef 93       	push	r30
     4c8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4ca:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4ce:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d2:	e0 91 83 22 	lds	r30, 0x2283	; 0x802283 <adca_callback>
     4d6:	f0 91 84 22 	lds	r31, 0x2284	; 0x802284 <adca_callback+0x1>
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	09 95       	icall
}
     4e2:	ff 91       	pop	r31
     4e4:	ef 91       	pop	r30
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	7f 91       	pop	r23
     4f0:	6f 91       	pop	r22
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     504:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     508:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     50a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     50c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     510:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     512:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     516:	08 95       	ret

00000518 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     53a:	e0 91 3e 21 	lds	r30, 0x213E	; 0x80213e <tc_tcc0_ovf_callback>
     53e:	f0 91 3f 21 	lds	r31, 0x213F	; 0x80213f <tc_tcc0_ovf_callback+0x1>
     542:	30 97       	sbiw	r30, 0x00	; 0
     544:	09 f0       	breq	.+2      	; 0x548 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     546:	09 95       	icall
	}
}
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	2f 93       	push	r18
     576:	3f 93       	push	r19
     578:	4f 93       	push	r20
     57a:	5f 93       	push	r21
     57c:	6f 93       	push	r22
     57e:	7f 93       	push	r23
     580:	8f 93       	push	r24
     582:	9f 93       	push	r25
     584:	af 93       	push	r26
     586:	bf 93       	push	r27
     588:	ef 93       	push	r30
     58a:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     58c:	e0 91 3c 21 	lds	r30, 0x213C	; 0x80213c <tc_tcc0_err_callback>
     590:	f0 91 3d 21 	lds	r31, 0x213D	; 0x80213d <tc_tcc0_err_callback+0x1>
     594:	30 97       	sbiw	r30, 0x00	; 0
     596:	09 f0       	breq	.+2      	; 0x59a <__vector_15+0x30>
		tc_tcc0_err_callback();
     598:	09 95       	icall
	}
}
     59a:	ff 91       	pop	r31
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	ef 93       	push	r30
     5dc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     5de:	e0 91 3a 21 	lds	r30, 0x213A	; 0x80213a <tc_tcc0_cca_callback>
     5e2:	f0 91 3b 21 	lds	r31, 0x213B	; 0x80213b <tc_tcc0_cca_callback+0x1>
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_16+0x30>
		tc_tcc0_cca_callback();
     5ea:	09 95       	icall
	}
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     630:	e0 91 38 21 	lds	r30, 0x2138	; 0x802138 <tc_tcc0_ccb_callback>
     634:	f0 91 39 21 	lds	r31, 0x2139	; 0x802139 <tc_tcc0_ccb_callback+0x1>
     638:	30 97       	sbiw	r30, 0x00	; 0
     63a:	09 f0       	breq	.+2      	; 0x63e <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     63c:	09 95       	icall
	}
}
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	bf 91       	pop	r27
     644:	af 91       	pop	r26
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	7f 91       	pop	r23
     64c:	6f 91       	pop	r22
     64e:	5f 91       	pop	r21
     650:	4f 91       	pop	r20
     652:	3f 91       	pop	r19
     654:	2f 91       	pop	r18
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     682:	e0 91 36 21 	lds	r30, 0x2136	; 0x802136 <tc_tcc0_ccc_callback>
     686:	f0 91 37 21 	lds	r31, 0x2137	; 0x802137 <tc_tcc0_ccc_callback+0x1>
     68a:	30 97       	sbiw	r30, 0x00	; 0
     68c:	09 f0       	breq	.+2      	; 0x690 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     68e:	09 95       	icall
	}
}
     690:	ff 91       	pop	r31
     692:	ef 91       	pop	r30
     694:	bf 91       	pop	r27
     696:	af 91       	pop	r26
     698:	9f 91       	pop	r25
     69a:	8f 91       	pop	r24
     69c:	7f 91       	pop	r23
     69e:	6f 91       	pop	r22
     6a0:	5f 91       	pop	r21
     6a2:	4f 91       	pop	r20
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     6d4:	e0 91 34 21 	lds	r30, 0x2134	; 0x802134 <tc_tcc0_ccd_callback>
     6d8:	f0 91 35 21 	lds	r31, 0x2135	; 0x802135 <tc_tcc0_ccd_callback+0x1>
     6dc:	30 97       	sbiw	r30, 0x00	; 0
     6de:	09 f0       	breq	.+2      	; 0x6e2 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     6e0:	09 95       	icall
	}
}
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	7f 91       	pop	r23
     6f0:	6f 91       	pop	r22
     6f2:	5f 91       	pop	r21
     6f4:	4f 91       	pop	r20
     6f6:	3f 91       	pop	r19
     6f8:	2f 91       	pop	r18
     6fa:	0f 90       	pop	r0
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	0f 90       	pop	r0
     700:	1f 90       	pop	r1
     702:	18 95       	reti

00000704 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     726:	e0 91 32 21 	lds	r30, 0x2132	; 0x802132 <tc_tcc1_ovf_callback>
     72a:	f0 91 33 21 	lds	r31, 0x2133	; 0x802133 <tc_tcc1_ovf_callback+0x1>
     72e:	30 97       	sbiw	r30, 0x00	; 0
     730:	09 f0       	breq	.+2      	; 0x734 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     732:	09 95       	icall
	}
}
     734:	ff 91       	pop	r31
     736:	ef 91       	pop	r30
     738:	bf 91       	pop	r27
     73a:	af 91       	pop	r26
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	7f 91       	pop	r23
     742:	6f 91       	pop	r22
     744:	5f 91       	pop	r21
     746:	4f 91       	pop	r20
     748:	3f 91       	pop	r19
     74a:	2f 91       	pop	r18
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	2f 93       	push	r18
     762:	3f 93       	push	r19
     764:	4f 93       	push	r20
     766:	5f 93       	push	r21
     768:	6f 93       	push	r22
     76a:	7f 93       	push	r23
     76c:	8f 93       	push	r24
     76e:	9f 93       	push	r25
     770:	af 93       	push	r26
     772:	bf 93       	push	r27
     774:	ef 93       	push	r30
     776:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     778:	e0 91 30 21 	lds	r30, 0x2130	; 0x802130 <tc_tcc1_err_callback>
     77c:	f0 91 31 21 	lds	r31, 0x2131	; 0x802131 <tc_tcc1_err_callback+0x1>
     780:	30 97       	sbiw	r30, 0x00	; 0
     782:	09 f0       	breq	.+2      	; 0x786 <__vector_21+0x30>
		tc_tcc1_err_callback();
     784:	09 95       	icall
	}
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	bf 91       	pop	r27
     78c:	af 91       	pop	r26
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	7f 91       	pop	r23
     794:	6f 91       	pop	r22
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     7ca:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <tc_tcc1_cca_callback>
     7ce:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <tc_tcc1_cca_callback+0x1>
     7d2:	30 97       	sbiw	r30, 0x00	; 0
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_22+0x30>
		tc_tcc1_cca_callback();
     7d6:	09 95       	icall
	}
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     81c:	e0 91 2c 21 	lds	r30, 0x212C	; 0x80212c <tc_tcc1_ccb_callback>
     820:	f0 91 2d 21 	lds	r31, 0x212D	; 0x80212d <tc_tcc1_ccb_callback+0x1>
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	09 f0       	breq	.+2      	; 0x82a <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     828:	09 95       	icall
	}
}
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     86e:	e0 91 2a 21 	lds	r30, 0x212A	; 0x80212a <tc_tcd0_ovf_callback>
     872:	f0 91 2b 21 	lds	r31, 0x212B	; 0x80212b <tc_tcd0_ovf_callback+0x1>
     876:	30 97       	sbiw	r30, 0x00	; 0
     878:	09 f0       	breq	.+2      	; 0x87c <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     87a:	09 95       	icall
	}
}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	bf 91       	pop	r27
     882:	af 91       	pop	r26
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	7f 91       	pop	r23
     88a:	6f 91       	pop	r22
     88c:	5f 91       	pop	r21
     88e:	4f 91       	pop	r20
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     8c0:	e0 91 28 21 	lds	r30, 0x2128	; 0x802128 <tc_tcd0_err_callback>
     8c4:	f0 91 29 21 	lds	r31, 0x2129	; 0x802129 <tc_tcd0_err_callback+0x1>
     8c8:	30 97       	sbiw	r30, 0x00	; 0
     8ca:	09 f0       	breq	.+2      	; 0x8ce <__vector_78+0x30>
		tc_tcd0_err_callback();
     8cc:	09 95       	icall
	}
}
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	4f 93       	push	r20
     900:	5f 93       	push	r21
     902:	6f 93       	push	r22
     904:	7f 93       	push	r23
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	af 93       	push	r26
     90c:	bf 93       	push	r27
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     912:	e0 91 26 21 	lds	r30, 0x2126	; 0x802126 <tc_tcd0_cca_callback>
     916:	f0 91 27 21 	lds	r31, 0x2127	; 0x802127 <tc_tcd0_cca_callback+0x1>
     91a:	30 97       	sbiw	r30, 0x00	; 0
     91c:	09 f0       	breq	.+2      	; 0x920 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     91e:	09 95       	icall
	}
}
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	4f 93       	push	r20
     952:	5f 93       	push	r21
     954:	6f 93       	push	r22
     956:	7f 93       	push	r23
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
     95c:	af 93       	push	r26
     95e:	bf 93       	push	r27
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     964:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <tc_tcd0_ccb_callback>
     968:	f0 91 25 21 	lds	r31, 0x2125	; 0x802125 <tc_tcd0_ccb_callback+0x1>
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	09 f0       	breq	.+2      	; 0x972 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     970:	09 95       	icall
	}
}
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	bf 91       	pop	r27
     978:	af 91       	pop	r26
     97a:	9f 91       	pop	r25
     97c:	8f 91       	pop	r24
     97e:	7f 91       	pop	r23
     980:	6f 91       	pop	r22
     982:	5f 91       	pop	r21
     984:	4f 91       	pop	r20
     986:	3f 91       	pop	r19
     988:	2f 91       	pop	r18
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	ef 93       	push	r30
     9b4:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     9b6:	e0 91 22 21 	lds	r30, 0x2122	; 0x802122 <tc_tcd0_ccc_callback>
     9ba:	f0 91 23 21 	lds	r31, 0x2123	; 0x802123 <tc_tcd0_ccc_callback+0x1>
     9be:	30 97       	sbiw	r30, 0x00	; 0
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     9c2:	09 95       	icall
	}
}
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	bf 91       	pop	r27
     9ca:	af 91       	pop	r26
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	7f 91       	pop	r23
     9d2:	6f 91       	pop	r22
     9d4:	5f 91       	pop	r21
     9d6:	4f 91       	pop	r20
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     a08:	e0 91 20 21 	lds	r30, 0x2120	; 0x802120 <tc_tcd0_ccd_callback>
     a0c:	f0 91 21 21 	lds	r31, 0x2121	; 0x802121 <tc_tcd0_ccd_callback+0x1>
     a10:	30 97       	sbiw	r30, 0x00	; 0
     a12:	09 f0       	breq	.+2      	; 0xa16 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     a14:	09 95       	icall
	}
}
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	2f 93       	push	r18
     a44:	3f 93       	push	r19
     a46:	4f 93       	push	r20
     a48:	5f 93       	push	r21
     a4a:	6f 93       	push	r22
     a4c:	7f 93       	push	r23
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	af 93       	push	r26
     a54:	bf 93       	push	r27
     a56:	ef 93       	push	r30
     a58:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     a5a:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <tc_tcd1_ovf_callback>
     a5e:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <tc_tcd1_ovf_callback+0x1>
     a62:	30 97       	sbiw	r30, 0x00	; 0
     a64:	09 f0       	breq	.+2      	; 0xa68 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     a66:	09 95       	icall
	}
}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     a8a:	1f 92       	push	r1
     a8c:	0f 92       	push	r0
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	0f 92       	push	r0
     a92:	11 24       	eor	r1, r1
     a94:	2f 93       	push	r18
     a96:	3f 93       	push	r19
     a98:	4f 93       	push	r20
     a9a:	5f 93       	push	r21
     a9c:	6f 93       	push	r22
     a9e:	7f 93       	push	r23
     aa0:	8f 93       	push	r24
     aa2:	9f 93       	push	r25
     aa4:	af 93       	push	r26
     aa6:	bf 93       	push	r27
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     aac:	e0 91 1c 21 	lds	r30, 0x211C	; 0x80211c <tc_tcd1_err_callback>
     ab0:	f0 91 1d 21 	lds	r31, 0x211D	; 0x80211d <tc_tcd1_err_callback+0x1>
     ab4:	30 97       	sbiw	r30, 0x00	; 0
     ab6:	09 f0       	breq	.+2      	; 0xaba <__vector_84+0x30>
		tc_tcd1_err_callback();
     ab8:	09 95       	icall
	}
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     afe:	e0 91 1a 21 	lds	r30, 0x211A	; 0x80211a <tc_tcd1_cca_callback>
     b02:	f0 91 1b 21 	lds	r31, 0x211B	; 0x80211b <tc_tcd1_cca_callback+0x1>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_85+0x30>
		tc_tcd1_cca_callback();
     b0a:	09 95       	icall
	}
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     b50:	e0 91 18 21 	lds	r30, 0x2118	; 0x802118 <tc_tcd1_ccb_callback>
     b54:	f0 91 19 21 	lds	r31, 0x2119	; 0x802119 <tc_tcd1_ccb_callback+0x1>
     b58:	30 97       	sbiw	r30, 0x00	; 0
     b5a:	09 f0       	breq	.+2      	; 0xb5e <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     b5c:	09 95       	icall
	}
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     ba2:	e0 91 16 21 	lds	r30, 0x2116	; 0x802116 <tc_tce0_ovf_callback>
     ba6:	f0 91 17 21 	lds	r31, 0x2117	; 0x802117 <tc_tce0_ovf_callback+0x1>
     baa:	30 97       	sbiw	r30, 0x00	; 0
     bac:	09 f0       	breq	.+2      	; 0xbb0 <__vector_47+0x30>
		tc_tce0_ovf_callback();
     bae:	09 95       	icall
	}
}
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	7f 91       	pop	r23
     bbe:	6f 91       	pop	r22
     bc0:	5f 91       	pop	r21
     bc2:	4f 91       	pop	r20
     bc4:	3f 91       	pop	r19
     bc6:	2f 91       	pop	r18
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     bf4:	e0 91 14 21 	lds	r30, 0x2114	; 0x802114 <tc_tce0_err_callback>
     bf8:	f0 91 15 21 	lds	r31, 0x2115	; 0x802115 <tc_tce0_err_callback+0x1>
     bfc:	30 97       	sbiw	r30, 0x00	; 0
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_48+0x30>
		tc_tce0_err_callback();
     c00:	09 95       	icall
	}
}
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     c46:	e0 91 12 21 	lds	r30, 0x2112	; 0x802112 <tc_tce0_cca_callback>
     c4a:	f0 91 13 21 	lds	r31, 0x2113	; 0x802113 <tc_tce0_cca_callback+0x1>
     c4e:	30 97       	sbiw	r30, 0x00	; 0
     c50:	09 f0       	breq	.+2      	; 0xc54 <__vector_49+0x30>
		tc_tce0_cca_callback();
     c52:	09 95       	icall
	}
}
     c54:	ff 91       	pop	r31
     c56:	ef 91       	pop	r30
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     c98:	e0 91 10 21 	lds	r30, 0x2110	; 0x802110 <tc_tce0_ccb_callback>
     c9c:	f0 91 11 21 	lds	r31, 0x2111	; 0x802111 <tc_tce0_ccb_callback+0x1>
     ca0:	30 97       	sbiw	r30, 0x00	; 0
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__vector_50+0x30>
		tc_tce0_ccb_callback();
     ca4:	09 95       	icall
	}
}
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     cea:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <tc_tce0_ccc_callback>
     cee:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <tc_tce0_ccc_callback+0x1>
     cf2:	30 97       	sbiw	r30, 0x00	; 0
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_51+0x30>
		tc_tce0_ccc_callback();
     cf6:	09 95       	icall
	}
}
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     d3c:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <__data_end>
     d40:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <__data_end+0x1>
     d44:	30 97       	sbiw	r30, 0x00	; 0
     d46:	09 f0       	breq	.+2      	; 0xd4a <__vector_52+0x30>
		tc_tce0_ccd_callback();
     d48:	09 95       	icall
	}
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     d70:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <transfer>
     d74:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <transfer+0x1>
     d78:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     d7a:	83 ff       	sbrs	r24, 3
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     d86:	86 ef       	ldi	r24, 0xF6	; 246
     d88:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <transfer+0xa>
     d8c:	83 c0       	rjmp	.+262    	; 0xe94 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     d8e:	98 2f       	mov	r25, r24
     d90:	94 71       	andi	r25, 0x14	; 20
     d92:	31 f0       	breq	.+12     	; 0xda0 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <transfer+0xa>
     d9e:	7a c0       	rjmp	.+244    	; 0xe94 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     da0:	86 ff       	sbrs	r24, 6
     da2:	43 c0       	rjmp	.+134    	; 0xe2a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     da4:	c0 e4       	ldi	r28, 0x40	; 64
     da6:	d1 e2       	ldi	r29, 0x21	; 33
     da8:	aa 81       	ldd	r26, Y+2	; 0x02
     daa:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	2d 91       	ld	r18, X+
     db4:	3c 91       	ld	r19, X
     db6:	15 97       	sbiw	r26, 0x05	; 5
     db8:	82 17       	cp	r24, r18
     dba:	93 07       	cpc	r25, r19
     dbc:	6c f4       	brge	.+26     	; 0xdd8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     dbe:	9c 01       	movw	r18, r24
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	20 93 44 21 	sts	0x2144, r18	; 0x802144 <transfer+0x4>
     dc8:	30 93 45 21 	sts	0x2145, r19	; 0x802145 <transfer+0x5>
     dcc:	a8 0f       	add	r26, r24
     dce:	b9 1f       	adc	r27, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	8c 91       	ld	r24, X
     dd4:	87 83       	std	Z+7, r24	; 0x07
     dd6:	5e c0       	rjmp	.+188    	; 0xe94 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     dd8:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <transfer+0x6>
     ddc:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <transfer+0x7>
     de0:	18 96       	adiw	r26, 0x08	; 8
     de2:	2d 91       	ld	r18, X+
     de4:	3c 91       	ld	r19, X
     de6:	19 97       	sbiw	r26, 0x09	; 9
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	c8 f4       	brcc	.+50     	; 0xe20 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     dee:	20 91 48 21 	lds	r18, 0x2148	; 0x802148 <transfer+0x8>
     df2:	22 23       	and	r18, r18
     df4:	21 f0       	breq	.+8      	; 0xdfe <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     df6:	86 81       	ldd	r24, Z+6	; 0x06
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	86 83       	std	Z+6, r24	; 0x06
     dfc:	4b c0       	rjmp	.+150    	; 0xe94 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     dfe:	16 96       	adiw	r26, 0x06	; 6
     e00:	2d 91       	ld	r18, X+
     e02:	3c 91       	ld	r19, X
     e04:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     e06:	ac 01       	movw	r20, r24
     e08:	4f 5f       	subi	r20, 0xFF	; 255
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	40 93 46 21 	sts	0x2146, r20	; 0x802146 <transfer+0x6>
     e10:	50 93 47 21 	sts	0x2147, r21	; 0x802147 <transfer+0x7>
     e14:	d9 01       	movw	r26, r18
     e16:	a8 0f       	add	r26, r24
     e18:	b9 1f       	adc	r27, r25
     e1a:	8c 91       	ld	r24, X
     e1c:	87 83       	std	Z+7, r24	; 0x07
     e1e:	3a c0       	rjmp	.+116    	; 0xe94 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     e24:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <transfer+0xa>
     e28:	35 c0       	rjmp	.+106    	; 0xe94 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     e2a:	88 23       	and	r24, r24
     e2c:	84 f5       	brge	.+96     	; 0xe8e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     e2e:	a0 e4       	ldi	r26, 0x40	; 64
     e30:	b1 e2       	ldi	r27, 0x21	; 33
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	cd 91       	ld	r28, X+
     e36:	dc 91       	ld	r29, X
     e38:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     e3a:	16 96       	adiw	r26, 0x06	; 6
     e3c:	8d 91       	ld	r24, X+
     e3e:	9c 91       	ld	r25, X
     e40:	17 97       	sbiw	r26, 0x07	; 7
     e42:	28 85       	ldd	r18, Y+8	; 0x08
     e44:	39 85       	ldd	r19, Y+9	; 0x09
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	d8 f4       	brcc	.+54     	; 0xe82 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     e4c:	6e 81       	ldd	r22, Y+6	; 0x06
     e4e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     e50:	9c 01       	movw	r18, r24
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	20 93 46 21 	sts	0x2146, r18	; 0x802146 <transfer+0x6>
     e5a:	30 93 47 21 	sts	0x2147, r19	; 0x802147 <transfer+0x7>
     e5e:	47 81       	ldd	r20, Z+7	; 0x07
     e60:	db 01       	movw	r26, r22
     e62:	a8 0f       	add	r26, r24
     e64:	b9 1f       	adc	r27, r25
     e66:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	99 85       	ldd	r25, Y+9	; 0x09
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	18 f4       	brcc	.+6      	; 0xe78 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	83 83       	std	Z+3, r24	; 0x03
     e76:	0e c0       	rjmp	.+28     	; 0xe94 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     e78:	87 e0       	ldi	r24, 0x07	; 7
     e7a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     e7c:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <transfer+0xa>
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     e86:	89 ef       	ldi	r24, 0xF9	; 249
     e88:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <transfer+0xa>
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     e8e:	8b ef       	ldi	r24, 0xFB	; 251
     e90:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <transfer+0xa>
	}
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	57 df       	rcall	.-338    	; 0xd6c <twim_interrupt_handler>
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	34 df       	rcall	.-408    	; 0xd6c <twim_interrupt_handler>
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     f26:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     f28:	db 01       	movw	r26, r22
     f2a:	14 96       	adiw	r26, 0x04	; 4
     f2c:	8c 91       	ld	r24, X
     f2e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     f30:	88 eb       	ldi	r24, 0xB8	; 184
     f32:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f1 e2       	ldi	r31, 0x21	; 33
     f3c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     f3e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     f40:	e0 ea       	ldi	r30, 0xA0	; 160
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	82 60       	ori	r24, 0x02	; 2
     f48:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     f4a:	78 94       	sei

	return STATUS_OK;
}
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret

00000f50 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	1f 92       	push	r1
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9c 01       	movw	r18, r24
     f5c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     f5e:	89 2b       	or	r24, r25
     f60:	09 f4       	brne	.+2      	; 0xf64 <twi_master_transfer+0x14>
     f62:	51 c0       	rjmp	.+162    	; 0x1006 <twi_master_transfer+0xb6>
     f64:	30 97       	sbiw	r30, 0x00	; 0
     f66:	09 f4       	brne	.+2      	; 0xf6a <twi_master_transfer+0x1a>
     f68:	50 c0       	rjmp	.+160    	; 0x100a <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     f6a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     f6c:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <transfer+0x9>
     f70:	88 23       	and	r24, r24
     f72:	19 f0       	breq	.+6      	; 0xf7a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     f74:	99 23       	and	r25, r25
     f76:	f1 f3       	breq	.-4      	; 0xf74 <twi_master_transfer+0x24>
     f78:	4a c0       	rjmp	.+148    	; 0x100e <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f7a:	8f b7       	in	r24, 0x3f	; 63
     f7c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f7e:	f8 94       	cli
	return flags;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     f82:	a0 e4       	ldi	r26, 0x40	; 64
     f84:	b1 e2       	ldi	r27, 0x21	; 33
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	19 96       	adiw	r26, 0x09	; 9
     f8a:	9c 93       	st	X, r25
     f8c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     f8e:	90 e8       	ldi	r25, 0x80	; 128
     f90:	1a 96       	adiw	r26, 0x0a	; 10
     f92:	9c 93       	st	X, r25
     f94:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f96:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     f98:	2d 93       	st	X+, r18
     f9a:	3c 93       	st	X, r19
     f9c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     f9e:	12 96       	adiw	r26, 0x02	; 2
     fa0:	6d 93       	st	X+, r22
     fa2:	7c 93       	st	X, r23
     fa4:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     fa6:	14 96       	adiw	r26, 0x04	; 4
     fa8:	1d 92       	st	X+, r1
     faa:	1c 92       	st	X, r1
     fac:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     fae:	16 96       	adiw	r26, 0x06	; 6
     fb0:	1d 92       	st	X+, r1
     fb2:	1c 92       	st	X, r1
     fb4:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     fb6:	18 96       	adiw	r26, 0x08	; 8
     fb8:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     fba:	80 81       	ld	r24, Z
     fbc:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     fbe:	64 81       	ldd	r22, Z+4	; 0x04
     fc0:	75 81       	ldd	r23, Z+5	; 0x05
     fc2:	67 2b       	or	r22, r23
     fc4:	11 f4       	brne	.+4      	; 0xfca <twi_master_transfer+0x7a>
     fc6:	41 11       	cpse	r20, r1
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     fca:	f9 01       	movw	r30, r18
     fcc:	86 83       	std	Z+6, r24	; 0x06
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	f9 01       	movw	r30, r18
     fd4:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     fd6:	e0 e4       	ldi	r30, 0x40	; 64
     fd8:	f1 e2       	ldi	r31, 0x21	; 33
     fda:	92 85       	ldd	r25, Z+10	; 0x0a
     fdc:	90 38       	cpi	r25, 0x80	; 128
     fde:	e9 f3       	breq	.-6      	; 0xfda <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     fe0:	f9 01       	movw	r30, r18
     fe2:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     fe4:	83 70       	andi	r24, 0x03	; 3
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	49 f0       	breq	.+18     	; 0xffc <twi_master_transfer+0xac>
     fea:	a0 e4       	ldi	r26, 0x40	; 64
     fec:	b1 e2       	ldi	r27, 0x21	; 33
     fee:	ed 91       	ld	r30, X+
     ff0:	fc 91       	ld	r31, X
     ff2:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     ff4:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     ff6:	83 70       	andi	r24, 0x03	; 3
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	c9 f7       	brne	.-14     	; 0xfee <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     ffc:	e0 e4       	ldi	r30, 0x40	; 64
     ffe:	f1 e2       	ldi	r31, 0x21	; 33
    1000:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    1002:	11 86       	std	Z+9, r1	; 0x09
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    1006:	88 ef       	ldi	r24, 0xF8	; 248
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <twi_master_transfer+0xc0>
    100a:	88 ef       	ldi	r24, 0xF8	; 248
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    100e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1010:	0f 90       	pop	r0
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1018:	fc 01       	movw	r30, r24
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	95 ff       	sbrs	r25, 5
    101e:	fd cf       	rjmp	.-6      	; 0x101a <usart_putchar+0x2>
    1020:	60 83       	st	Z, r22
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	08 95       	ret

00001028 <usart_getchar>:
    1028:	fc 01       	movw	r30, r24
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	99 23       	and	r25, r25
    102e:	ec f7       	brge	.-6      	; 0x102a <usart_getchar+0x2>
    1030:	80 81       	ld	r24, Z
    1032:	08 95       	ret

00001034 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1034:	4f 92       	push	r4
    1036:	5f 92       	push	r5
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	7c 01       	movw	r14, r24
    1050:	4a 01       	movw	r8, r20
    1052:	5b 01       	movw	r10, r22
    1054:	28 01       	movw	r4, r16
    1056:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1058:	fc 01       	movw	r30, r24
    105a:	84 81       	ldd	r24, Z+4	; 0x04
    105c:	82 ff       	sbrs	r24, 2
    105e:	16 c0       	rjmp	.+44     	; 0x108c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1060:	d9 01       	movw	r26, r18
    1062:	c8 01       	movw	r24, r16
    1064:	68 94       	set
    1066:	12 f8       	bld	r1, 2
    1068:	b6 95       	lsr	r27
    106a:	a7 95       	ror	r26
    106c:	97 95       	ror	r25
    106e:	87 95       	ror	r24
    1070:	16 94       	lsr	r1
    1072:	d1 f7       	brne	.-12     	; 0x1068 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1074:	b9 01       	movw	r22, r18
    1076:	a8 01       	movw	r20, r16
    1078:	03 2e       	mov	r0, r19
    107a:	36 e1       	ldi	r19, 0x16	; 22
    107c:	76 95       	lsr	r23
    107e:	67 95       	ror	r22
    1080:	57 95       	ror	r21
    1082:	47 95       	ror	r20
    1084:	3a 95       	dec	r19
    1086:	d1 f7       	brne	.-12     	; 0x107c <usart_set_baudrate+0x48>
    1088:	30 2d       	mov	r19, r0
    108a:	15 c0       	rjmp	.+42     	; 0x10b6 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    108c:	d9 01       	movw	r26, r18
    108e:	c8 01       	movw	r24, r16
    1090:	68 94       	set
    1092:	13 f8       	bld	r1, 3
    1094:	b6 95       	lsr	r27
    1096:	a7 95       	ror	r26
    1098:	97 95       	ror	r25
    109a:	87 95       	ror	r24
    109c:	16 94       	lsr	r1
    109e:	d1 f7       	brne	.-12     	; 0x1094 <usart_set_baudrate+0x60>
		min_rate /= 2;
    10a0:	b9 01       	movw	r22, r18
    10a2:	a8 01       	movw	r20, r16
    10a4:	03 2e       	mov	r0, r19
    10a6:	37 e1       	ldi	r19, 0x17	; 23
    10a8:	76 95       	lsr	r23
    10aa:	67 95       	ror	r22
    10ac:	57 95       	ror	r21
    10ae:	47 95       	ror	r20
    10b0:	3a 95       	dec	r19
    10b2:	d1 f7       	brne	.-12     	; 0x10a8 <usart_set_baudrate+0x74>
    10b4:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10b6:	88 15       	cp	r24, r8
    10b8:	99 05       	cpc	r25, r9
    10ba:	aa 05       	cpc	r26, r10
    10bc:	bb 05       	cpc	r27, r11
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <usart_set_baudrate+0x8e>
    10c0:	a6 c0       	rjmp	.+332    	; 0x120e <usart_set_baudrate+0x1da>
    10c2:	84 16       	cp	r8, r20
    10c4:	95 06       	cpc	r9, r21
    10c6:	a6 06       	cpc	r10, r22
    10c8:	b7 06       	cpc	r11, r23
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <usart_set_baudrate+0x9a>
    10cc:	a2 c0       	rjmp	.+324    	; 0x1212 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    10ce:	f7 01       	movw	r30, r14
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	82 fd       	sbrc	r24, 2
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <usart_set_baudrate+0xaa>
		baud *= 2;
    10d6:	88 0c       	add	r8, r8
    10d8:	99 1c       	adc	r9, r9
    10da:	aa 1c       	adc	r10, r10
    10dc:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    10de:	c3 01       	movw	r24, r6
    10e0:	b2 01       	movw	r22, r4
    10e2:	a5 01       	movw	r20, r10
    10e4:	94 01       	movw	r18, r8
    10e6:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    10ea:	2f 3f       	cpi	r18, 0xFF	; 255
    10ec:	31 05       	cpc	r19, r1
    10ee:	41 05       	cpc	r20, r1
    10f0:	51 05       	cpc	r21, r1
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <usart_set_baudrate+0xc2>
    10f4:	90 c0       	rjmp	.+288    	; 0x1216 <usart_set_baudrate+0x1e2>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	c9 ef       	ldi	r28, 0xF9	; 249
    1100:	05 c0       	rjmp	.+10     	; 0x110c <usart_set_baudrate+0xd8>
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	4a 07       	cpc	r20, r26
    1108:	5b 07       	cpc	r21, r27
    110a:	58 f0       	brcs	.+22     	; 0x1122 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1114:	cd 3f       	cpi	r28, 0xFD	; 253
    1116:	0c f4       	brge	.+2      	; 0x111a <usart_set_baudrate+0xe6>
			limit |= 1;
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    111c:	c7 30       	cpi	r28, 0x07	; 7
    111e:	89 f7       	brne	.-30     	; 0x1102 <usart_set_baudrate+0xce>
    1120:	4f c0       	rjmp	.+158    	; 0x11c0 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1122:	cc 23       	and	r28, r28
    1124:	0c f0       	brlt	.+2      	; 0x1128 <usart_set_baudrate+0xf4>
    1126:	4c c0       	rjmp	.+152    	; 0x11c0 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1128:	d5 01       	movw	r26, r10
    112a:	c4 01       	movw	r24, r8
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	aa 1f       	adc	r26, r26
    1142:	bb 1f       	adc	r27, r27
    1144:	48 1a       	sub	r4, r24
    1146:	59 0a       	sbc	r5, r25
    1148:	6a 0a       	sbc	r6, r26
    114a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    114c:	ce 3f       	cpi	r28, 0xFE	; 254
    114e:	f4 f4       	brge	.+60     	; 0x118c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1150:	8d ef       	ldi	r24, 0xFD	; 253
    1152:	9f ef       	ldi	r25, 0xFF	; 255
    1154:	8c 1b       	sub	r24, r28
    1156:	91 09       	sbc	r25, r1
    1158:	c7 fd       	sbrc	r28, 7
    115a:	93 95       	inc	r25
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <usart_set_baudrate+0x132>
    115e:	44 0c       	add	r4, r4
    1160:	55 1c       	adc	r5, r5
    1162:	66 1c       	adc	r6, r6
    1164:	77 1c       	adc	r7, r7
    1166:	8a 95       	dec	r24
    1168:	d2 f7       	brpl	.-12     	; 0x115e <usart_set_baudrate+0x12a>
    116a:	d5 01       	movw	r26, r10
    116c:	c4 01       	movw	r24, r8
    116e:	b6 95       	lsr	r27
    1170:	a7 95       	ror	r26
    1172:	97 95       	ror	r25
    1174:	87 95       	ror	r24
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	64 0d       	add	r22, r4
    117c:	75 1d       	adc	r23, r5
    117e:	86 1d       	adc	r24, r6
    1180:	97 1d       	adc	r25, r7
    1182:	a5 01       	movw	r20, r10
    1184:	94 01       	movw	r18, r8
    1186:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__udivmodsi4>
    118a:	37 c0       	rjmp	.+110    	; 0x11fa <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	8c 0f       	add	r24, r28
    1190:	a5 01       	movw	r20, r10
    1192:	94 01       	movw	r18, r8
    1194:	04 c0       	rjmp	.+8      	; 0x119e <usart_set_baudrate+0x16a>
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	44 1f       	adc	r20, r20
    119c:	55 1f       	adc	r21, r21
    119e:	8a 95       	dec	r24
    11a0:	d2 f7       	brpl	.-12     	; 0x1196 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    11a2:	da 01       	movw	r26, r20
    11a4:	c9 01       	movw	r24, r18
    11a6:	b6 95       	lsr	r27
    11a8:	a7 95       	ror	r26
    11aa:	97 95       	ror	r25
    11ac:	87 95       	ror	r24
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	64 0d       	add	r22, r4
    11b4:	75 1d       	adc	r23, r5
    11b6:	86 1d       	adc	r24, r6
    11b8:	97 1d       	adc	r25, r7
    11ba:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__udivmodsi4>
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	8c 0f       	add	r24, r28
    11c4:	a5 01       	movw	r20, r10
    11c6:	94 01       	movw	r18, r8
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <usart_set_baudrate+0x19e>
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	44 1f       	adc	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	8a 95       	dec	r24
    11d4:	d2 f7       	brpl	.-12     	; 0x11ca <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    11d6:	da 01       	movw	r26, r20
    11d8:	c9 01       	movw	r24, r18
    11da:	b6 95       	lsr	r27
    11dc:	a7 95       	ror	r26
    11de:	97 95       	ror	r25
    11e0:	87 95       	ror	r24
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	64 0d       	add	r22, r4
    11e8:	75 1d       	adc	r23, r5
    11ea:	86 1d       	adc	r24, r6
    11ec:	97 1d       	adc	r25, r7
    11ee:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <__udivmodsi4>
    11f2:	21 50       	subi	r18, 0x01	; 1
    11f4:	31 09       	sbc	r19, r1
    11f6:	41 09       	sbc	r20, r1
    11f8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11fa:	83 2f       	mov	r24, r19
    11fc:	8f 70       	andi	r24, 0x0F	; 15
    11fe:	c2 95       	swap	r28
    1200:	c0 7f       	andi	r28, 0xF0	; 240
    1202:	c8 2b       	or	r28, r24
    1204:	f7 01       	movw	r30, r14
    1206:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1208:	26 83       	std	Z+6, r18	; 0x06

	return true;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	18 c0       	rjmp	.+48     	; 0x123e <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	16 c0       	rjmp	.+44     	; 0x123e <usart_set_baudrate+0x20a>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	14 c0       	rjmp	.+40     	; 0x123e <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1216:	d5 01       	movw	r26, r10
    1218:	c4 01       	movw	r24, r8
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	aa 1f       	adc	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	aa 1f       	adc	r26, r26
    1228:	bb 1f       	adc	r27, r27
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	48 1a       	sub	r4, r24
    1234:	59 0a       	sbc	r5, r25
    1236:	6a 0a       	sbc	r6, r26
    1238:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    123a:	c9 ef       	ldi	r28, 0xF9	; 249
    123c:	89 cf       	rjmp	.-238    	; 0x1150 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	6f 90       	pop	r6
    1254:	5f 90       	pop	r5
    1256:	4f 90       	pop	r4
    1258:	08 95       	ret

0000125a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
    1264:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <usart_init_rs232+0x12>
    126a:	d1 c0       	rjmp	.+418    	; 0x140e <usart_init_rs232+0x1b4>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    126c:	80 3c       	cpi	r24, 0xC0	; 192
    126e:	91 05       	cpc	r25, r1
    1270:	21 f4       	brne	.+8      	; 0x127a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1272:	60 e1       	ldi	r22, 0x10	; 16
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	26 d8       	rcall	.-4020   	; 0x2c4 <sysclk_enable_module>
    1278:	ca c0       	rjmp	.+404    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    127a:	c1 15       	cp	r28, r1
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	d8 07       	cpc	r29, r24
    1280:	21 f4       	brne	.+8      	; 0x128a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	1e d8       	rcall	.-4036   	; 0x2c4 <sysclk_enable_module>
    1288:	c2 c0       	rjmp	.+388    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    128a:	c0 38       	cpi	r28, 0x80	; 128
    128c:	e1 e0       	ldi	r30, 0x01	; 1
    128e:	de 07       	cpc	r29, r30
    1290:	21 f4       	brne	.+8      	; 0x129a <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1292:	62 e0       	ldi	r22, 0x02	; 2
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	16 d8       	rcall	.-4052   	; 0x2c4 <sysclk_enable_module>
    1298:	ba c0       	rjmp	.+372    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    129a:	c1 15       	cp	r28, r1
    129c:	f1 e0       	ldi	r31, 0x01	; 1
    129e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    12a0:	21 f4       	brne	.+8      	; 0x12aa <usart_init_rs232+0x50>
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e d8       	rcall	.-4068   	; 0x2c4 <sysclk_enable_module>
    12a8:	b2 c0       	rjmp	.+356    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    12aa:	c0 38       	cpi	r28, 0x80	; 128
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    12b0:	21 f4       	brne	.+8      	; 0x12ba <usart_init_rs232+0x60>
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	06 d8       	rcall	.-4084   	; 0x2c4 <sysclk_enable_module>
    12b8:	aa c0       	rjmp	.+340    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    12ba:	c1 15       	cp	r28, r1
    12bc:	e2 e0       	ldi	r30, 0x02	; 2
    12be:	de 07       	cpc	r29, r30
    12c0:	29 f4       	brne	.+10     	; 0x12cc <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12ca:	a1 c0       	rjmp	.+322    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    12cc:	c0 32       	cpi	r28, 0x20	; 32
    12ce:	f3 e0       	ldi	r31, 0x03	; 3
    12d0:	df 07       	cpc	r29, r31
    12d2:	29 f4       	brne	.+10     	; 0x12de <usart_init_rs232+0x84>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    12d4:	64 e0       	ldi	r22, 0x04	; 4
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12dc:	98 c0       	rjmp	.+304    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    12de:	c1 15       	cp	r28, r1
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	d8 07       	cpc	r29, r24
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <usart_init_rs232+0x96>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12ee:	8f c0       	rjmp	.+286    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    12f0:	c1 15       	cp	r28, r1
    12f2:	e9 e0       	ldi	r30, 0x09	; 9
    12f4:	de 07       	cpc	r29, r30
    12f6:	29 f4       	brne	.+10     	; 0x1302 <usart_init_rs232+0xa8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	84 e0       	ldi	r24, 0x04	; 4
    12fc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1300:	86 c0       	rjmp	.+268    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1302:	c1 15       	cp	r28, r1
    1304:	fa e0       	ldi	r31, 0x0A	; 10
    1306:	df 07       	cpc	r29, r31
    1308:	29 f4       	brne	.+10     	; 0x1314 <usart_init_rs232+0xba>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1312:	7d c0       	rjmp	.+250    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1314:	c0 34       	cpi	r28, 0x40	; 64
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	d8 07       	cpc	r29, r24
    131a:	29 f4       	brne	.+10     	; 0x1326 <usart_init_rs232+0xcc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1324:	74 c0       	rjmp	.+232    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1326:	c0 34       	cpi	r28, 0x40	; 64
    1328:	e9 e0       	ldi	r30, 0x09	; 9
    132a:	de 07       	cpc	r29, r30
    132c:	29 f4       	brne	.+10     	; 0x1338 <usart_init_rs232+0xde>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1336:	6b c0       	rjmp	.+214    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1338:	c0 39       	cpi	r28, 0x90	; 144
    133a:	f8 e0       	ldi	r31, 0x08	; 8
    133c:	df 07       	cpc	r29, r31
    133e:	29 f4       	brne	.+10     	; 0x134a <usart_init_rs232+0xf0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1340:	64 e0       	ldi	r22, 0x04	; 4
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1348:	62 c0       	rjmp	.+196    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    134a:	c0 39       	cpi	r28, 0x90	; 144
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	d8 07       	cpc	r29, r24
    1350:	29 f4       	brne	.+10     	; 0x135c <usart_init_rs232+0x102>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    135a:	59 c0       	rjmp	.+178    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    135c:	c0 39       	cpi	r28, 0x90	; 144
    135e:	ea e0       	ldi	r30, 0x0A	; 10
    1360:	de 07       	cpc	r29, r30
    1362:	29 f4       	brne	.+10     	; 0x136e <usart_init_rs232+0x114>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    136c:	50 c0       	rjmp	.+160    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    136e:	c0 3c       	cpi	r28, 0xC0	; 192
    1370:	f8 e0       	ldi	r31, 0x08	; 8
    1372:	df 07       	cpc	r29, r31
    1374:	29 f4       	brne	.+10     	; 0x1380 <usart_init_rs232+0x126>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1376:	68 e0       	ldi	r22, 0x08	; 8
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    137e:	47 c0       	rjmp	.+142    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1380:	c0 3c       	cpi	r28, 0xC0	; 192
    1382:	89 e0       	ldi	r24, 0x09	; 9
    1384:	d8 07       	cpc	r29, r24
    1386:	29 f4       	brne	.+10     	; 0x1392 <usart_init_rs232+0x138>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1388:	68 e0       	ldi	r22, 0x08	; 8
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1390:	3e c0       	rjmp	.+124    	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1392:	c0 3a       	cpi	r28, 0xA0	; 160
    1394:	e8 e0       	ldi	r30, 0x08	; 8
    1396:	de 07       	cpc	r29, r30
    1398:	29 f4       	brne	.+10     	; 0x13a4 <usart_init_rs232+0x14a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    139a:	60 e1       	ldi	r22, 0x10	; 16
    139c:	83 e0       	ldi	r24, 0x03	; 3
    139e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13a2:	35 c0       	rjmp	.+106    	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    13a4:	c0 3a       	cpi	r28, 0xA0	; 160
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	df 07       	cpc	r29, r31
    13aa:	29 f4       	brne	.+10     	; 0x13b6 <usart_init_rs232+0x15c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    13ac:	60 e1       	ldi	r22, 0x10	; 16
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13b4:	2c c0       	rjmp	.+88     	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    13b6:	c0 3a       	cpi	r28, 0xA0	; 160
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	d8 07       	cpc	r29, r24
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <usart_init_rs232+0x16e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    13be:	60 e1       	ldi	r22, 0x10	; 16
    13c0:	85 e0       	ldi	r24, 0x05	; 5
    13c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13c6:	23 c0       	rjmp	.+70     	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    13c8:	c0 3b       	cpi	r28, 0xB0	; 176
    13ca:	e8 e0       	ldi	r30, 0x08	; 8
    13cc:	de 07       	cpc	r29, r30
    13ce:	29 f4       	brne	.+10     	; 0x13da <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    13d0:	60 e2       	ldi	r22, 0x20	; 32
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13d8:	1a c0       	rjmp	.+52     	; 0x140e <usart_init_rs232+0x1b4>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    13da:	c0 3b       	cpi	r28, 0xB0	; 176
    13dc:	f9 e0       	ldi	r31, 0x09	; 9
    13de:	df 07       	cpc	r29, r31
    13e0:	29 f4       	brne	.+10     	; 0x13ec <usart_init_rs232+0x192>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    13e2:	60 e2       	ldi	r22, 0x20	; 32
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13ea:	11 c0       	rjmp	.+34     	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    13ec:	c0 38       	cpi	r28, 0x80	; 128
    13ee:	84 e0       	ldi	r24, 0x04	; 4
    13f0:	d8 07       	cpc	r29, r24
    13f2:	29 f4       	brne	.+10     	; 0x13fe <usart_init_rs232+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    13f4:	60 e4       	ldi	r22, 0x40	; 64
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <usart_init_rs232+0x1b4>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    13fe:	c0 3a       	cpi	r28, 0xA0	; 160
    1400:	e4 e0       	ldi	r30, 0x04	; 4
    1402:	de 07       	cpc	r29, r30
    1404:	21 f4       	brne	.+8      	; 0x140e <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1406:	60 e4       	ldi	r22, 0x40	; 64
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	8f 73       	andi	r24, 0x3F	; 63
    1412:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1414:	f8 01       	movw	r30, r16
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	84 81       	ldd	r24, Z+4	; 0x04
    141a:	89 2b       	or	r24, r25
    141c:	96 81       	ldd	r25, Z+6	; 0x06
    141e:	91 11       	cpse	r25, r1
    1420:	98 e0       	ldi	r25, 0x08	; 8
    1422:	89 2b       	or	r24, r25
    1424:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1426:	f8 01       	movw	r30, r16
    1428:	40 81       	ld	r20, Z
    142a:	51 81       	ldd	r21, Z+1	; 0x01
    142c:	62 81       	ldd	r22, Z+2	; 0x02
    142e:	73 81       	ldd	r23, Z+3	; 0x03
    1430:	00 e8       	ldi	r16, 0x80	; 128
    1432:	14 e8       	ldi	r17, 0x84	; 132
    1434:	2e e1       	ldi	r18, 0x1E	; 30
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	ce 01       	movw	r24, r28
    143a:	fc dd       	rcall	.-1032   	; 0x1034 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	98 60       	ori	r25, 0x08	; 8
    1440:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	90 61       	ori	r25, 0x10	; 16
    1446:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	08 95       	ret

00001452 <adc_init>:

#include <asf.h>
#include "adc.h"

void adc_init(void)
{
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
	ADCA.CTRLA = 0x01; // enable the ADC
    145c:	c0 e0       	ldi	r28, 0x00	; 0
    145e:	d2 e0       	ldi	r29, 0x02	; 2
    1460:	ff 24       	eor	r15, r15
    1462:	f3 94       	inc	r15
    1464:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;; // signed 12 bit mode
    1466:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1468:	80 e1       	ldi	r24, 0x10	; 16
    146a:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    146c:	85 e0       	ldi	r24, 0x05	; 5
    146e:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1470:	61 e2       	ldi	r22, 0x21	; 33
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	46 d8       	rcall	.-3956   	; 0x504 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1478:	08 2f       	mov	r16, r24
    147a:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    147c:	10 2f       	mov	r17, r16
    147e:	00 27       	eor	r16, r16
    1480:	60 e2       	ldi	r22, 0x20	; 32
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	3e d8       	rcall	.-3972   	; 0x504 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1488:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    148a:	0c 87       	std	Y+12, r16	; 0x0c
    148c:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0x01; // single ended input
    148e:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00001000; // pin 1
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	89 a3       	std	Y+33, r24	; 0x21
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	08 95       	ret

000014a0 <adc_set_pin>:

void adc_set_pin(uint8_t pin)
{
	if (pin==1){
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	21 f4       	brne	.+8      	; 0x14ac <adc_set_pin+0xc>
		ADCA.CH0.MUXCTRL = 0b00001000; // pin 1
    14a4:	88 e0       	ldi	r24, 0x08	; 8
    14a6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    14aa:	08 95       	ret
	}else if(pin==2){
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <adc_set_pin+0x18>
		ADCA.CH0.MUXCTRL = 0b00010000; // pin 2
    14b0:	80 e1       	ldi	r24, 0x10	; 16
    14b2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    14b6:	08 95       	ret
	}else if(pin==3){
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <adc_set_pin+0x24>
		ADCA.CH0.MUXCTRL = 0b00011000; // pin 3
    14bc:	88 e1       	ldi	r24, 0x18	; 24
    14be:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    14c2:	08 95       	ret
	}else{
		ADCA.CH0.MUXCTRL = 0b00100000; // pin 4
    14c4:	80 e2       	ldi	r24, 0x20	; 32
    14c6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    14ca:	08 95       	ret

000014cc <adc_read>:
	}
}

int16_t adc_read(void)
{
	ADCA.CH0.CTRL |= 0x80; // start the conversion
    14cc:	e0 e0       	ldi	r30, 0x00	; 0
    14ce:	f2 e0       	ldi	r31, 0x02	; 2
    14d0:	80 a1       	ldd	r24, Z+32	; 0x20
    14d2:	80 68       	ori	r24, 0x80	; 128
    14d4:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS)); // wait until the conversion is done
    14d6:	83 a1       	ldd	r24, Z+35	; 0x23
    14d8:	88 23       	and	r24, r24
    14da:	e9 f3       	breq	.-6      	; 0x14d6 <adc_read+0xa>
	ADCA.CH0.INTFLAGS = 0; // Set the flag back to false
    14dc:	e0 e0       	ldi	r30, 0x00	; 0
    14de:	f2 e0       	ldi	r31, 0x02	; 2
    14e0:	13 a2       	std	Z+35, r1	; 0x23
	return ADCA.CH0.RES; // return the 12-bit result as a uint16_t
    14e2:	84 a1       	ldd	r24, Z+36	; 0x24
    14e4:	95 a1       	ldd	r25, Z+37	; 0x25
    14e6:	08 95       	ret

000014e8 <init_imu>:
}

bool imu_is_data_ready(void) //true or false: is data ready
{
	return (bool)is_data_rdy(); //returns true or false off of 0 or 1 checking if IMU data is ready based on the function is_data_ready
}
    14e8:	44 e6       	ldi	r20, 0x64	; 100
    14ea:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <init_mpu9250>
    14ee:	08 95       	ret

000014f0 <imu_update>:

imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
    14f0:	2f 92       	push	r2
    14f2:	3f 92       	push	r3
    14f4:	4f 92       	push	r4
    14f6:	5f 92       	push	r5
    14f8:	6f 92       	push	r6
    14fa:	7f 92       	push	r7
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	c1 54       	subi	r28, 0x41	; 65
    151a:	d1 09       	sbc	r29, r1
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	1c 01       	movw	r2, r24
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <read_mpu9250>
    152a:	85 e1       	ldi	r24, 0x15	; 21
    152c:	fe 01       	movw	r30, r28
    152e:	31 96       	adiw	r30, 0x01	; 1
    1530:	a5 e8       	ldi	r26, 0x85	; 133
    1532:	b2 e2       	ldi	r27, 0x22	; 34
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	8a 95       	dec	r24
    153a:	e1 f7       	brne	.-8      	; 0x1534 <imu_update+0x44>
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
						mapdouble((double)data.gyro_y+(GYR_Y_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						mapdouble((double)data.gyro_z+(GYR_Z_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						(double)data.acc_x+(ACC_X_OFF), (double)data.acc_y+(ACC_Y_OFF), (double)data.acc_z+(ACC_Z_OFF),
    153c:	05 e8       	ldi	r16, 0x85	; 133
    153e:	12 e2       	ldi	r17, 0x22	; 34
imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
    1540:	f8 01       	movw	r30, r16
    1542:	61 81       	ldd	r22, Z+1	; 0x01
    1544:	72 81       	ldd	r23, Z+2	; 0x02
    1546:	07 2e       	mov	r0, r23
    1548:	00 0c       	add	r0, r0
    154a:	88 0b       	sbc	r24, r24
    154c:	99 0b       	sbc	r25, r25
    154e:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1552:	6b 01       	movw	r12, r22
    1554:	7c 01       	movw	r14, r24
    1556:	60 91 0c 20 	lds	r22, 0x200C	; 0x80200c <ACC_X_OFF>
    155a:	70 91 0d 20 	lds	r23, 0x200D	; 0x80200d <ACC_X_OFF+0x1>
    155e:	07 2e       	mov	r0, r23
    1560:	00 0c       	add	r0, r0
    1562:	88 0b       	sbc	r24, r24
    1564:	99 0b       	sbc	r25, r25
    1566:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	c7 01       	movw	r24, r14
    1570:	b6 01       	movw	r22, r12
    1572:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1576:	5b 01       	movw	r10, r22
    1578:	6c 01       	movw	r12, r24
    157a:	f8 01       	movw	r30, r16
    157c:	65 85       	ldd	r22, Z+13	; 0x0d
    157e:	76 85       	ldd	r23, Z+14	; 0x0e
    1580:	07 2e       	mov	r0, r23
    1582:	00 0c       	add	r0, r0
    1584:	88 0b       	sbc	r24, r24
    1586:	99 0b       	sbc	r25, r25
    1588:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    158c:	2b 01       	movw	r4, r22
    158e:	3c 01       	movw	r6, r24
    1590:	60 91 4b 21 	lds	r22, 0x214B	; 0x80214b <GYR_Z_OFF>
    1594:	70 91 4c 21 	lds	r23, 0x214C	; 0x80214c <GYR_Z_OFF+0x1>
    1598:	07 2e       	mov	r0, r23
    159a:	00 0c       	add	r0, r0
    159c:	88 0b       	sbc	r24, r24
    159e:	99 0b       	sbc	r25, r25
    15a0:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	c3 01       	movw	r24, r6
    15aa:	b2 01       	movw	r22, r4
    15ac:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	55 e4       	ldi	r21, 0x45	; 69
    15c4:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    15e0:	6a 8f       	std	Y+26, r22	; 0x1a
    15e2:	7b 8f       	std	Y+27, r23	; 0x1b
    15e4:	8c 8f       	std	Y+28, r24	; 0x1c
    15e6:	9d 8f       	std	Y+29, r25	; 0x1d
    15e8:	f8 01       	movw	r30, r16
    15ea:	63 85       	ldd	r22, Z+11	; 0x0b
    15ec:	74 85       	ldd	r23, Z+12	; 0x0c
    15ee:	07 2e       	mov	r0, r23
    15f0:	00 0c       	add	r0, r0
    15f2:	88 0b       	sbc	r24, r24
    15f4:	99 0b       	sbc	r25, r25
    15f6:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    15fa:	2b 01       	movw	r4, r22
    15fc:	3c 01       	movw	r6, r24
    15fe:	60 91 4d 21 	lds	r22, 0x214D	; 0x80214d <GYR_Y_OFF>
    1602:	70 91 4e 21 	lds	r23, 0x214E	; 0x80214e <GYR_Y_OFF+0x1>
    1606:	07 2e       	mov	r0, r23
    1608:	00 0c       	add	r0, r0
    160a:	88 0b       	sbc	r24, r24
    160c:	99 0b       	sbc	r25, r25
    160e:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	c3 01       	movw	r24, r6
    1618:	b2 01       	movw	r22, r4
    161a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	55 e4       	ldi	r21, 0x45	; 69
    1632:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	3f ef       	ldi	r19, 0xFF	; 255
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	57 e4       	ldi	r21, 0x47	; 71
    163e:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	4a ef       	ldi	r20, 0xFA	; 250
    1648:	54 e4       	ldi	r21, 0x44	; 68
    164a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    164e:	6e 8f       	std	Y+30, r22	; 0x1e
    1650:	7f 8f       	std	Y+31, r23	; 0x1f
    1652:	88 a3       	std	Y+32, r24	; 0x20
    1654:	99 a3       	std	Y+33, r25	; 0x21
    1656:	f8 01       	movw	r30, r16
    1658:	61 85       	ldd	r22, Z+9	; 0x09
    165a:	72 85       	ldd	r23, Z+10	; 0x0a
    165c:	07 2e       	mov	r0, r23
    165e:	00 0c       	add	r0, r0
    1660:	88 0b       	sbc	r24, r24
    1662:	99 0b       	sbc	r25, r25
    1664:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1668:	2b 01       	movw	r4, r22
    166a:	3c 01       	movw	r6, r24
    166c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <GYR_X_OFF>
    1670:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <GYR_X_OFF+0x1>
    1674:	07 2e       	mov	r0, r23
    1676:	00 0c       	add	r0, r0
    1678:	88 0b       	sbc	r24, r24
    167a:	99 0b       	sbc	r25, r25
    167c:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	c3 01       	movw	r24, r6
    1686:	b2 01       	movw	r22, r4
    1688:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	55 e4       	ldi	r21, 0x45	; 69
    16a0:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a ef       	ldi	r20, 0xFA	; 250
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	f8 01       	movw	r30, r16
    16c2:	63 89       	ldd	r22, Z+19	; 0x13
    16c4:	74 89       	ldd	r23, Z+20	; 0x14
    16c6:	07 2e       	mov	r0, r23
    16c8:	00 0c       	add	r0, r0
    16ca:	88 0b       	sbc	r24, r24
    16cc:	99 0b       	sbc	r25, r25
    16ce:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    16d2:	6e 8b       	std	Y+22, r22	; 0x16
    16d4:	7f 8b       	std	Y+23, r23	; 0x17
    16d6:	88 8f       	std	Y+24, r24	; 0x18
    16d8:	99 8f       	std	Y+25, r25	; 0x19
    16da:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <MAG_Z_OFF>
    16de:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <MAG_Z_OFF+0x1>
    16e2:	07 2e       	mov	r0, r23
    16e4:	00 0c       	add	r0, r0
    16e6:	88 0b       	sbc	r24, r24
    16e8:	99 0b       	sbc	r25, r25
    16ea:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	6e 89       	ldd	r22, Y+22	; 0x16
    16f4:	7f 89       	ldd	r23, Y+23	; 0x17
    16f6:	88 8d       	ldd	r24, Y+24	; 0x18
    16f8:	99 8d       	ldd	r25, Y+25	; 0x19
    16fa:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	b0 58       	subi	r27, 0x80	; 128
    1704:	bf 93       	push	r27
    1706:	af 93       	push	r26
    1708:	9f 93       	push	r25
    170a:	8f 93       	push	r24
    170c:	f8 01       	movw	r30, r16
    170e:	67 85       	ldd	r22, Z+15	; 0x0f
    1710:	70 89       	ldd	r23, Z+16	; 0x10
    1712:	07 2e       	mov	r0, r23
    1714:	00 0c       	add	r0, r0
    1716:	88 0b       	sbc	r24, r24
    1718:	99 0b       	sbc	r25, r25
    171a:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    171e:	6e 8b       	std	Y+22, r22	; 0x16
    1720:	7f 8b       	std	Y+23, r23	; 0x17
    1722:	88 8f       	std	Y+24, r24	; 0x18
    1724:	99 8f       	std	Y+25, r25	; 0x19
    1726:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <MAG_X_OFF>
    172a:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <MAG_X_OFF+0x1>
    172e:	07 2e       	mov	r0, r23
    1730:	00 0c       	add	r0, r0
    1732:	88 0b       	sbc	r24, r24
    1734:	99 0b       	sbc	r25, r25
    1736:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	6e 89       	ldd	r22, Y+22	; 0x16
    1740:	7f 89       	ldd	r23, Y+23	; 0x17
    1742:	88 8d       	ldd	r24, Y+24	; 0x18
    1744:	99 8d       	ldd	r25, Y+25	; 0x19
    1746:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    174a:	9f 93       	push	r25
    174c:	8f 93       	push	r24
    174e:	7f 93       	push	r23
    1750:	6f 93       	push	r22
    1752:	f8 01       	movw	r30, r16
    1754:	61 89       	ldd	r22, Z+17	; 0x11
    1756:	72 89       	ldd	r23, Z+18	; 0x12
    1758:	07 2e       	mov	r0, r23
    175a:	00 0c       	add	r0, r0
    175c:	88 0b       	sbc	r24, r24
    175e:	99 0b       	sbc	r25, r25
    1760:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1764:	6e 8b       	std	Y+22, r22	; 0x16
    1766:	7f 8b       	std	Y+23, r23	; 0x17
    1768:	88 8f       	std	Y+24, r24	; 0x18
    176a:	99 8f       	std	Y+25, r25	; 0x19
    176c:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <MAG_Y_OFF>
    1770:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <MAG_Y_OFF+0x1>
    1774:	07 2e       	mov	r0, r23
    1776:	00 0c       	add	r0, r0
    1778:	88 0b       	sbc	r24, r24
    177a:	99 0b       	sbc	r25, r25
    177c:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	6e 89       	ldd	r22, Y+22	; 0x16
    1786:	7f 89       	ldd	r23, Y+23	; 0x17
    1788:	88 8d       	ldd	r24, Y+24	; 0x18
    178a:	99 8d       	ldd	r25, Y+25	; 0x19
    178c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1790:	9f 93       	push	r25
    1792:	8f 93       	push	r24
    1794:	7f 93       	push	r23
    1796:	6f 93       	push	r22
    1798:	f8 01       	movw	r30, r16
    179a:	65 81       	ldd	r22, Z+5	; 0x05
    179c:	76 81       	ldd	r23, Z+6	; 0x06
    179e:	07 2e       	mov	r0, r23
    17a0:	00 0c       	add	r0, r0
    17a2:	88 0b       	sbc	r24, r24
    17a4:	99 0b       	sbc	r25, r25
    17a6:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    17aa:	6e 8b       	std	Y+22, r22	; 0x16
    17ac:	7f 8b       	std	Y+23, r23	; 0x17
    17ae:	88 8f       	std	Y+24, r24	; 0x18
    17b0:	99 8f       	std	Y+25, r25	; 0x19
    17b2:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <ACC_Z_OFF>
    17b6:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <ACC_Z_OFF+0x1>
    17ba:	07 2e       	mov	r0, r23
    17bc:	00 0c       	add	r0, r0
    17be:	88 0b       	sbc	r24, r24
    17c0:	99 0b       	sbc	r25, r25
    17c2:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    17c6:	9b 01       	movw	r18, r22
    17c8:	ac 01       	movw	r20, r24
    17ca:	6e 89       	ldd	r22, Y+22	; 0x16
    17cc:	7f 89       	ldd	r23, Y+23	; 0x17
    17ce:	88 8d       	ldd	r24, Y+24	; 0x18
    17d0:	99 8d       	ldd	r25, Y+25	; 0x19
    17d2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    17d6:	9f 93       	push	r25
    17d8:	8f 93       	push	r24
    17da:	7f 93       	push	r23
    17dc:	6f 93       	push	r22
    17de:	f8 01       	movw	r30, r16
    17e0:	63 81       	ldd	r22, Z+3	; 0x03
    17e2:	74 81       	ldd	r23, Z+4	; 0x04
    17e4:	07 2e       	mov	r0, r23
    17e6:	00 0c       	add	r0, r0
    17e8:	88 0b       	sbc	r24, r24
    17ea:	99 0b       	sbc	r25, r25
    17ec:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    17f0:	6e 8b       	std	Y+22, r22	; 0x16
    17f2:	7f 8b       	std	Y+23, r23	; 0x17
    17f4:	88 8f       	std	Y+24, r24	; 0x18
    17f6:	99 8f       	std	Y+25, r25	; 0x19
    17f8:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <ACC_Y_OFF>
    17fc:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <ACC_Y_OFF+0x1>
    1800:	07 2e       	mov	r0, r23
    1802:	00 0c       	add	r0, r0
    1804:	88 0b       	sbc	r24, r24
    1806:	99 0b       	sbc	r25, r25
    1808:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	6e 89       	ldd	r22, Y+22	; 0x16
    1812:	7f 89       	ldd	r23, Y+23	; 0x17
    1814:	88 8d       	ldd	r24, Y+24	; 0x18
    1816:	99 8d       	ldd	r25, Y+25	; 0x19
    1818:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    181c:	9f 93       	push	r25
    181e:	8f 93       	push	r24
    1820:	7f 93       	push	r23
    1822:	6f 93       	push	r22
    1824:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1826:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1828:	0c 8d       	ldd	r16, Y+28	; 0x1c
    182a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    182c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    182e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1830:	48 a1       	ldd	r20, Y+32	; 0x20
    1832:	59 a1       	ldd	r21, Y+33	; 0x21
    1834:	c3 01       	movw	r24, r6
    1836:	b2 01       	movw	r22, r4
    1838:	83 d7       	rcall	.+3846   	; 0x2740 <MahonyAHRSupdate>
						(double)data.mag_y+(MAG_Y_OFF), (double)data.mag_x+(MAG_X_OFF), -((double)data.mag_z+(MAG_Z_OFF)));

	
	//converts all the little boxes from the mpu into more digestable boxes of angles
	imu_data_t imudata;					
	imudata.yaw   = atan2(2.0 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3); //gets yaw angle in radians
    183a:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    183e:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1842:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1846:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    184a:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    184e:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1852:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1856:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    185a:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q1>
    185e:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q1+0x1>
    1862:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q1+0x2>
    1866:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q1+0x3>
    186a:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    186e:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    1872:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    1876:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
    187a:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q2>
    187e:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q2+0x1>
    1882:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q2+0x2>
    1886:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q2+0x3>
    188a:	4a 8e       	std	Y+26, r4	; 0x1a
    188c:	5b 8e       	std	Y+27, r5	; 0x1b
    188e:	6c 8e       	std	Y+28, r6	; 0x1c
    1890:	7d 8e       	std	Y+29, r7	; 0x1d
    1892:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q2>
    1896:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q2+0x1>
    189a:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q2+0x2>
    189e:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q2+0x3>
    18a2:	4e 8e       	std	Y+30, r4	; 0x1e
    18a4:	5f 8e       	std	Y+31, r5	; 0x1f
    18a6:	68 a2       	std	Y+32, r6	; 0x20
    18a8:	79 a2       	std	Y+33, r7	; 0x21
    18aa:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    18ae:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    18b2:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    18b6:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    18ba:	4e 8a       	std	Y+22, r4	; 0x16
    18bc:	5f 8a       	std	Y+23, r5	; 0x17
    18be:	68 8e       	std	Y+24, r6	; 0x18
    18c0:	79 8e       	std	Y+25, r7	; 0x19
    18c2:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    18c6:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    18ca:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    18ce:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    18d2:	4a a2       	std	Y+34, r4	; 0x22
    18d4:	5b a2       	std	Y+35, r5	; 0x23
    18d6:	6c a2       	std	Y+36, r6	; 0x24
    18d8:	7d a2       	std	Y+37, r7	; 0x25
    18da:	40 90 63 21 	lds	r4, 0x2163	; 0x802163 <q1>
    18de:	50 90 64 21 	lds	r5, 0x2164	; 0x802164 <q1+0x1>
    18e2:	60 90 65 21 	lds	r6, 0x2165	; 0x802165 <q1+0x2>
    18e6:	70 90 66 21 	lds	r7, 0x2166	; 0x802166 <q1+0x3>
    18ea:	4e a2       	std	Y+38, r4	; 0x26
    18ec:	5f a2       	std	Y+39, r5	; 0x27
    18ee:	68 a6       	std	Y+40, r6	; 0x28
    18f0:	79 a6       	std	Y+41, r7	; 0x29
    18f2:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q2>
    18f6:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q2+0x1>
    18fa:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q2+0x2>
    18fe:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q2+0x3>
    1902:	4a a6       	std	Y+42, r4	; 0x2a
    1904:	5b a6       	std	Y+43, r5	; 0x2b
    1906:	6c a6       	std	Y+44, r6	; 0x2c
    1908:	7d a6       	std	Y+45, r7	; 0x2d
    190a:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
    190e:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
    1912:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
    1916:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
    191a:	4e aa       	std	Y+54, r4	; 0x36
    191c:	5f aa       	std	Y+55, r5	; 0x37
    191e:	68 ae       	std	Y+56, r6	; 0x38
    1920:	79 ae       	std	Y+57, r7	; 0x39
    1922:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    1926:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    192a:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    192e:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    1932:	4e a6       	std	Y+46, r4	; 0x2e
    1934:	5f a6       	std	Y+47, r5	; 0x2f
    1936:	68 aa       	std	Y+48, r6	; 0x30
    1938:	79 aa       	std	Y+49, r7	; 0x31
    193a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    193e:	2b 01       	movw	r4, r22
    1940:	3c 01       	movw	r6, r24
    1942:	a5 01       	movw	r20, r10
    1944:	94 01       	movw	r18, r8
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	c3 01       	movw	r24, r6
    1954:	b2 01       	movw	r22, r4
    1956:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    195a:	6b 01       	movw	r12, r22
    195c:	7c 01       	movw	r14, r24
    195e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1960:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1962:	48 a1       	ldd	r20, Y+32	; 0x20
    1964:	59 a1       	ldd	r21, Y+33	; 0x21
    1966:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1968:	7b 8d       	ldd	r23, Y+27	; 0x1b
    196a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    196c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    196e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	c7 01       	movw	r24, r14
    1978:	b6 01       	movw	r22, r12
    197a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    197e:	6b 01       	movw	r12, r22
    1980:	7c 01       	movw	r14, r24
    1982:	2a a1       	ldd	r18, Y+34	; 0x22
    1984:	3b a1       	ldd	r19, Y+35	; 0x23
    1986:	4c a1       	ldd	r20, Y+36	; 0x24
    1988:	5d a1       	ldd	r21, Y+37	; 0x25
    198a:	6e 89       	ldd	r22, Y+22	; 0x16
    198c:	7f 89       	ldd	r23, Y+23	; 0x17
    198e:	88 8d       	ldd	r24, Y+24	; 0x18
    1990:	99 8d       	ldd	r25, Y+25	; 0x19
    1992:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	c7 01       	movw	r24, r14
    199c:	b6 01       	movw	r22, r12
    199e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    19a2:	6b 01       	movw	r12, r22
    19a4:	7c 01       	movw	r14, r24
    19a6:	2a a5       	ldd	r18, Y+42	; 0x2a
    19a8:	3b a5       	ldd	r19, Y+43	; 0x2b
    19aa:	4c a5       	ldd	r20, Y+44	; 0x2c
    19ac:	5d a5       	ldd	r21, Y+45	; 0x2d
    19ae:	6e a1       	ldd	r22, Y+38	; 0x26
    19b0:	7f a1       	ldd	r23, Y+39	; 0x27
    19b2:	88 a5       	ldd	r24, Y+40	; 0x28
    19b4:	99 a5       	ldd	r25, Y+41	; 0x29
    19b6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    19ba:	4b 01       	movw	r8, r22
    19bc:	5c 01       	movw	r10, r24
    19be:	2e a5       	ldd	r18, Y+46	; 0x2e
    19c0:	3f a5       	ldd	r19, Y+47	; 0x2f
    19c2:	48 a9       	ldd	r20, Y+48	; 0x30
    19c4:	59 a9       	ldd	r21, Y+49	; 0x31
    19c6:	6e a9       	ldd	r22, Y+54	; 0x36
    19c8:	7f a9       	ldd	r23, Y+55	; 0x37
    19ca:	88 ad       	ldd	r24, Y+56	; 0x38
    19cc:	99 ad       	ldd	r25, Y+57	; 0x39
    19ce:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	c5 01       	movw	r24, r10
    19d8:	b4 01       	movw	r22, r8
    19da:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    19de:	9b 01       	movw	r18, r22
    19e0:	ac 01       	movw	r20, r24
    19e2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    19e6:	a7 01       	movw	r20, r14
    19e8:	96 01       	movw	r18, r12
    19ea:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <atan2>
    19ee:	6a 8f       	std	Y+26, r22	; 0x1a
    19f0:	7b 8f       	std	Y+27, r23	; 0x1b
    19f2:	8c 8f       	std	Y+28, r24	; 0x1c
    19f4:	9d 8f       	std	Y+29, r25	; 0x1d
	imudata.pitch = -asin(2.0 * (q1 * q3 - q0 * q2)); //gets pitch angle in radians MAY NOT CARE ABOUT
    19f6:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q1>
    19fa:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q1+0x1>
    19fe:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q1+0x2>
    1a02:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q1+0x3>
    1a06:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    1a0a:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    1a0e:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    1a12:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    1a16:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
    1a1a:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
    1a1e:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
    1a22:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
    1a26:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q2>
    1a2a:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q2+0x1>
    1a2e:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q2+0x2>
    1a32:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q2+0x3>
    1a36:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
    1a3e:	a3 01       	movw	r20, r6
    1a40:	92 01       	movw	r18, r4
    1a42:	c5 01       	movw	r24, r10
    1a44:	b4 01       	movw	r22, r8
    1a46:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1a5e:	0e 94 88 27 	call	0x4f10	; 0x4f10 <asin>
    1a62:	6e 8f       	std	Y+30, r22	; 0x1e
    1a64:	7f 8f       	std	Y+31, r23	; 0x1f
    1a66:	88 a3       	std	Y+32, r24	; 0x20
    1a68:	99 a3       	std	Y+33, r25	; 0x21
	imudata.roll  = atan2(2.0 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3); //gets roll angle in radians
    1a6a:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1a6e:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1a72:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1a76:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1a7a:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1a7e:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1a82:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1a86:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1a8a:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    1a8e:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    1a92:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    1a96:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
    1a9a:	40 90 63 21 	lds	r4, 0x2163	; 0x802163 <q1>
    1a9e:	50 90 64 21 	lds	r5, 0x2164	; 0x802164 <q1+0x1>
    1aa2:	60 90 65 21 	lds	r6, 0x2165	; 0x802165 <q1+0x2>
    1aa6:	70 90 66 21 	lds	r7, 0x2166	; 0x802166 <q1+0x3>
    1aaa:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    1aae:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    1ab2:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    1ab6:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    1aba:	ee 8a       	std	Y+22, r14	; 0x16
    1abc:	ff 8a       	std	Y+23, r15	; 0x17
    1abe:	08 8f       	std	Y+24, r16	; 0x18
    1ac0:	19 8f       	std	Y+25, r17	; 0x19
    1ac2:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    1ac6:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    1aca:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    1ace:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    1ad2:	ea a2       	std	Y+34, r14	; 0x22
    1ad4:	fb a2       	std	Y+35, r15	; 0x23
    1ad6:	0c a3       	std	Y+36, r16	; 0x24
    1ad8:	1d a3       	std	Y+37, r17	; 0x25
    1ada:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    1ade:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    1ae2:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    1ae6:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    1aea:	ee a2       	std	Y+38, r14	; 0x26
    1aec:	ff a2       	std	Y+39, r15	; 0x27
    1aee:	08 a7       	std	Y+40, r16	; 0x28
    1af0:	19 a7       	std	Y+41, r17	; 0x29
    1af2:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    1af6:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    1afa:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    1afe:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    1b02:	ea a6       	std	Y+42, r14	; 0x2a
    1b04:	fb a6       	std	Y+43, r15	; 0x2b
    1b06:	0c a7       	std	Y+44, r16	; 0x2c
    1b08:	1d a7       	std	Y+45, r17	; 0x2d
    1b0a:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    1b0e:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    1b12:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    1b16:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    1b1a:	ee a6       	std	Y+46, r14	; 0x2e
    1b1c:	ff a6       	std	Y+47, r15	; 0x2f
    1b1e:	08 ab       	std	Y+48, r16	; 0x30
    1b20:	19 ab       	std	Y+49, r17	; 0x31
    1b22:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q1>
    1b26:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q1+0x1>
    1b2a:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q1+0x2>
    1b2e:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q1+0x3>
    1b32:	ea aa       	std	Y+50, r14	; 0x32
    1b34:	fb aa       	std	Y+51, r15	; 0x33
    1b36:	0c ab       	std	Y+52, r16	; 0x34
    1b38:	1d ab       	std	Y+53, r17	; 0x35
    1b3a:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    1b3e:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    1b42:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    1b46:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    1b4a:	22 96       	adiw	r28, 0x02	; 2
    1b4c:	ec ae       	std	Y+60, r14	; 0x3c
    1b4e:	fd ae       	std	Y+61, r15	; 0x3d
    1b50:	0e af       	std	Y+62, r16	; 0x3e
    1b52:	1f af       	std	Y+63, r17	; 0x3f
    1b54:	22 97       	sbiw	r28, 0x02	; 2
    1b56:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    1b5a:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    1b5e:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    1b62:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    1b66:	ee aa       	std	Y+54, r14	; 0x36
    1b68:	ff aa       	std	Y+55, r15	; 0x37
    1b6a:	08 af       	std	Y+56, r16	; 0x38
    1b6c:	19 af       	std	Y+57, r17	; 0x39
    1b6e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1b72:	6b 01       	movw	r12, r22
    1b74:	7c 01       	movw	r14, r24
    1b76:	a3 01       	movw	r20, r6
    1b78:	92 01       	movw	r18, r4
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	b4 01       	movw	r22, r8
    1b7e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1b82:	9b 01       	movw	r18, r22
    1b84:	ac 01       	movw	r20, r24
    1b86:	c7 01       	movw	r24, r14
    1b88:	b6 01       	movw	r22, r12
    1b8a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1b8e:	4b 01       	movw	r8, r22
    1b90:	5c 01       	movw	r10, r24
    1b92:	2a a1       	ldd	r18, Y+34	; 0x22
    1b94:	3b a1       	ldd	r19, Y+35	; 0x23
    1b96:	4c a1       	ldd	r20, Y+36	; 0x24
    1b98:	5d a1       	ldd	r21, Y+37	; 0x25
    1b9a:	6e 89       	ldd	r22, Y+22	; 0x16
    1b9c:	7f 89       	ldd	r23, Y+23	; 0x17
    1b9e:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ba2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	c5 01       	movw	r24, r10
    1bac:	b4 01       	movw	r22, r8
    1bae:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1bb2:	4b 01       	movw	r8, r22
    1bb4:	5c 01       	movw	r10, r24
    1bb6:	2a a5       	ldd	r18, Y+42	; 0x2a
    1bb8:	3b a5       	ldd	r19, Y+43	; 0x2b
    1bba:	4c a5       	ldd	r20, Y+44	; 0x2c
    1bbc:	5d a5       	ldd	r21, Y+45	; 0x2d
    1bbe:	6e a1       	ldd	r22, Y+38	; 0x26
    1bc0:	7f a1       	ldd	r23, Y+39	; 0x27
    1bc2:	88 a5       	ldd	r24, Y+40	; 0x28
    1bc4:	99 a5       	ldd	r25, Y+41	; 0x29
    1bc6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	c5 01       	movw	r24, r10
    1bd0:	b4 01       	movw	r22, r8
    1bd2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1bd6:	2b 01       	movw	r4, r22
    1bd8:	3c 01       	movw	r6, r24
    1bda:	2a a9       	ldd	r18, Y+50	; 0x32
    1bdc:	3b a9       	ldd	r19, Y+51	; 0x33
    1bde:	4c a9       	ldd	r20, Y+52	; 0x34
    1be0:	5d a9       	ldd	r21, Y+53	; 0x35
    1be2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1be4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1be6:	88 a9       	ldd	r24, Y+48	; 0x30
    1be8:	99 a9       	ldd	r25, Y+49	; 0x31
    1bea:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1bee:	4b 01       	movw	r8, r22
    1bf0:	5c 01       	movw	r10, r24
    1bf2:	2e a9       	ldd	r18, Y+54	; 0x36
    1bf4:	3f a9       	ldd	r19, Y+55	; 0x37
    1bf6:	48 ad       	ldd	r20, Y+56	; 0x38
    1bf8:	59 ad       	ldd	r21, Y+57	; 0x39
    1bfa:	22 96       	adiw	r28, 0x02	; 2
    1bfc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bfe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c04:	22 97       	sbiw	r28, 0x02	; 2
    1c06:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	c5 01       	movw	r24, r10
    1c10:	b4 01       	movw	r22, r8
    1c12:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1c16:	9b 01       	movw	r18, r22
    1c18:	ac 01       	movw	r20, r24
    1c1a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1c1e:	a3 01       	movw	r20, r6
    1c20:	92 01       	movw	r18, r4
    1c22:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <atan2>
    1c26:	6b 01       	movw	r12, r22
    1c28:	7c 01       	movw	r14, r24
	imudata.pitch *= 180.0 / PI; //converts pitch angle to degrees
	imudata.yaw   *= 180.0 / PI; //converts yaw angle to degrees	
	imudata.roll  *= 180.0 / PI;  //converts roll to degrees
	imudata.data = data;
    1c2a:	85 e1       	ldi	r24, 0x15	; 21
    1c2c:	e5 e8       	ldi	r30, 0x85	; 133
    1c2e:	f2 e2       	ldi	r31, 0x22	; 34
    1c30:	d1 01       	movw	r26, r2
    1c32:	1c 96       	adiw	r26, 0x0c	; 12
    1c34:	01 90       	ld	r0, Z+
    1c36:	0d 92       	st	X+, r0
    1c38:	8a 95       	dec	r24
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <imu_update+0x744>
	
	return imudata;
    1c3c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c3e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c40:	88 a1       	ldd	r24, Y+32	; 0x20
    1c42:	99 a1       	ldd	r25, Y+33	; 0x21
    1c44:	90 58       	subi	r25, 0x80	; 128
    1c46:	2d ee       	ldi	r18, 0xED	; 237
    1c48:	3e e2       	ldi	r19, 0x2E	; 46
    1c4a:	45 e6       	ldi	r20, 0x65	; 101
    1c4c:	52 e4       	ldi	r21, 0x42	; 66
    1c4e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1c52:	f1 01       	movw	r30, r2
    1c54:	60 83       	st	Z, r22
    1c56:	71 83       	std	Z+1, r23	; 0x01
    1c58:	82 83       	std	Z+2, r24	; 0x02
    1c5a:	93 83       	std	Z+3, r25	; 0x03
    1c5c:	2d ee       	ldi	r18, 0xED	; 237
    1c5e:	3e e2       	ldi	r19, 0x2E	; 46
    1c60:	45 e6       	ldi	r20, 0x65	; 101
    1c62:	52 e4       	ldi	r21, 0x42	; 66
    1c64:	c7 01       	movw	r24, r14
    1c66:	b6 01       	movw	r22, r12
    1c68:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1c6c:	f1 01       	movw	r30, r2
    1c6e:	64 83       	std	Z+4, r22	; 0x04
    1c70:	75 83       	std	Z+5, r23	; 0x05
    1c72:	86 83       	std	Z+6, r24	; 0x06
    1c74:	97 83       	std	Z+7, r25	; 0x07
    1c76:	2d ee       	ldi	r18, 0xED	; 237
    1c78:	3e e2       	ldi	r19, 0x2E	; 46
    1c7a:	45 e6       	ldi	r20, 0x65	; 101
    1c7c:	52 e4       	ldi	r21, 0x42	; 66
    1c7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c86:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1c8a:	f1 01       	movw	r30, r2
    1c8c:	60 87       	std	Z+8, r22	; 0x08
    1c8e:	71 87       	std	Z+9, r23	; 0x09
    1c90:	82 87       	std	Z+10, r24	; 0x0a
    1c92:	93 87       	std	Z+11, r25	; 0x0b
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	de bf       	out	0x3e, r29	; 62
}
    1c98:	c1 01       	movw	r24, r2
    1c9a:	cf 5b       	subi	r28, 0xBF	; 191
    1c9c:	df 4f       	sbci	r29, 0xFF	; 255
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	bf 90       	pop	r11
    1cb4:	af 90       	pop	r10
    1cb6:	9f 90       	pop	r9
    1cb8:	8f 90       	pop	r8
    1cba:	7f 90       	pop	r7
    1cbc:	6f 90       	pop	r6
    1cbe:	5f 90       	pop	r5
    1cc0:	4f 90       	pop	r4
    1cc2:	3f 90       	pop	r3
    1cc4:	2f 90       	pop	r2
    1cc6:	08 95       	ret

00001cc8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

double invSqrt(double x) {
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
	double halfx = 0.5 * x;
	double y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(double*)&i;
    1cd4:	8b 01       	movw	r16, r22
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	35 95       	asr	r19
    1cda:	27 95       	ror	r18
    1cdc:	17 95       	ror	r17
    1cde:	07 95       	ror	r16
    1ce0:	0f 2e       	mov	r0, r31
    1ce2:	ff ed       	ldi	r31, 0xDF	; 223
    1ce4:	cf 2e       	mov	r12, r31
    1ce6:	f9 e5       	ldi	r31, 0x59	; 89
    1ce8:	df 2e       	mov	r13, r31
    1cea:	f7 e3       	ldi	r31, 0x37	; 55
    1cec:	ef 2e       	mov	r14, r31
    1cee:	ff e5       	ldi	r31, 0x5F	; 95
    1cf0:	ff 2e       	mov	r15, r31
    1cf2:	f0 2d       	mov	r31, r0
    1cf4:	c0 1a       	sub	r12, r16
    1cf6:	d1 0a       	sbc	r13, r17
    1cf8:	e2 0a       	sbc	r14, r18
    1cfa:	f3 0a       	sbc	r15, r19
	y = y * (1.5 - (halfx * y * y));
	return y;
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1d08:	a7 01       	movw	r20, r14
    1d0a:	96 01       	movw	r18, r12
    1d0c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1d10:	a7 01       	movw	r20, r14
    1d12:	96 01       	movw	r18, r12
    1d14:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	80 ec       	ldi	r24, 0xC0	; 192
    1d22:	9f e3       	ldi	r25, 0x3F	; 63
    1d24:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1d28:	a7 01       	movw	r20, r14
    1d2a:	96 01       	movw	r18, r12
    1d2c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
}
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	08 95       	ret

00001d3e <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
    1d3e:	4f 92       	push	r4
    1d40:	5f 92       	push	r5
    1d42:	6f 92       	push	r6
    1d44:	7f 92       	push	r7
    1d46:	8f 92       	push	r8
    1d48:	9f 92       	push	r9
    1d4a:	af 92       	push	r10
    1d4c:	bf 92       	push	r11
    1d4e:	cf 92       	push	r12
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	a4 97       	sbiw	r28, 0x24	; 36
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	69 87       	std	Y+9, r22	; 0x09
    1d6a:	7a 87       	std	Y+10, r23	; 0x0a
    1d6c:	8b 87       	std	Y+11, r24	; 0x0b
    1d6e:	9c 87       	std	Y+12, r25	; 0x0c
    1d70:	2d 87       	std	Y+13, r18	; 0x0d
    1d72:	3e 87       	std	Y+14, r19	; 0x0e
    1d74:	4f 87       	std	Y+15, r20	; 0x0f
    1d76:	58 8b       	std	Y+16, r21	; 0x10
    1d78:	e9 8a       	std	Y+17, r14	; 0x11
    1d7a:	fa 8a       	std	Y+18, r15	; 0x12
    1d7c:	0b 8b       	std	Y+19, r16	; 0x13
    1d7e:	1c 8b       	std	Y+20, r17	; 0x14
	double halfvx, halfvy, halfvz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	c6 01       	movw	r24, r12
    1d88:	b5 01       	movw	r22, r10
    1d8a:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    1d8e:	81 11       	cpse	r24, r1
    1d90:	17 c0       	rjmp	.+46     	; 0x1dc0 <MahonyAHRSupdateIMU+0x82>
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	6f a9       	ldd	r22, Y+55	; 0x37
    1d9a:	78 ad       	ldd	r23, Y+56	; 0x38
    1d9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1da0:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    1da4:	81 11       	cpse	r24, r1
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <MahonyAHRSupdateIMU+0x82>
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	a9 01       	movw	r20, r18
    1dae:	6b ad       	ldd	r22, Y+59	; 0x3b
    1db0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1db2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1db6:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <MahonyAHRSupdateIMU+0x82>
    1dbe:	60 c2       	rjmp	.+1216   	; 0x2280 <MahonyAHRSupdateIMU+0x542>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    1dc0:	a6 01       	movw	r20, r12
    1dc2:	95 01       	movw	r18, r10
    1dc4:	c6 01       	movw	r24, r12
    1dc6:	b5 01       	movw	r22, r10
    1dc8:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1dcc:	2b 01       	movw	r4, r22
    1dce:	3c 01       	movw	r6, r24
    1dd0:	2f a9       	ldd	r18, Y+55	; 0x37
    1dd2:	38 ad       	ldd	r19, Y+56	; 0x38
    1dd4:	49 ad       	ldd	r20, Y+57	; 0x39
    1dd6:	5a ad       	ldd	r21, Y+58	; 0x3a
    1dd8:	ca 01       	movw	r24, r20
    1dda:	b9 01       	movw	r22, r18
    1ddc:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	c3 01       	movw	r24, r6
    1de6:	b2 01       	movw	r22, r4
    1de8:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1dec:	2b 01       	movw	r4, r22
    1dee:	3c 01       	movw	r6, r24
    1df0:	2b ad       	ldd	r18, Y+59	; 0x3b
    1df2:	3c ad       	ldd	r19, Y+60	; 0x3c
    1df4:	4d ad       	ldd	r20, Y+61	; 0x3d
    1df6:	5e ad       	ldd	r21, Y+62	; 0x3e
    1df8:	ca 01       	movw	r24, r20
    1dfa:	b9 01       	movw	r22, r18
    1dfc:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	c3 01       	movw	r24, r6
    1e06:	b2 01       	movw	r22, r4
    1e08:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1e0c:	5d df       	rcall	.-326    	; 0x1cc8 <invSqrt>
    1e0e:	2b 01       	movw	r4, r22
    1e10:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1e12:	9b 01       	movw	r18, r22
    1e14:	ac 01       	movw	r20, r24
    1e16:	c6 01       	movw	r24, r12
    1e18:	b5 01       	movw	r22, r10
    1e1a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1e1e:	69 83       	std	Y+1, r22	; 0x01
    1e20:	7a 83       	std	Y+2, r23	; 0x02
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	9c 83       	std	Y+4, r25	; 0x04
		ay *= recipNorm;
    1e26:	a3 01       	movw	r20, r6
    1e28:	92 01       	movw	r18, r4
    1e2a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e2c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e32:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1e36:	6d 83       	std	Y+5, r22	; 0x05
    1e38:	7e 83       	std	Y+6, r23	; 0x06
    1e3a:	8f 83       	std	Y+7, r24	; 0x07
    1e3c:	98 87       	std	Y+8, r25	; 0x08
		az *= recipNorm;        
    1e3e:	a3 01       	movw	r20, r6
    1e40:	92 01       	movw	r18, r4
    1e42:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e44:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e4a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1e4e:	6d 8b       	std	Y+21, r22	; 0x15
    1e50:	7e 8b       	std	Y+22, r23	; 0x16
    1e52:	8f 8b       	std	Y+23, r24	; 0x17
    1e54:	98 8f       	std	Y+24, r25	; 0x18

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    1e56:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q1>
    1e5a:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q1+0x1>
    1e5e:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q1+0x2>
    1e62:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q1+0x3>
    1e66:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    1e6a:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    1e6e:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    1e72:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    1e76:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
    1e7a:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
    1e7e:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
    1e82:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
    1e86:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q2>
    1e8a:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q2+0x1>
    1e8e:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q2+0x2>
    1e92:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q2+0x3>
    1e96:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	7c 01       	movw	r14, r24
    1e9e:	a3 01       	movw	r20, r6
    1ea0:	92 01       	movw	r18, r4
    1ea2:	c5 01       	movw	r24, r10
    1ea4:	b4 01       	movw	r22, r8
    1ea6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	c7 01       	movw	r24, r14
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1eb6:	69 8f       	std	Y+25, r22	; 0x19
    1eb8:	7a 8f       	std	Y+26, r23	; 0x1a
    1eba:	8b 8f       	std	Y+27, r24	; 0x1b
    1ebc:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    1ebe:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1ec2:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1ec6:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1eca:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1ece:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q1>
    1ed2:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q1+0x1>
    1ed6:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q1+0x2>
    1eda:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q1+0x3>
    1ede:	80 90 5f 21 	lds	r8, 0x215F	; 0x80215f <q2>
    1ee2:	90 90 60 21 	lds	r9, 0x2160	; 0x802160 <q2+0x1>
    1ee6:	a0 90 61 21 	lds	r10, 0x2161	; 0x802161 <q2+0x2>
    1eea:	b0 90 62 21 	lds	r11, 0x2162	; 0x802162 <q2+0x3>
    1eee:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    1ef2:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    1ef6:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    1efa:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    1efe:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1f02:	6b 01       	movw	r12, r22
    1f04:	7c 01       	movw	r14, r24
    1f06:	a3 01       	movw	r20, r6
    1f08:	92 01       	movw	r18, r4
    1f0a:	c5 01       	movw	r24, r10
    1f0c:	b4 01       	movw	r22, r8
    1f0e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	c7 01       	movw	r24, r14
    1f18:	b6 01       	movw	r22, r12
    1f1a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1f1e:	6d 8f       	std	Y+29, r22	; 0x1d
    1f20:	7e 8f       	std	Y+30, r23	; 0x1e
    1f22:	8f 8f       	std	Y+31, r24	; 0x1f
    1f24:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5 + q3 * q3;
    1f26:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1f2a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1f2e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1f32:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1f36:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1f3a:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1f3e:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1f42:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1f46:	80 90 5b 21 	lds	r8, 0x215B	; 0x80215b <q3>
    1f4a:	90 90 5c 21 	lds	r9, 0x215C	; 0x80215c <q3+0x1>
    1f4e:	a0 90 5d 21 	lds	r10, 0x215D	; 0x80215d <q3+0x2>
    1f52:	b0 90 5e 21 	lds	r11, 0x215E	; 0x80215e <q3+0x3>
    1f56:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    1f5a:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    1f5e:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    1f62:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    1f66:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1f76:	6b 01       	movw	r12, r22
    1f78:	7c 01       	movw	r14, r24
    1f7a:	a3 01       	movw	r20, r6
    1f7c:	92 01       	movw	r18, r4
    1f7e:	c5 01       	movw	r24, r10
    1f80:	b4 01       	movw	r22, r8
    1f82:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1f86:	9b 01       	movw	r18, r22
    1f88:	ac 01       	movw	r20, r24
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    1f92:	6b 01       	movw	r12, r22
    1f94:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    1f96:	9b 01       	movw	r18, r22
    1f98:	ac 01       	movw	r20, r24
    1f9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa0:	98 85       	ldd	r25, Y+8	; 0x08
    1fa2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1fa6:	4b 01       	movw	r8, r22
    1fa8:	5c 01       	movw	r10, r24
    1faa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1fac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1fae:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1fb0:	58 a1       	ldd	r21, Y+32	; 0x20
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	b4 01       	movw	r22, r8
    1fc6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    1fca:	69 a3       	std	Y+33, r22	; 0x21
    1fcc:	7a a3       	std	Y+34, r23	; 0x22
    1fce:	8b a3       	std	Y+35, r24	; 0x23
    1fd0:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    1fd2:	29 8d       	ldd	r18, Y+25	; 0x19
    1fd4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1fd6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fd8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1fda:	6d 89       	ldd	r22, Y+21	; 0x15
    1fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fde:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1fe6:	4b 01       	movw	r8, r22
    1fe8:	5c 01       	movw	r10, r24
    1fea:	a7 01       	movw	r20, r14
    1fec:	96 01       	movw	r18, r12
    1fee:	69 81       	ldd	r22, Y+1	; 0x01
    1ff0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    1ffa:	9b 01       	movw	r18, r22
    1ffc:	ac 01       	movw	r20, r24
    1ffe:	c5 01       	movw	r24, r10
    2000:	b4 01       	movw	r22, r8
    2002:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2006:	4b 01       	movw	r8, r22
    2008:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx);
    200a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    200c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    200e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2010:	58 a1       	ldd	r21, Y+32	; 0x20
    2012:	69 81       	ldd	r22, Y+1	; 0x01
    2014:	7a 81       	ldd	r23, Y+2	; 0x02
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    201e:	6b 01       	movw	r12, r22
    2020:	7c 01       	movw	r14, r24
    2022:	29 8d       	ldd	r18, Y+25	; 0x19
    2024:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2026:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2028:	5c 8d       	ldd	r21, Y+28	; 0x1c
    202a:	6d 81       	ldd	r22, Y+5	; 0x05
    202c:	7e 81       	ldd	r23, Y+6	; 0x06
    202e:	8f 81       	ldd	r24, Y+7	; 0x07
    2030:	98 85       	ldd	r25, Y+8	; 0x08
    2032:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2036:	9b 01       	movw	r18, r22
    2038:	ac 01       	movw	r20, r24
    203a:	c7 01       	movw	r24, r14
    203c:	b6 01       	movw	r22, r12
    203e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2042:	6b 01       	movw	r12, r22
    2044:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    2046:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <twoKi>
    204a:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <twoKi+0x1>
    204e:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <twoKi+0x2>
    2052:	90 91 6a 21 	lds	r25, 0x216A	; 0x80216a <twoKi+0x3>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	a9 01       	movw	r20, r18
    205c:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    2060:	18 16       	cp	r1, r24
    2062:	0c f0       	brlt	.+2      	; 0x2066 <MahonyAHRSupdateIMU+0x328>
    2064:	ab c0       	rjmp	.+342    	; 0x21bc <MahonyAHRSupdateIMU+0x47e>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    2066:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    206a:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    206e:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    2072:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    2076:	40 90 57 21 	lds	r4, 0x2157	; 0x802157 <integralFBx>
    207a:	50 90 58 21 	lds	r5, 0x2158	; 0x802158 <integralFBx+0x1>
    207e:	60 90 59 21 	lds	r6, 0x2159	; 0x802159 <integralFBx+0x2>
    2082:	70 90 5a 21 	lds	r7, 0x215A	; 0x80215a <integralFBx+0x3>
    2086:	69 a1       	ldd	r22, Y+33	; 0x21
    2088:	7a a1       	ldd	r23, Y+34	; 0x22
    208a:	8b a1       	ldd	r24, Y+35	; 0x23
    208c:	9c a1       	ldd	r25, Y+36	; 0x24
    208e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2092:	2a ef       	ldi	r18, 0xFA	; 250
    2094:	39 ec       	ldi	r19, 0xC9	; 201
    2096:	44 e3       	ldi	r20, 0x34	; 52
    2098:	59 e3       	ldi	r21, 0x39	; 57
    209a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    209e:	a3 01       	movw	r20, r6
    20a0:	92 01       	movw	r18, r4
    20a2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    20a6:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <integralFBx>
    20aa:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <integralFBx+0x1>
    20ae:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <integralFBx+0x2>
    20b2:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    20b6:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    20ba:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    20be:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    20c2:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    20c6:	40 90 53 21 	lds	r4, 0x2153	; 0x802153 <integralFBy>
    20ca:	50 90 54 21 	lds	r5, 0x2154	; 0x802154 <integralFBy+0x1>
    20ce:	60 90 55 21 	lds	r6, 0x2155	; 0x802155 <integralFBy+0x2>
    20d2:	70 90 56 21 	lds	r7, 0x2156	; 0x802156 <integralFBy+0x3>
    20d6:	c5 01       	movw	r24, r10
    20d8:	b4 01       	movw	r22, r8
    20da:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    20de:	2a ef       	ldi	r18, 0xFA	; 250
    20e0:	39 ec       	ldi	r19, 0xC9	; 201
    20e2:	44 e3       	ldi	r20, 0x34	; 52
    20e4:	59 e3       	ldi	r21, 0x39	; 57
    20e6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    20ea:	a3 01       	movw	r20, r6
    20ec:	92 01       	movw	r18, r4
    20ee:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    20f2:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <integralFBy>
    20f6:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <integralFBy+0x1>
    20fa:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <integralFBy+0x2>
    20fe:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    2102:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    2106:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    210a:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    210e:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    2112:	40 90 4f 21 	lds	r4, 0x214F	; 0x80214f <integralFBz>
    2116:	50 90 50 21 	lds	r5, 0x2150	; 0x802150 <integralFBz+0x1>
    211a:	60 90 51 21 	lds	r6, 0x2151	; 0x802151 <integralFBz+0x2>
    211e:	70 90 52 21 	lds	r7, 0x2152	; 0x802152 <integralFBz+0x3>
    2122:	c7 01       	movw	r24, r14
    2124:	b6 01       	movw	r22, r12
    2126:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    212a:	2a ef       	ldi	r18, 0xFA	; 250
    212c:	39 ec       	ldi	r19, 0xC9	; 201
    212e:	44 e3       	ldi	r20, 0x34	; 52
    2130:	59 e3       	ldi	r21, 0x39	; 57
    2132:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2136:	a3 01       	movw	r20, r6
    2138:	92 01       	movw	r18, r4
    213a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    213e:	60 93 4f 21 	sts	0x214F, r22	; 0x80214f <integralFBz>
    2142:	70 93 50 21 	sts	0x2150, r23	; 0x802150 <integralFBz+0x1>
    2146:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <integralFBz+0x2>
    214a:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    214e:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <integralFBx>
    2152:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <integralFBx+0x1>
    2156:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <integralFBx+0x2>
    215a:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <integralFBx+0x3>
    215e:	69 85       	ldd	r22, Y+9	; 0x09
    2160:	7a 85       	ldd	r23, Y+10	; 0x0a
    2162:	8b 85       	ldd	r24, Y+11	; 0x0b
    2164:	9c 85       	ldd	r25, Y+12	; 0x0c
    2166:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    216a:	69 87       	std	Y+9, r22	; 0x09
    216c:	7a 87       	std	Y+10, r23	; 0x0a
    216e:	8b 87       	std	Y+11, r24	; 0x0b
    2170:	9c 87       	std	Y+12, r25	; 0x0c
			gy += integralFBy;
    2172:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <integralFBy>
    2176:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <integralFBy+0x1>
    217a:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <integralFBy+0x2>
    217e:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <integralFBy+0x3>
    2182:	6d 85       	ldd	r22, Y+13	; 0x0d
    2184:	7e 85       	ldd	r23, Y+14	; 0x0e
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	98 89       	ldd	r25, Y+16	; 0x10
    218a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    218e:	6d 87       	std	Y+13, r22	; 0x0d
    2190:	7e 87       	std	Y+14, r23	; 0x0e
    2192:	8f 87       	std	Y+15, r24	; 0x0f
    2194:	98 8b       	std	Y+16, r25	; 0x10
			gz += integralFBz;
    2196:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <integralFBz>
    219a:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <integralFBz+0x1>
    219e:	40 91 51 21 	lds	r20, 0x2151	; 0x802151 <integralFBz+0x2>
    21a2:	50 91 52 21 	lds	r21, 0x2152	; 0x802152 <integralFBz+0x3>
    21a6:	69 89       	ldd	r22, Y+17	; 0x11
    21a8:	7a 89       	ldd	r23, Y+18	; 0x12
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    21b2:	69 8b       	std	Y+17, r22	; 0x11
    21b4:	7a 8b       	std	Y+18, r23	; 0x12
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	9c 8b       	std	Y+20, r25	; 0x14
    21ba:	18 c0       	rjmp	.+48     	; 0x21ec <MahonyAHRSupdateIMU+0x4ae>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    21bc:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <integralFBx>
    21c0:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <integralFBx+0x1>
    21c4:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <integralFBx+0x2>
    21c8:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <integralFBx+0x3>
			integralFBy = 0.0;
    21cc:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <integralFBy>
    21d0:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <integralFBy+0x1>
    21d4:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <integralFBy+0x2>
    21d8:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <integralFBy+0x3>
			integralFBz = 0.0;
    21dc:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <integralFBz>
    21e0:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <integralFBz+0x1>
    21e4:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <integralFBz+0x2>
    21e8:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    21ec:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    21f0:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    21f4:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    21f8:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    21fc:	69 a1       	ldd	r22, Y+33	; 0x21
    21fe:	7a a1       	ldd	r23, Y+34	; 0x22
    2200:	8b a1       	ldd	r24, Y+35	; 0x23
    2202:	9c a1       	ldd	r25, Y+36	; 0x24
    2204:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2208:	9b 01       	movw	r18, r22
    220a:	ac 01       	movw	r20, r24
    220c:	69 85       	ldd	r22, Y+9	; 0x09
    220e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2210:	8b 85       	ldd	r24, Y+11	; 0x0b
    2212:	9c 85       	ldd	r25, Y+12	; 0x0c
    2214:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2218:	69 87       	std	Y+9, r22	; 0x09
    221a:	7a 87       	std	Y+10, r23	; 0x0a
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	9c 87       	std	Y+12, r25	; 0x0c
		gy += twoKp * halfey;
    2220:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    2224:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    2228:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    222c:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    2230:	c5 01       	movw	r24, r10
    2232:	b4 01       	movw	r22, r8
    2234:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2238:	9b 01       	movw	r18, r22
    223a:	ac 01       	movw	r20, r24
    223c:	6d 85       	ldd	r22, Y+13	; 0x0d
    223e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	98 89       	ldd	r25, Y+16	; 0x10
    2244:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2248:	6d 87       	std	Y+13, r22	; 0x0d
    224a:	7e 87       	std	Y+14, r23	; 0x0e
    224c:	8f 87       	std	Y+15, r24	; 0x0f
    224e:	98 8b       	std	Y+16, r25	; 0x10
		gz += twoKp * halfez;
    2250:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    2254:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    2258:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    225c:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    2260:	c7 01       	movw	r24, r14
    2262:	b6 01       	movw	r22, r12
    2264:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	69 89       	ldd	r22, Y+17	; 0x11
    226e:	7a 89       	ldd	r23, Y+18	; 0x12
    2270:	8b 89       	ldd	r24, Y+19	; 0x13
    2272:	9c 89       	ldd	r25, Y+20	; 0x14
    2274:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2278:	69 8b       	std	Y+17, r22	; 0x11
    227a:	7a 8b       	std	Y+18, r23	; 0x12
    227c:	8b 8b       	std	Y+19, r24	; 0x13
    227e:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    2280:	2a ef       	ldi	r18, 0xFA	; 250
    2282:	39 ec       	ldi	r19, 0xC9	; 201
    2284:	44 eb       	ldi	r20, 0xB4	; 180
    2286:	58 e3       	ldi	r21, 0x38	; 56
    2288:	69 85       	ldd	r22, Y+9	; 0x09
    228a:	7a 85       	ldd	r23, Y+10	; 0x0a
    228c:	8b 85       	ldd	r24, Y+11	; 0x0b
    228e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2290:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2294:	69 87       	std	Y+9, r22	; 0x09
    2296:	7a 87       	std	Y+10, r23	; 0x0a
    2298:	8b 87       	std	Y+11, r24	; 0x0b
    229a:	9c 87       	std	Y+12, r25	; 0x0c
	gy *= (0.5 * (1.0 / sampleFreq));
    229c:	2a ef       	ldi	r18, 0xFA	; 250
    229e:	39 ec       	ldi	r19, 0xC9	; 201
    22a0:	44 eb       	ldi	r20, 0xB4	; 180
    22a2:	58 e3       	ldi	r21, 0x38	; 56
    22a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    22a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	98 89       	ldd	r25, Y+16	; 0x10
    22ac:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    22b0:	6d 87       	std	Y+13, r22	; 0x0d
    22b2:	7e 87       	std	Y+14, r23	; 0x0e
    22b4:	8f 87       	std	Y+15, r24	; 0x0f
    22b6:	98 8b       	std	Y+16, r25	; 0x10
	gz *= (0.5 * (1.0 / sampleFreq));
    22b8:	2a ef       	ldi	r18, 0xFA	; 250
    22ba:	39 ec       	ldi	r19, 0xC9	; 201
    22bc:	44 eb       	ldi	r20, 0xB4	; 180
    22be:	58 e3       	ldi	r21, 0x38	; 56
    22c0:	69 89       	ldd	r22, Y+17	; 0x11
    22c2:	7a 89       	ldd	r23, Y+18	; 0x12
    22c4:	8b 89       	ldd	r24, Y+19	; 0x13
    22c6:	9c 89       	ldd	r25, Y+20	; 0x14
    22c8:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    22cc:	69 8b       	std	Y+17, r22	; 0x11
    22ce:	7a 8b       	std	Y+18, r23	; 0x12
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	9c 8b       	std	Y+20, r25	; 0x14
	qa = q0;
    22d4:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    22d8:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    22dc:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    22e0:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    22e4:	ed 82       	std	Y+5, r14	; 0x05
    22e6:	fe 82       	std	Y+6, r15	; 0x06
    22e8:	0f 83       	std	Y+7, r16	; 0x07
    22ea:	18 87       	std	Y+8, r17	; 0x08
	qb = q1;
    22ec:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    22f0:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    22f4:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    22f8:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
	qc = q2;
    22fc:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    2300:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    2304:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    2308:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    230c:	ed 8a       	std	Y+21, r14	; 0x15
    230e:	fe 8a       	std	Y+22, r15	; 0x16
    2310:	0f 8b       	std	Y+23, r16	; 0x17
    2312:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    2314:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    2318:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    231c:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    2320:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    2324:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    2328:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    232c:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    2330:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    2334:	c5 01       	movw	r24, r10
    2336:	b4 01       	movw	r22, r8
    2338:	90 58       	subi	r25, 0x80	; 128
    233a:	29 85       	ldd	r18, Y+9	; 0x09
    233c:	3a 85       	ldd	r19, Y+10	; 0x0a
    233e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2340:	5c 85       	ldd	r21, Y+12	; 0x0c
    2342:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2346:	69 83       	std	Y+1, r22	; 0x01
    2348:	7a 83       	std	Y+2, r23	; 0x02
    234a:	8b 83       	std	Y+3, r24	; 0x03
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	2d 89       	ldd	r18, Y+21	; 0x15
    2350:	3e 89       	ldd	r19, Y+22	; 0x16
    2352:	4f 89       	ldd	r20, Y+23	; 0x17
    2354:	58 8d       	ldd	r21, Y+24	; 0x18
    2356:	6d 85       	ldd	r22, Y+13	; 0x0d
    2358:	7e 85       	ldd	r23, Y+14	; 0x0e
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	98 89       	ldd	r25, Y+16	; 0x10
    235e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	69 81       	ldd	r22, Y+1	; 0x01
    2368:	7a 81       	ldd	r23, Y+2	; 0x02
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2372:	69 83       	std	Y+1, r22	; 0x01
    2374:	7a 83       	std	Y+2, r23	; 0x02
    2376:	8b 83       	std	Y+3, r24	; 0x03
    2378:	9c 83       	std	Y+4, r25	; 0x04
    237a:	a3 01       	movw	r20, r6
    237c:	92 01       	movw	r18, r4
    237e:	69 89       	ldd	r22, Y+17	; 0x11
    2380:	7a 89       	ldd	r23, Y+18	; 0x12
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	69 81       	ldd	r22, Y+1	; 0x01
    2390:	7a 81       	ldd	r23, Y+2	; 0x02
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    239a:	a7 01       	movw	r20, r14
    239c:	96 01       	movw	r18, r12
    239e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    23a2:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    23a6:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    23aa:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    23ae:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    23b2:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    23b6:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    23ba:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    23be:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    23c2:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q1>
    23c6:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q1+0x1>
    23ca:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q1+0x2>
    23ce:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q1+0x3>
    23d2:	2d 81       	ldd	r18, Y+5	; 0x05
    23d4:	3e 81       	ldd	r19, Y+6	; 0x06
    23d6:	4f 81       	ldd	r20, Y+7	; 0x07
    23d8:	58 85       	ldd	r21, Y+8	; 0x08
    23da:	69 85       	ldd	r22, Y+9	; 0x09
    23dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    23de:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    23e6:	69 83       	std	Y+1, r22	; 0x01
    23e8:	7a 83       	std	Y+2, r23	; 0x02
    23ea:	8b 83       	std	Y+3, r24	; 0x03
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	2d 89       	ldd	r18, Y+21	; 0x15
    23f0:	3e 89       	ldd	r19, Y+22	; 0x16
    23f2:	4f 89       	ldd	r20, Y+23	; 0x17
    23f4:	58 8d       	ldd	r21, Y+24	; 0x18
    23f6:	69 89       	ldd	r22, Y+17	; 0x11
    23f8:	7a 89       	ldd	r23, Y+18	; 0x12
    23fa:	8b 89       	ldd	r24, Y+19	; 0x13
    23fc:	9c 89       	ldd	r25, Y+20	; 0x14
    23fe:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	69 81       	ldd	r22, Y+1	; 0x01
    2408:	7a 81       	ldd	r23, Y+2	; 0x02
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2412:	69 83       	std	Y+1, r22	; 0x01
    2414:	7a 83       	std	Y+2, r23	; 0x02
    2416:	8b 83       	std	Y+3, r24	; 0x03
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	a3 01       	movw	r20, r6
    241c:	92 01       	movw	r18, r4
    241e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2420:	7e 85       	ldd	r23, Y+14	; 0x0e
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	98 89       	ldd	r25, Y+16	; 0x10
    2426:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	69 81       	ldd	r22, Y+1	; 0x01
    2430:	7a 81       	ldd	r23, Y+2	; 0x02
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    243a:	a7 01       	movw	r20, r14
    243c:	96 01       	movw	r18, r12
    243e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2442:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q1>
    2446:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q1+0x1>
    244a:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q1+0x2>
    244e:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    2452:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    2456:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    245a:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    245e:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    2462:	c0 90 5f 21 	lds	r12, 0x215F	; 0x80215f <q2>
    2466:	d0 90 60 21 	lds	r13, 0x2160	; 0x802160 <q2+0x1>
    246a:	e0 90 61 21 	lds	r14, 0x2161	; 0x802161 <q2+0x2>
    246e:	f0 90 62 21 	lds	r15, 0x2162	; 0x802162 <q2+0x3>
    2472:	2d 81       	ldd	r18, Y+5	; 0x05
    2474:	3e 81       	ldd	r19, Y+6	; 0x06
    2476:	4f 81       	ldd	r20, Y+7	; 0x07
    2478:	58 85       	ldd	r21, Y+8	; 0x08
    247a:	6d 85       	ldd	r22, Y+13	; 0x0d
    247c:	7e 85       	ldd	r23, Y+14	; 0x0e
    247e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2480:	98 89       	ldd	r25, Y+16	; 0x10
    2482:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2486:	69 83       	std	Y+1, r22	; 0x01
    2488:	7a 83       	std	Y+2, r23	; 0x02
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	a5 01       	movw	r20, r10
    2490:	94 01       	movw	r18, r8
    2492:	69 89       	ldd	r22, Y+17	; 0x11
    2494:	7a 89       	ldd	r23, Y+18	; 0x12
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    249e:	9b 01       	movw	r18, r22
    24a0:	ac 01       	movw	r20, r24
    24a2:	69 81       	ldd	r22, Y+1	; 0x01
    24a4:	7a 81       	ldd	r23, Y+2	; 0x02
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    24ae:	69 83       	std	Y+1, r22	; 0x01
    24b0:	7a 83       	std	Y+2, r23	; 0x02
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	a3 01       	movw	r20, r6
    24b8:	92 01       	movw	r18, r4
    24ba:	69 85       	ldd	r22, Y+9	; 0x09
    24bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    24be:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    24c2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    24c6:	9b 01       	movw	r18, r22
    24c8:	ac 01       	movw	r20, r24
    24ca:	69 81       	ldd	r22, Y+1	; 0x01
    24cc:	7a 81       	ldd	r23, Y+2	; 0x02
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    24d6:	a7 01       	movw	r20, r14
    24d8:	96 01       	movw	r18, r12
    24da:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    24de:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q2>
    24e2:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q2+0x1>
    24e6:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q2+0x2>
    24ea:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    24ee:	c0 90 5b 21 	lds	r12, 0x215B	; 0x80215b <q3>
    24f2:	d0 90 5c 21 	lds	r13, 0x215C	; 0x80215c <q3+0x1>
    24f6:	e0 90 5d 21 	lds	r14, 0x215D	; 0x80215d <q3+0x2>
    24fa:	f0 90 5e 21 	lds	r15, 0x215E	; 0x80215e <q3+0x3>
    24fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2500:	3e 81       	ldd	r19, Y+6	; 0x06
    2502:	4f 81       	ldd	r20, Y+7	; 0x07
    2504:	58 85       	ldd	r21, Y+8	; 0x08
    2506:	69 89       	ldd	r22, Y+17	; 0x11
    2508:	7a 89       	ldd	r23, Y+18	; 0x12
    250a:	8b 89       	ldd	r24, Y+19	; 0x13
    250c:	9c 89       	ldd	r25, Y+20	; 0x14
    250e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2512:	2b 01       	movw	r4, r22
    2514:	3c 01       	movw	r6, r24
    2516:	a5 01       	movw	r20, r10
    2518:	94 01       	movw	r18, r8
    251a:	6d 85       	ldd	r22, Y+13	; 0x0d
    251c:	7e 85       	ldd	r23, Y+14	; 0x0e
    251e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2520:	98 89       	ldd	r25, Y+16	; 0x10
    2522:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2526:	9b 01       	movw	r18, r22
    2528:	ac 01       	movw	r20, r24
    252a:	c3 01       	movw	r24, r6
    252c:	b2 01       	movw	r22, r4
    252e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2532:	4b 01       	movw	r8, r22
    2534:	5c 01       	movw	r10, r24
    2536:	2d 89       	ldd	r18, Y+21	; 0x15
    2538:	3e 89       	ldd	r19, Y+22	; 0x16
    253a:	4f 89       	ldd	r20, Y+23	; 0x17
    253c:	58 8d       	ldd	r21, Y+24	; 0x18
    253e:	69 85       	ldd	r22, Y+9	; 0x09
    2540:	7a 85       	ldd	r23, Y+10	; 0x0a
    2542:	8b 85       	ldd	r24, Y+11	; 0x0b
    2544:	9c 85       	ldd	r25, Y+12	; 0x0c
    2546:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
    254e:	c5 01       	movw	r24, r10
    2550:	b4 01       	movw	r22, r8
    2552:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2556:	a7 01       	movw	r20, r14
    2558:	96 01       	movw	r18, r12
    255a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    255e:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <q3>
    2562:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <q3+0x1>
    2566:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <q3+0x2>
    256a:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    256e:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2572:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2576:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    257a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    257e:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    2582:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    2586:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    258a:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    258e:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    2592:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    2596:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    259a:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
    259e:	40 90 63 21 	lds	r4, 0x2163	; 0x802163 <q1>
    25a2:	50 90 64 21 	lds	r5, 0x2164	; 0x802164 <q1+0x1>
    25a6:	60 90 65 21 	lds	r6, 0x2165	; 0x802165 <q1+0x2>
    25aa:	70 90 66 21 	lds	r7, 0x2166	; 0x802166 <q1+0x3>
    25ae:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    25b2:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    25b6:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    25ba:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    25be:	e9 86       	std	Y+9, r14	; 0x09
    25c0:	fa 86       	std	Y+10, r15	; 0x0a
    25c2:	0b 87       	std	Y+11, r16	; 0x0b
    25c4:	1c 87       	std	Y+12, r17	; 0x0c
    25c6:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    25ca:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    25ce:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    25d2:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    25d6:	ed 86       	std	Y+13, r14	; 0x0d
    25d8:	fe 86       	std	Y+14, r15	; 0x0e
    25da:	0f 87       	std	Y+15, r16	; 0x0f
    25dc:	18 8b       	std	Y+16, r17	; 0x10
    25de:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    25e2:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    25e6:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    25ea:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    25ee:	e9 82       	std	Y+1, r14	; 0x01
    25f0:	fa 82       	std	Y+2, r15	; 0x02
    25f2:	0b 83       	std	Y+3, r16	; 0x03
    25f4:	1c 83       	std	Y+4, r17	; 0x04
    25f6:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    25fa:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    25fe:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    2602:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    2606:	e9 8a       	std	Y+17, r14	; 0x11
    2608:	fa 8a       	std	Y+18, r15	; 0x12
    260a:	0b 8b       	std	Y+19, r16	; 0x13
    260c:	1c 8b       	std	Y+20, r17	; 0x14
    260e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2612:	6b 01       	movw	r12, r22
    2614:	7c 01       	movw	r14, r24
    2616:	a3 01       	movw	r20, r6
    2618:	92 01       	movw	r18, r4
    261a:	c5 01       	movw	r24, r10
    261c:	b4 01       	movw	r22, r8
    261e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2622:	9b 01       	movw	r18, r22
    2624:	ac 01       	movw	r20, r24
    2626:	c7 01       	movw	r24, r14
    2628:	b6 01       	movw	r22, r12
    262a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    262e:	4b 01       	movw	r8, r22
    2630:	5c 01       	movw	r10, r24
    2632:	2d 85       	ldd	r18, Y+13	; 0x0d
    2634:	3e 85       	ldd	r19, Y+14	; 0x0e
    2636:	4f 85       	ldd	r20, Y+15	; 0x0f
    2638:	58 89       	ldd	r21, Y+16	; 0x10
    263a:	69 85       	ldd	r22, Y+9	; 0x09
    263c:	7a 85       	ldd	r23, Y+10	; 0x0a
    263e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2640:	9c 85       	ldd	r25, Y+12	; 0x0c
    2642:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2646:	9b 01       	movw	r18, r22
    2648:	ac 01       	movw	r20, r24
    264a:	c5 01       	movw	r24, r10
    264c:	b4 01       	movw	r22, r8
    264e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2652:	4b 01       	movw	r8, r22
    2654:	5c 01       	movw	r10, r24
    2656:	29 89       	ldd	r18, Y+17	; 0x11
    2658:	3a 89       	ldd	r19, Y+18	; 0x12
    265a:	4b 89       	ldd	r20, Y+19	; 0x13
    265c:	5c 89       	ldd	r21, Y+20	; 0x14
    265e:	69 81       	ldd	r22, Y+1	; 0x01
    2660:	7a 81       	ldd	r23, Y+2	; 0x02
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	c5 01       	movw	r24, r10
    2670:	b4 01       	movw	r22, r8
    2672:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2676:	28 db       	rcall	.-2480   	; 0x1cc8 <invSqrt>
    2678:	6b 01       	movw	r12, r22
    267a:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    267c:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    2680:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    2684:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    2688:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    268c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2690:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    2694:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    2698:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    269c:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    26a0:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q1>
    26a4:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q1+0x1>
    26a8:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q1+0x2>
    26ac:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q1+0x3>
    26b0:	c7 01       	movw	r24, r14
    26b2:	b6 01       	movw	r22, r12
    26b4:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    26b8:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q1>
    26bc:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q1+0x1>
    26c0:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q1+0x2>
    26c4:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q1+0x3>
	q2 *= recipNorm;
    26c8:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q2>
    26cc:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q2+0x1>
    26d0:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q2+0x2>
    26d4:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q2+0x3>
    26d8:	c7 01       	movw	r24, r14
    26da:	b6 01       	movw	r22, r12
    26dc:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    26e0:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q2>
    26e4:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q2+0x1>
    26e8:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q2+0x2>
    26ec:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q2+0x3>
	q3 *= recipNorm;
    26f0:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    26f4:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    26f8:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    26fc:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    2700:	c7 01       	movw	r24, r14
    2702:	b6 01       	movw	r22, r12
    2704:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2708:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <q3>
    270c:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <q3+0x1>
    2710:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <q3+0x2>
    2714:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <q3+0x3>
}
    2718:	a4 96       	adiw	r28, 0x24	; 36
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	9f 90       	pop	r9
    2734:	8f 90       	pop	r8
    2736:	7f 90       	pop	r7
    2738:	6f 90       	pop	r6
    273a:	5f 90       	pop	r5
    273c:	4f 90       	pop	r4
    273e:	08 95       	ret

00002740 <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(double gx, double gy, double gz, double ax, double ay, double az, double mx, double my, double mz) {
    2740:	2f 92       	push	r2
    2742:	3f 92       	push	r3
    2744:	4f 92       	push	r4
    2746:	5f 92       	push	r5
    2748:	6f 92       	push	r6
    274a:	7f 92       	push	r7
    274c:	8f 92       	push	r8
    274e:	9f 92       	push	r9
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	c8 55       	subi	r28, 0x58	; 88
    276a:	d1 09       	sbc	r29, r1
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	69 8b       	std	Y+17, r22	; 0x11
    2772:	7a 8b       	std	Y+18, r23	; 0x12
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	9c 8b       	std	Y+20, r25	; 0x14
    2778:	29 8f       	std	Y+25, r18	; 0x19
    277a:	3a 8f       	std	Y+26, r19	; 0x1a
    277c:	4b 8f       	std	Y+27, r20	; 0x1b
    277e:	5c 8f       	std	Y+28, r21	; 0x1c
    2780:	e9 82       	std	Y+1, r14	; 0x01
    2782:	fa 82       	std	Y+2, r15	; 0x02
    2784:	0b 83       	std	Y+3, r16	; 0x03
    2786:	1c 83       	std	Y+4, r17	; 0x04
    2788:	ae 96       	adiw	r28, 0x2e	; 46
    278a:	ff ac       	ldd	r15, Y+63	; 0x3f
    278c:	ae 97       	sbiw	r28, 0x2e	; 46
    278e:	af 96       	adiw	r28, 0x2f	; 47
    2790:	ef ac       	ldd	r14, Y+63	; 0x3f
    2792:	af 97       	sbiw	r28, 0x2f	; 47
    2794:	e0 96       	adiw	r28, 0x30	; 48
    2796:	9f ac       	ldd	r9, Y+63	; 0x3f
    2798:	e0 97       	sbiw	r28, 0x30	; 48
    279a:	e1 96       	adiw	r28, 0x31	; 49
    279c:	8f ac       	ldd	r8, Y+63	; 0x3f
    279e:	e1 97       	sbiw	r28, 0x31	; 49
    27a0:	e2 96       	adiw	r28, 0x32	; 50
    27a2:	1f ad       	ldd	r17, Y+63	; 0x3f
    27a4:	e2 97       	sbiw	r28, 0x32	; 50
    27a6:	e3 96       	adiw	r28, 0x33	; 51
    27a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    27aa:	e3 97       	sbiw	r28, 0x33	; 51
    27ac:	e4 96       	adiw	r28, 0x34	; 52
    27ae:	3f ac       	ldd	r3, Y+63	; 0x3f
    27b0:	e4 97       	sbiw	r28, 0x34	; 52
    27b2:	e5 96       	adiw	r28, 0x35	; 53
    27b4:	2f ac       	ldd	r2, Y+63	; 0x3f
    27b6:	e5 97       	sbiw	r28, 0x35	; 53
	double halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0) && (my == 0.0) && (mz == 0.0)) {
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	a9 01       	movw	r20, r18
    27be:	e9 96       	adiw	r28, 0x39	; 57
    27c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    27c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    27c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    27c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    27c8:	e9 97       	sbiw	r28, 0x39	; 57
    27ca:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    27ce:	81 11       	cpse	r24, r1
    27d0:	34 c0       	rjmp	.+104    	; 0x283a <MahonyAHRSupdate+0xfa>
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	a9 01       	movw	r20, r18
    27d8:	ed 96       	adiw	r28, 0x3d	; 61
    27da:	6c ad       	ldd	r22, Y+60	; 0x3c
    27dc:	7d ad       	ldd	r23, Y+61	; 0x3d
    27de:	8e ad       	ldd	r24, Y+62	; 0x3e
    27e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    27e2:	ed 97       	sbiw	r28, 0x3d	; 61
    27e4:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    27e8:	81 11       	cpse	r24, r1
    27ea:	27 c0       	rjmp	.+78     	; 0x283a <MahonyAHRSupdate+0xfa>
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	a9 01       	movw	r20, r18
    27f2:	c3 58       	subi	r28, 0x83	; 131
    27f4:	df 4f       	sbci	r29, 0xFF	; 255
    27f6:	68 81       	ld	r22, Y
    27f8:	79 81       	ldd	r23, Y+1	; 0x01
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	cd 57       	subi	r28, 0x7D	; 125
    2800:	d0 40       	sbci	r29, 0x00	; 0
    2802:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    2806:	81 11       	cpse	r24, r1
    2808:	18 c0       	rjmp	.+48     	; 0x283a <MahonyAHRSupdate+0xfa>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
    280a:	2f 92       	push	r2
    280c:	3f 92       	push	r3
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	8f 92       	push	r8
    2814:	9f 92       	push	r9
    2816:	ef 92       	push	r14
    2818:	ff 92       	push	r15
    281a:	e9 80       	ldd	r14, Y+1	; 0x01
    281c:	fa 80       	ldd	r15, Y+2	; 0x02
    281e:	0b 81       	ldd	r16, Y+3	; 0x03
    2820:	1c 81       	ldd	r17, Y+4	; 0x04
    2822:	29 8d       	ldd	r18, Y+25	; 0x19
    2824:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2826:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2828:	5c 8d       	ldd	r21, Y+28	; 0x1c
    282a:	69 89       	ldd	r22, Y+17	; 0x11
    282c:	7a 89       	ldd	r23, Y+18	; 0x12
    282e:	8b 89       	ldd	r24, Y+19	; 0x13
    2830:	9c 89       	ldd	r25, Y+20	; 0x14
    2832:	85 da       	rcall	.-2806   	; 0x1d3e <MahonyAHRSupdateIMU>
		return;
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	a4 c7       	rjmp	.+3912   	; 0x3782 <__stack+0x783>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	a9 01       	movw	r20, r18
    2840:	c6 01       	movw	r24, r12
    2842:	b5 01       	movw	r22, r10
    2844:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    2848:	81 11       	cpse	r24, r1
    284a:	17 c0       	rjmp	.+46     	; 0x287a <MahonyAHRSupdate+0x13a>
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	a9 01       	movw	r20, r18
    2852:	6f 2d       	mov	r22, r15
    2854:	7e 2d       	mov	r23, r14
    2856:	89 2d       	mov	r24, r9
    2858:	98 2d       	mov	r25, r8
    285a:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    285e:	81 11       	cpse	r24, r1
    2860:	0c c0       	rjmp	.+24     	; 0x287a <MahonyAHRSupdate+0x13a>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	a9 01       	movw	r20, r18
    2868:	61 2f       	mov	r22, r17
    286a:	70 2f       	mov	r23, r16
    286c:	83 2d       	mov	r24, r3
    286e:	92 2d       	mov	r25, r2
    2870:	0e 94 01 28 	call	0x5002	; 0x5002 <__cmpsf2>
    2874:	88 23       	and	r24, r24
    2876:	09 f4       	brne	.+2      	; 0x287a <MahonyAHRSupdate+0x13a>
    2878:	37 c5       	rjmp	.+2670   	; 0x32e8 <__stack+0x2e9>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    287a:	a6 01       	movw	r20, r12
    287c:	95 01       	movw	r18, r10
    287e:	c6 01       	movw	r24, r12
    2880:	b5 01       	movw	r22, r10
    2882:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2886:	2b 01       	movw	r4, r22
    2888:	3c 01       	movw	r6, r24
    288a:	2f 2d       	mov	r18, r15
    288c:	3e 2d       	mov	r19, r14
    288e:	49 2d       	mov	r20, r9
    2890:	58 2d       	mov	r21, r8
    2892:	6f 2d       	mov	r22, r15
    2894:	7e 2d       	mov	r23, r14
    2896:	89 2d       	mov	r24, r9
    2898:	98 2d       	mov	r25, r8
    289a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    289e:	9b 01       	movw	r18, r22
    28a0:	ac 01       	movw	r20, r24
    28a2:	c3 01       	movw	r24, r6
    28a4:	b2 01       	movw	r22, r4
    28a6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    28aa:	2b 01       	movw	r4, r22
    28ac:	3c 01       	movw	r6, r24
    28ae:	21 2f       	mov	r18, r17
    28b0:	30 2f       	mov	r19, r16
    28b2:	43 2d       	mov	r20, r3
    28b4:	52 2d       	mov	r21, r2
    28b6:	61 2f       	mov	r22, r17
    28b8:	70 2f       	mov	r23, r16
    28ba:	83 2d       	mov	r24, r3
    28bc:	92 2d       	mov	r25, r2
    28be:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    28c2:	9b 01       	movw	r18, r22
    28c4:	ac 01       	movw	r20, r24
    28c6:	c3 01       	movw	r24, r6
    28c8:	b2 01       	movw	r22, r4
    28ca:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    28ce:	fc d9       	rcall	.-3080   	; 0x1cc8 <invSqrt>
    28d0:	2b 01       	movw	r4, r22
    28d2:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	c6 01       	movw	r24, r12
    28da:	b5 01       	movw	r22, r10
    28dc:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    28e0:	6d ab       	std	Y+53, r22	; 0x35
    28e2:	7e ab       	std	Y+54, r23	; 0x36
    28e4:	8f ab       	std	Y+55, r24	; 0x37
    28e6:	98 af       	std	Y+56, r25	; 0x38
		ay *= recipNorm;
    28e8:	a3 01       	movw	r20, r6
    28ea:	92 01       	movw	r18, r4
    28ec:	6f 2d       	mov	r22, r15
    28ee:	7e 2d       	mov	r23, r14
    28f0:	89 2d       	mov	r24, r9
    28f2:	98 2d       	mov	r25, r8
    28f4:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    28f8:	69 af       	std	Y+57, r22	; 0x39
    28fa:	7a af       	std	Y+58, r23	; 0x3a
    28fc:	8b af       	std	Y+59, r24	; 0x3b
    28fe:	9c af       	std	Y+60, r25	; 0x3c
		az *= recipNorm;     
    2900:	a3 01       	movw	r20, r6
    2902:	92 01       	movw	r18, r4
    2904:	61 2f       	mov	r22, r17
    2906:	70 2f       	mov	r23, r16
    2908:	83 2d       	mov	r24, r3
    290a:	92 2d       	mov	r25, r2
    290c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2910:	21 96       	adiw	r28, 0x01	; 1
    2912:	6c af       	std	Y+60, r22	; 0x3c
    2914:	7d af       	std	Y+61, r23	; 0x3d
    2916:	8e af       	std	Y+62, r24	; 0x3e
    2918:	9f af       	std	Y+63, r25	; 0x3f
    291a:	21 97       	sbiw	r28, 0x01	; 1

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    291c:	e9 96       	adiw	r28, 0x39	; 57
    291e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2920:	3d ad       	ldd	r19, Y+61	; 0x3d
    2922:	4e ad       	ldd	r20, Y+62	; 0x3e
    2924:	5f ad       	ldd	r21, Y+63	; 0x3f
    2926:	e9 97       	sbiw	r28, 0x39	; 57
    2928:	ca 01       	movw	r24, r20
    292a:	b9 01       	movw	r22, r18
    292c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2930:	6b 01       	movw	r12, r22
    2932:	7c 01       	movw	r14, r24
    2934:	ed 96       	adiw	r28, 0x3d	; 61
    2936:	2c ad       	ldd	r18, Y+60	; 0x3c
    2938:	3d ad       	ldd	r19, Y+61	; 0x3d
    293a:	4e ad       	ldd	r20, Y+62	; 0x3e
    293c:	5f ad       	ldd	r21, Y+63	; 0x3f
    293e:	ed 97       	sbiw	r28, 0x3d	; 61
    2940:	ca 01       	movw	r24, r20
    2942:	b9 01       	movw	r22, r18
    2944:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2948:	9b 01       	movw	r18, r22
    294a:	ac 01       	movw	r20, r24
    294c:	c7 01       	movw	r24, r14
    294e:	b6 01       	movw	r22, r12
    2950:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2954:	6b 01       	movw	r12, r22
    2956:	7c 01       	movw	r14, r24
    2958:	c3 58       	subi	r28, 0x83	; 131
    295a:	df 4f       	sbci	r29, 0xFF	; 255
    295c:	28 81       	ld	r18, Y
    295e:	39 81       	ldd	r19, Y+1	; 0x01
    2960:	4a 81       	ldd	r20, Y+2	; 0x02
    2962:	5b 81       	ldd	r21, Y+3	; 0x03
    2964:	cd 57       	subi	r28, 0x7D	; 125
    2966:	d0 40       	sbci	r29, 0x00	; 0
    2968:	ca 01       	movw	r24, r20
    296a:	b9 01       	movw	r22, r18
    296c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2970:	9b 01       	movw	r18, r22
    2972:	ac 01       	movw	r20, r24
    2974:	c7 01       	movw	r24, r14
    2976:	b6 01       	movw	r22, r12
    2978:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    297c:	a5 d9       	rcall	.-3254   	; 0x1cc8 <invSqrt>
    297e:	6b 01       	movw	r12, r22
    2980:	7c 01       	movw	r14, r24
		mx *= recipNorm;
    2982:	9b 01       	movw	r18, r22
    2984:	ac 01       	movw	r20, r24
    2986:	e9 96       	adiw	r28, 0x39	; 57
    2988:	6c ad       	ldd	r22, Y+60	; 0x3c
    298a:	7d ad       	ldd	r23, Y+61	; 0x3d
    298c:	8e ad       	ldd	r24, Y+62	; 0x3e
    298e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2990:	e9 97       	sbiw	r28, 0x39	; 57
    2992:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2996:	6d 83       	std	Y+5, r22	; 0x05
    2998:	7e 83       	std	Y+6, r23	; 0x06
    299a:	8f 83       	std	Y+7, r24	; 0x07
    299c:	98 87       	std	Y+8, r25	; 0x08
		my *= recipNorm;
    299e:	a7 01       	movw	r20, r14
    29a0:	96 01       	movw	r18, r12
    29a2:	ed 96       	adiw	r28, 0x3d	; 61
    29a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    29a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    29a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    29aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    29ac:	ed 97       	sbiw	r28, 0x3d	; 61
    29ae:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    29b2:	69 87       	std	Y+9, r22	; 0x09
    29b4:	7a 87       	std	Y+10, r23	; 0x0a
    29b6:	8b 87       	std	Y+11, r24	; 0x0b
    29b8:	9c 87       	std	Y+12, r25	; 0x0c
		mz *= recipNorm;   
    29ba:	a7 01       	movw	r20, r14
    29bc:	96 01       	movw	r18, r12
    29be:	c3 58       	subi	r28, 0x83	; 131
    29c0:	df 4f       	sbci	r29, 0xFF	; 255
    29c2:	68 81       	ld	r22, Y
    29c4:	79 81       	ldd	r23, Y+1	; 0x01
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	cd 57       	subi	r28, 0x7D	; 125
    29cc:	d0 40       	sbci	r29, 0x00	; 0
    29ce:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    29d2:	6d 87       	std	Y+13, r22	; 0x0d
    29d4:	7e 87       	std	Y+14, r23	; 0x0e
    29d6:	8f 87       	std	Y+15, r24	; 0x0f
    29d8:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    29da:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
    29de:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
    29e2:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
    29e6:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
    29ea:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    29ee:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    29f2:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    29f6:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    29fa:	69 96       	adiw	r28, 0x19	; 25
    29fc:	ec ae       	std	Y+60, r14	; 0x3c
    29fe:	fd ae       	std	Y+61, r15	; 0x3d
    2a00:	0e af       	std	Y+62, r16	; 0x3e
    2a02:	1f af       	std	Y+63, r17	; 0x3f
    2a04:	69 97       	sbiw	r28, 0x19	; 25
        q0q1 = q0 * q1;
    2a06:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2a0a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2a0e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2a12:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2a16:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q1>
    2a1a:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q1+0x1>
    2a1e:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q1+0x2>
    2a22:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q1+0x3>
    2a26:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2a2a:	69 a3       	std	Y+33, r22	; 0x21
    2a2c:	7a a3       	std	Y+34, r23	; 0x22
    2a2e:	8b a3       	std	Y+35, r24	; 0x23
    2a30:	9c a3       	std	Y+36, r25	; 0x24
        q0q2 = q0 * q2;
    2a32:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2a36:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2a3a:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2a3e:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2a42:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q2>
    2a46:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q2+0x1>
    2a4a:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q2+0x2>
    2a4e:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q2+0x3>
    2a52:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2a56:	6d 8f       	std	Y+29, r22	; 0x1d
    2a58:	7e 8f       	std	Y+30, r23	; 0x1e
    2a5a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a5c:	98 a3       	std	Y+32, r25	; 0x20
        q0q3 = q0 * q3;
    2a5e:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2a62:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2a66:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2a6a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2a6e:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    2a72:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    2a76:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    2a7a:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    2a7e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2a82:	6d 8b       	std	Y+21, r22	; 0x15
    2a84:	7e 8b       	std	Y+22, r23	; 0x16
    2a86:	8f 8b       	std	Y+23, r24	; 0x17
    2a88:	98 8f       	std	Y+24, r25	; 0x18
        q1q1 = q1 * q1;
    2a8a:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q1>
    2a8e:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q1+0x1>
    2a92:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q1+0x2>
    2a96:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q1+0x3>
    2a9a:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <q1>
    2a9e:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <q1+0x1>
    2aa2:	a0 91 65 21 	lds	r26, 0x2165	; 0x802165 <q1+0x2>
    2aa6:	b0 91 66 21 	lds	r27, 0x2166	; 0x802166 <q1+0x3>
    2aaa:	89 ab       	std	Y+49, r24	; 0x31
    2aac:	9a ab       	std	Y+50, r25	; 0x32
    2aae:	ab ab       	std	Y+51, r26	; 0x33
    2ab0:	bc ab       	std	Y+52, r27	; 0x34
        q1q2 = q1 * q2;
    2ab2:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q1>
    2ab6:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q1+0x1>
    2aba:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q1+0x2>
    2abe:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q1+0x3>
    2ac2:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q2>
    2ac6:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q2+0x1>
    2aca:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q2+0x2>
    2ace:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q2+0x3>
    2ad2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2ad6:	69 a7       	std	Y+41, r22	; 0x29
    2ad8:	7a a7       	std	Y+42, r23	; 0x2a
    2ada:	8b a7       	std	Y+43, r24	; 0x2b
    2adc:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    2ade:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q1>
    2ae2:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q1+0x1>
    2ae6:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q1+0x2>
    2aea:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q1+0x3>
    2aee:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    2af2:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    2af6:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    2afa:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    2afe:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2b02:	6d a7       	std	Y+45, r22	; 0x2d
    2b04:	7e a7       	std	Y+46, r23	; 0x2e
    2b06:	8f a7       	std	Y+47, r24	; 0x2f
    2b08:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    2b0a:	60 91 5f 21 	lds	r22, 0x215F	; 0x80215f <q2>
    2b0e:	70 91 60 21 	lds	r23, 0x2160	; 0x802160 <q2+0x1>
    2b12:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <q2+0x2>
    2b16:	90 91 62 21 	lds	r25, 0x2162	; 0x802162 <q2+0x3>
    2b1a:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q2>
    2b1e:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q2+0x1>
    2b22:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q2+0x2>
    2b26:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q2+0x3>
    2b2a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2b2e:	25 96       	adiw	r28, 0x05	; 5
    2b30:	6c af       	std	Y+60, r22	; 0x3c
    2b32:	7d af       	std	Y+61, r23	; 0x3d
    2b34:	8e af       	std	Y+62, r24	; 0x3e
    2b36:	9f af       	std	Y+63, r25	; 0x3f
    2b38:	25 97       	sbiw	r28, 0x05	; 5
        q2q3 = q2 * q3;
    2b3a:	60 91 5f 21 	lds	r22, 0x215F	; 0x80215f <q2>
    2b3e:	70 91 60 21 	lds	r23, 0x2160	; 0x802160 <q2+0x1>
    2b42:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <q2+0x2>
    2b46:	90 91 62 21 	lds	r25, 0x2162	; 0x802162 <q2+0x3>
    2b4a:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    2b4e:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    2b52:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    2b56:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    2b5a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2b5e:	29 96       	adiw	r28, 0x09	; 9
    2b60:	6c af       	std	Y+60, r22	; 0x3c
    2b62:	7d af       	std	Y+61, r23	; 0x3d
    2b64:	8e af       	std	Y+62, r24	; 0x3e
    2b66:	9f af       	std	Y+63, r25	; 0x3f
    2b68:	29 97       	sbiw	r28, 0x09	; 9
        q3q3 = q3 * q3;   
    2b6a:	60 91 5b 21 	lds	r22, 0x215B	; 0x80215b <q3>
    2b6e:	70 91 5c 21 	lds	r23, 0x215C	; 0x80215c <q3+0x1>
    2b72:	80 91 5d 21 	lds	r24, 0x215D	; 0x80215d <q3+0x2>
    2b76:	90 91 5e 21 	lds	r25, 0x215E	; 0x80215e <q3+0x3>
    2b7a:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    2b7e:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    2b82:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    2b86:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    2b8a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2b8e:	6d a3       	std	Y+37, r22	; 0x25
    2b90:	7e a3       	std	Y+38, r23	; 0x26
    2b92:	8f a3       	std	Y+39, r24	; 0x27
    2b94:	98 a7       	std	Y+40, r25	; 0x28

        // Reference direction of Earth's magnetic field
        hx = 2.0 * (mx * (0.5 - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    2b96:	25 96       	adiw	r28, 0x05	; 5
    2b98:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b9a:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ba0:	25 97       	sbiw	r28, 0x05	; 5
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	9f e3       	ldi	r25, 0x3F	; 63
    2baa:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2bae:	2d a1       	ldd	r18, Y+37	; 0x25
    2bb0:	3e a1       	ldd	r19, Y+38	; 0x26
    2bb2:	4f a1       	ldd	r20, Y+39	; 0x27
    2bb4:	58 a5       	ldd	r21, Y+40	; 0x28
    2bb6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2bba:	2d 96       	adiw	r28, 0x0d	; 13
    2bbc:	6c af       	std	Y+60, r22	; 0x3c
    2bbe:	7d af       	std	Y+61, r23	; 0x3d
    2bc0:	8e af       	std	Y+62, r24	; 0x3e
    2bc2:	9f af       	std	Y+63, r25	; 0x3f
    2bc4:	2d 97       	sbiw	r28, 0x0d	; 13
    2bc6:	2d 89       	ldd	r18, Y+21	; 0x15
    2bc8:	3e 89       	ldd	r19, Y+22	; 0x16
    2bca:	4f 89       	ldd	r20, Y+23	; 0x17
    2bcc:	58 8d       	ldd	r21, Y+24	; 0x18
    2bce:	69 a5       	ldd	r22, Y+41	; 0x29
    2bd0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bd6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2bda:	61 96       	adiw	r28, 0x11	; 17
    2bdc:	6c af       	std	Y+60, r22	; 0x3c
    2bde:	7d af       	std	Y+61, r23	; 0x3d
    2be0:	8e af       	std	Y+62, r24	; 0x3e
    2be2:	9f af       	std	Y+63, r25	; 0x3f
    2be4:	61 97       	sbiw	r28, 0x11	; 17
    2be6:	2d a5       	ldd	r18, Y+45	; 0x2d
    2be8:	3e a5       	ldd	r19, Y+46	; 0x2e
    2bea:	4f a5       	ldd	r20, Y+47	; 0x2f
    2bec:	58 a9       	ldd	r21, Y+48	; 0x30
    2bee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2bf0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2bfa:	65 96       	adiw	r28, 0x15	; 21
    2bfc:	6c af       	std	Y+60, r22	; 0x3c
    2bfe:	7d af       	std	Y+61, r23	; 0x3d
    2c00:	8e af       	std	Y+62, r24	; 0x3e
    2c02:	9f af       	std	Y+63, r25	; 0x3f
    2c04:	65 97       	sbiw	r28, 0x15	; 21
    2c06:	2d 96       	adiw	r28, 0x0d	; 13
    2c08:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c10:	2d 97       	sbiw	r28, 0x0d	; 13
    2c12:	6d 81       	ldd	r22, Y+5	; 0x05
    2c14:	7e 81       	ldd	r23, Y+6	; 0x06
    2c16:	8f 81       	ldd	r24, Y+7	; 0x07
    2c18:	98 85       	ldd	r25, Y+8	; 0x08
    2c1a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2c1e:	4b 01       	movw	r8, r22
    2c20:	5c 01       	movw	r10, r24
    2c22:	61 96       	adiw	r28, 0x11	; 17
    2c24:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c26:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c28:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c2c:	61 97       	sbiw	r28, 0x11	; 17
    2c2e:	69 85       	ldd	r22, Y+9	; 0x09
    2c30:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c36:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2c3a:	9b 01       	movw	r18, r22
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	c5 01       	movw	r24, r10
    2c40:	b4 01       	movw	r22, r8
    2c42:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2c46:	4b 01       	movw	r8, r22
    2c48:	5c 01       	movw	r10, r24
    2c4a:	65 96       	adiw	r28, 0x15	; 21
    2c4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c50:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c52:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c54:	65 97       	sbiw	r28, 0x15	; 21
    2c56:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c58:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5c:	98 89       	ldd	r25, Y+16	; 0x10
    2c5e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2c62:	9b 01       	movw	r18, r22
    2c64:	ac 01       	movw	r20, r24
    2c66:	c5 01       	movw	r24, r10
    2c68:	b4 01       	movw	r22, r8
    2c6a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2c6e:	9b 01       	movw	r18, r22
    2c70:	ac 01       	movw	r20, r24
    2c72:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2c76:	4b 01       	movw	r8, r22
    2c78:	5c 01       	movw	r10, r24
        hy = 2.0 * (mx * (q1q2 + q0q3) + my * (0.5 - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    2c7a:	29 a9       	ldd	r18, Y+49	; 0x31
    2c7c:	3a a9       	ldd	r19, Y+50	; 0x32
    2c7e:	4b a9       	ldd	r20, Y+51	; 0x33
    2c80:	5c a9       	ldd	r21, Y+52	; 0x34
    2c82:	c7 01       	movw	r24, r14
    2c84:	b6 01       	movw	r22, r12
    2c86:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2c8a:	9b 01       	movw	r18, r22
    2c8c:	ac 01       	movw	r20, r24
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	9f e3       	ldi	r25, 0x3F	; 63
    2c96:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2c9a:	69 ab       	std	Y+49, r22	; 0x31
    2c9c:	7a ab       	std	Y+50, r23	; 0x32
    2c9e:	8b ab       	std	Y+51, r24	; 0x33
    2ca0:	9c ab       	std	Y+52, r25	; 0x34
    2ca2:	29 a5       	ldd	r18, Y+41	; 0x29
    2ca4:	3a a5       	ldd	r19, Y+42	; 0x2a
    2ca6:	4b a5       	ldd	r20, Y+43	; 0x2b
    2ca8:	5c a5       	ldd	r21, Y+44	; 0x2c
    2caa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cac:	7e 89       	ldd	r23, Y+22	; 0x16
    2cae:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2cb6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cb8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cba:	4f 81       	ldd	r20, Y+7	; 0x07
    2cbc:	58 85       	ldd	r21, Y+8	; 0x08
    2cbe:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2cc2:	6b 01       	movw	r12, r22
    2cc4:	7c 01       	movw	r14, r24
    2cc6:	2d a1       	ldd	r18, Y+37	; 0x25
    2cc8:	3e a1       	ldd	r19, Y+38	; 0x26
    2cca:	4f a1       	ldd	r20, Y+39	; 0x27
    2ccc:	58 a5       	ldd	r21, Y+40	; 0x28
    2cce:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2cda:	29 85       	ldd	r18, Y+9	; 0x09
    2cdc:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cde:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ce0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ce2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2ce6:	9b 01       	movw	r18, r22
    2ce8:	ac 01       	movw	r20, r24
    2cea:	c7 01       	movw	r24, r14
    2cec:	b6 01       	movw	r22, r12
    2cee:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2cf2:	6b 01       	movw	r12, r22
    2cf4:	7c 01       	movw	r14, r24
    2cf6:	29 a1       	ldd	r18, Y+33	; 0x21
    2cf8:	3a a1       	ldd	r19, Y+34	; 0x22
    2cfa:	4b a1       	ldd	r20, Y+35	; 0x23
    2cfc:	5c a1       	ldd	r21, Y+36	; 0x24
    2cfe:	29 96       	adiw	r28, 0x09	; 9
    2d00:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d02:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d08:	29 97       	sbiw	r28, 0x09	; 9
    2d0a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2d0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d10:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d12:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d14:	58 89       	ldd	r21, Y+16	; 0x10
    2d16:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	c7 01       	movw	r24, r14
    2d20:	b6 01       	movw	r22, r12
    2d22:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2d26:	9b 01       	movw	r18, r22
    2d28:	ac 01       	movw	r20, r24
    2d2a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2d2e:	6b 01       	movw	r12, r22
    2d30:	7c 01       	movw	r14, r24
        bx = sqrt(hx * hx + hy * hy);
    2d32:	a5 01       	movw	r20, r10
    2d34:	94 01       	movw	r18, r8
    2d36:	c5 01       	movw	r24, r10
    2d38:	b4 01       	movw	r22, r8
    2d3a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2d3e:	6d 8b       	std	Y+21, r22	; 0x15
    2d40:	7e 8b       	std	Y+22, r23	; 0x16
    2d42:	8f 8b       	std	Y+23, r24	; 0x17
    2d44:	98 8f       	std	Y+24, r25	; 0x18
    2d46:	a5 01       	movw	r20, r10
    2d48:	94 01       	movw	r18, r8
    2d4a:	c5 01       	movw	r24, r10
    2d4c:	b4 01       	movw	r22, r8
    2d4e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2d52:	4b 01       	movw	r8, r22
    2d54:	5c 01       	movw	r10, r24
    2d56:	a7 01       	movw	r20, r14
    2d58:	96 01       	movw	r18, r12
    2d5a:	c7 01       	movw	r24, r14
    2d5c:	b6 01       	movw	r22, r12
    2d5e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2d62:	9b 01       	movw	r18, r22
    2d64:	ac 01       	movw	r20, r24
    2d66:	c5 01       	movw	r24, r10
    2d68:	b4 01       	movw	r22, r8
    2d6a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2d6e:	0e 94 13 2a 	call	0x5426	; 0x5426 <sqrt>
    2d72:	4b 01       	movw	r8, r22
    2d74:	5c 01       	movw	r10, r24
        bz = 2.0 * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5 - q1q1 - q2q2));
    2d76:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d78:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d7a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d7c:	58 a1       	ldd	r21, Y+32	; 0x20
    2d7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d80:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d84:	98 a9       	ldd	r25, Y+48	; 0x30
    2d86:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2d8a:	6d 8f       	std	Y+29, r22	; 0x1d
    2d8c:	7e 8f       	std	Y+30, r23	; 0x1e
    2d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d90:	98 a3       	std	Y+32, r25	; 0x20
    2d92:	29 96       	adiw	r28, 0x09	; 9
    2d94:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d96:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d98:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d9c:	29 97       	sbiw	r28, 0x09	; 9
    2d9e:	69 a1       	ldd	r22, Y+33	; 0x21
    2da0:	7a a1       	ldd	r23, Y+34	; 0x22
    2da2:	8b a1       	ldd	r24, Y+35	; 0x23
    2da4:	9c a1       	ldd	r25, Y+36	; 0x24
    2da6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2daa:	69 a3       	std	Y+33, r22	; 0x21
    2dac:	7a a3       	std	Y+34, r23	; 0x22
    2dae:	8b a3       	std	Y+35, r24	; 0x23
    2db0:	9c a3       	std	Y+36, r25	; 0x24
    2db2:	25 96       	adiw	r28, 0x05	; 5
    2db4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2db6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2db8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2dba:	5f ad       	ldd	r21, Y+63	; 0x3f
    2dbc:	25 97       	sbiw	r28, 0x05	; 5
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2dca:	6d 8b       	std	Y+21, r22	; 0x15
    2dcc:	7e 8b       	std	Y+22, r23	; 0x16
    2dce:	8f 8b       	std	Y+23, r24	; 0x17
    2dd0:	98 8f       	std	Y+24, r25	; 0x18
    2dd2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dd4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2dd6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2dd8:	58 a1       	ldd	r21, Y+32	; 0x20
    2dda:	6d 81       	ldd	r22, Y+5	; 0x05
    2ddc:	7e 81       	ldd	r23, Y+6	; 0x06
    2dde:	8f 81       	ldd	r24, Y+7	; 0x07
    2de0:	98 85       	ldd	r25, Y+8	; 0x08
    2de2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2de6:	6b 01       	movw	r12, r22
    2de8:	7c 01       	movw	r14, r24
    2dea:	29 a1       	ldd	r18, Y+33	; 0x21
    2dec:	3a a1       	ldd	r19, Y+34	; 0x22
    2dee:	4b a1       	ldd	r20, Y+35	; 0x23
    2df0:	5c a1       	ldd	r21, Y+36	; 0x24
    2df2:	69 85       	ldd	r22, Y+9	; 0x09
    2df4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2df6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dfa:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2dfe:	9b 01       	movw	r18, r22
    2e00:	ac 01       	movw	r20, r24
    2e02:	c7 01       	movw	r24, r14
    2e04:	b6 01       	movw	r22, r12
    2e06:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2e0a:	6b 01       	movw	r12, r22
    2e0c:	7c 01       	movw	r14, r24
    2e0e:	2d 89       	ldd	r18, Y+21	; 0x15
    2e10:	3e 89       	ldd	r19, Y+22	; 0x16
    2e12:	4f 89       	ldd	r20, Y+23	; 0x17
    2e14:	58 8d       	ldd	r21, Y+24	; 0x18
    2e16:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e18:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1c:	98 89       	ldd	r25, Y+16	; 0x10
    2e1e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2e22:	9b 01       	movw	r18, r22
    2e24:	ac 01       	movw	r20, r24
    2e26:	c7 01       	movw	r24, r14
    2e28:	b6 01       	movw	r22, r12
    2e2a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2e2e:	9b 01       	movw	r18, r22
    2e30:	ac 01       	movw	r20, r24
    2e32:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2e36:	6b 01       	movw	r12, r22
    2e38:	7c 01       	movw	r14, r24

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5 + q3q3;
    2e3a:	69 96       	adiw	r28, 0x19	; 25
    2e3c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e3e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e40:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e42:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e44:	69 97       	sbiw	r28, 0x19	; 25
    2e46:	c3 01       	movw	r24, r6
    2e48:	b2 01       	movw	r22, r4
    2e4a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	5f e3       	ldi	r21, 0x3F	; 63
    2e56:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2e5a:	2d a1       	ldd	r18, Y+37	; 0x25
    2e5c:	3e a1       	ldd	r19, Y+38	; 0x26
    2e5e:	4f a1       	ldd	r20, Y+39	; 0x27
    2e60:	58 a5       	ldd	r21, Y+40	; 0x28
    2e62:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2e66:	6d a3       	std	Y+37, r22	; 0x25
    2e68:	7e a3       	std	Y+38, r23	; 0x26
    2e6a:	8f a3       	std	Y+39, r24	; 0x27
    2e6c:	98 a7       	std	Y+40, r25	; 0x28
        halfwx = bx * (0.5 - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    2e6e:	a5 01       	movw	r20, r10
    2e70:	94 01       	movw	r18, r8
    2e72:	2d 96       	adiw	r28, 0x0d	; 13
    2e74:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e76:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e78:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e7c:	2d 97       	sbiw	r28, 0x0d	; 13
    2e7e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2e82:	2b 01       	movw	r4, r22
    2e84:	3c 01       	movw	r6, r24
    2e86:	a7 01       	movw	r20, r14
    2e88:	96 01       	movw	r18, r12
    2e8a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e8c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2e8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e90:	98 a1       	ldd	r25, Y+32	; 0x20
    2e92:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2e96:	9b 01       	movw	r18, r22
    2e98:	ac 01       	movw	r20, r24
    2e9a:	c3 01       	movw	r24, r6
    2e9c:	b2 01       	movw	r22, r4
    2e9e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2ea2:	69 a7       	std	Y+41, r22	; 0x29
    2ea4:	7a a7       	std	Y+42, r23	; 0x2a
    2ea6:	8b a7       	std	Y+43, r24	; 0x2b
    2ea8:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    2eaa:	a5 01       	movw	r20, r10
    2eac:	94 01       	movw	r18, r8
    2eae:	61 96       	adiw	r28, 0x11	; 17
    2eb0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eb2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2eb4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2eb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2eb8:	61 97       	sbiw	r28, 0x11	; 17
    2eba:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2ebe:	2b 01       	movw	r4, r22
    2ec0:	3c 01       	movw	r6, r24
    2ec2:	a7 01       	movw	r20, r14
    2ec4:	96 01       	movw	r18, r12
    2ec6:	69 a1       	ldd	r22, Y+33	; 0x21
    2ec8:	7a a1       	ldd	r23, Y+34	; 0x22
    2eca:	8b a1       	ldd	r24, Y+35	; 0x23
    2ecc:	9c a1       	ldd	r25, Y+36	; 0x24
    2ece:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2ed2:	9b 01       	movw	r18, r22
    2ed4:	ac 01       	movw	r20, r24
    2ed6:	c3 01       	movw	r24, r6
    2ed8:	b2 01       	movw	r22, r4
    2eda:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2ede:	6d a7       	std	Y+45, r22	; 0x2d
    2ee0:	7e a7       	std	Y+46, r23	; 0x2e
    2ee2:	8f a7       	std	Y+47, r24	; 0x2f
    2ee4:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5 - q1q1 - q2q2);  
    2ee6:	a5 01       	movw	r20, r10
    2ee8:	94 01       	movw	r18, r8
    2eea:	65 96       	adiw	r28, 0x15	; 21
    2eec:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eee:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef4:	65 97       	sbiw	r28, 0x15	; 21
    2ef6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2efa:	2b 01       	movw	r4, r22
    2efc:	3c 01       	movw	r6, r24
    2efe:	a7 01       	movw	r20, r14
    2f00:	96 01       	movw	r18, r12
    2f02:	6d 89       	ldd	r22, Y+21	; 0x15
    2f04:	7e 89       	ldd	r23, Y+22	; 0x16
    2f06:	8f 89       	ldd	r24, Y+23	; 0x17
    2f08:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2f0e:	9b 01       	movw	r18, r22
    2f10:	ac 01       	movw	r20, r24
    2f12:	c3 01       	movw	r24, r6
    2f14:	b2 01       	movw	r22, r4
    2f16:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2f1a:	6b 01       	movw	r12, r22
    2f1c:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    2f1e:	2d a1       	ldd	r18, Y+37	; 0x25
    2f20:	3e a1       	ldd	r19, Y+38	; 0x26
    2f22:	4f a1       	ldd	r20, Y+39	; 0x27
    2f24:	58 a5       	ldd	r21, Y+40	; 0x28
    2f26:	69 ad       	ldd	r22, Y+57	; 0x39
    2f28:	7a ad       	ldd	r23, Y+58	; 0x3a
    2f2a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f2c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f2e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2f32:	4b 01       	movw	r8, r22
    2f34:	5c 01       	movw	r10, r24
    2f36:	29 a1       	ldd	r18, Y+33	; 0x21
    2f38:	3a a1       	ldd	r19, Y+34	; 0x22
    2f3a:	4b a1       	ldd	r20, Y+35	; 0x23
    2f3c:	5c a1       	ldd	r21, Y+36	; 0x24
    2f3e:	21 96       	adiw	r28, 0x01	; 1
    2f40:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f42:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f44:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f46:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f48:	21 97       	sbiw	r28, 0x01	; 1
    2f4a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2f4e:	9b 01       	movw	r18, r22
    2f50:	ac 01       	movw	r20, r24
    2f52:	c5 01       	movw	r24, r10
    2f54:	b4 01       	movw	r22, r8
    2f56:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2f5a:	4b 01       	movw	r8, r22
    2f5c:	5c 01       	movw	r10, r24
    2f5e:	a7 01       	movw	r20, r14
    2f60:	96 01       	movw	r18, r12
    2f62:	69 85       	ldd	r22, Y+9	; 0x09
    2f64:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f66:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f6a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2f6e:	2b 01       	movw	r4, r22
    2f70:	3c 01       	movw	r6, r24
    2f72:	2d a5       	ldd	r18, Y+45	; 0x2d
    2f74:	3e a5       	ldd	r19, Y+46	; 0x2e
    2f76:	4f a5       	ldd	r20, Y+47	; 0x2f
    2f78:	58 a9       	ldd	r21, Y+48	; 0x30
    2f7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f80:	98 89       	ldd	r25, Y+16	; 0x10
    2f82:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2f86:	9b 01       	movw	r18, r22
    2f88:	ac 01       	movw	r20, r24
    2f8a:	c3 01       	movw	r24, r6
    2f8c:	b2 01       	movw	r22, r4
    2f8e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2f92:	9b 01       	movw	r18, r22
    2f94:	ac 01       	movw	r20, r24
    2f96:	c5 01       	movw	r24, r10
    2f98:	b4 01       	movw	r22, r8
    2f9a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    2f9e:	6d 8b       	std	Y+21, r22	; 0x15
    2fa0:	7e 8b       	std	Y+22, r23	; 0x16
    2fa2:	8f 8b       	std	Y+23, r24	; 0x17
    2fa4:	98 8f       	std	Y+24, r25	; 0x18
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    2fa6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2fa8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2faa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2fac:	58 a1       	ldd	r21, Y+32	; 0x20
    2fae:	21 96       	adiw	r28, 0x01	; 1
    2fb0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2fb2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2fb4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fb8:	21 97       	sbiw	r28, 0x01	; 1
    2fba:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2fbe:	4b 01       	movw	r8, r22
    2fc0:	5c 01       	movw	r10, r24
    2fc2:	2d a1       	ldd	r18, Y+37	; 0x25
    2fc4:	3e a1       	ldd	r19, Y+38	; 0x26
    2fc6:	4f a1       	ldd	r20, Y+39	; 0x27
    2fc8:	58 a5       	ldd	r21, Y+40	; 0x28
    2fca:	6d a9       	ldd	r22, Y+53	; 0x35
    2fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fce:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2fd6:	9b 01       	movw	r18, r22
    2fd8:	ac 01       	movw	r20, r24
    2fda:	c5 01       	movw	r24, r10
    2fdc:	b4 01       	movw	r22, r8
    2fde:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    2fe2:	4b 01       	movw	r8, r22
    2fe4:	5c 01       	movw	r10, r24
    2fe6:	29 a5       	ldd	r18, Y+41	; 0x29
    2fe8:	3a a5       	ldd	r19, Y+42	; 0x2a
    2fea:	4b a5       	ldd	r20, Y+43	; 0x2b
    2fec:	5c a5       	ldd	r21, Y+44	; 0x2c
    2fee:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ff0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff4:	98 89       	ldd	r25, Y+16	; 0x10
    2ff6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    2ffa:	2b 01       	movw	r4, r22
    2ffc:	3c 01       	movw	r6, r24
    2ffe:	a7 01       	movw	r20, r14
    3000:	96 01       	movw	r18, r12
    3002:	6d 81       	ldd	r22, Y+5	; 0x05
    3004:	7e 81       	ldd	r23, Y+6	; 0x06
    3006:	8f 81       	ldd	r24, Y+7	; 0x07
    3008:	98 85       	ldd	r25, Y+8	; 0x08
    300a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	c3 01       	movw	r24, r6
    3014:	b2 01       	movw	r22, r4
    3016:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	c5 01       	movw	r24, r10
    3020:	b4 01       	movw	r22, r8
    3022:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3026:	4b 01       	movw	r8, r22
    3028:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    302a:	29 a1       	ldd	r18, Y+33	; 0x21
    302c:	3a a1       	ldd	r19, Y+34	; 0x22
    302e:	4b a1       	ldd	r20, Y+35	; 0x23
    3030:	5c a1       	ldd	r21, Y+36	; 0x24
    3032:	6d a9       	ldd	r22, Y+53	; 0x35
    3034:	7e a9       	ldd	r23, Y+54	; 0x36
    3036:	8f a9       	ldd	r24, Y+55	; 0x37
    3038:	98 ad       	ldd	r25, Y+56	; 0x38
    303a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    303e:	6b 01       	movw	r12, r22
    3040:	7c 01       	movw	r14, r24
    3042:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3044:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3046:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3048:	58 a1       	ldd	r21, Y+32	; 0x20
    304a:	69 ad       	ldd	r22, Y+57	; 0x39
    304c:	7a ad       	ldd	r23, Y+58	; 0x3a
    304e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3050:	9c ad       	ldd	r25, Y+60	; 0x3c
    3052:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3056:	9b 01       	movw	r18, r22
    3058:	ac 01       	movw	r20, r24
    305a:	c7 01       	movw	r24, r14
    305c:	b6 01       	movw	r22, r12
    305e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3062:	6b 01       	movw	r12, r22
    3064:	7c 01       	movw	r14, r24
    3066:	2d a5       	ldd	r18, Y+45	; 0x2d
    3068:	3e a5       	ldd	r19, Y+46	; 0x2e
    306a:	4f a5       	ldd	r20, Y+47	; 0x2f
    306c:	58 a9       	ldd	r21, Y+48	; 0x30
    306e:	6d 81       	ldd	r22, Y+5	; 0x05
    3070:	7e 81       	ldd	r23, Y+6	; 0x06
    3072:	8f 81       	ldd	r24, Y+7	; 0x07
    3074:	98 85       	ldd	r25, Y+8	; 0x08
    3076:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    307a:	2b 01       	movw	r4, r22
    307c:	3c 01       	movw	r6, r24
    307e:	29 a5       	ldd	r18, Y+41	; 0x29
    3080:	3a a5       	ldd	r19, Y+42	; 0x2a
    3082:	4b a5       	ldd	r20, Y+43	; 0x2b
    3084:	5c a5       	ldd	r21, Y+44	; 0x2c
    3086:	69 85       	ldd	r22, Y+9	; 0x09
    3088:	7a 85       	ldd	r23, Y+10	; 0x0a
    308a:	8b 85       	ldd	r24, Y+11	; 0x0b
    308c:	9c 85       	ldd	r25, Y+12	; 0x0c
    308e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3092:	9b 01       	movw	r18, r22
    3094:	ac 01       	movw	r20, r24
    3096:	c3 01       	movw	r24, r6
    3098:	b2 01       	movw	r22, r4
    309a:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	c7 01       	movw	r24, r14
    30a4:	b6 01       	movw	r22, r12
    30a6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    30aa:	6b 01       	movw	r12, r22
    30ac:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    30ae:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <twoKi>
    30b2:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <twoKi+0x1>
    30b6:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <twoKi+0x2>
    30ba:	90 91 6a 21 	lds	r25, 0x216A	; 0x80216a <twoKi+0x3>
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	a9 01       	movw	r20, r18
    30c4:	0e 94 a1 29 	call	0x5342	; 0x5342 <__gesf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	0c f0       	brlt	.+2      	; 0x30ce <__stack+0xcf>
    30cc:	ab c0       	rjmp	.+342    	; 0x3224 <__stack+0x225>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    30ce:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    30d2:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    30d6:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    30da:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    30de:	40 90 57 21 	lds	r4, 0x2157	; 0x802157 <integralFBx>
    30e2:	50 90 58 21 	lds	r5, 0x2158	; 0x802158 <integralFBx+0x1>
    30e6:	60 90 59 21 	lds	r6, 0x2159	; 0x802159 <integralFBx+0x2>
    30ea:	70 90 5a 21 	lds	r7, 0x215A	; 0x80215a <integralFBx+0x3>
    30ee:	6d 89       	ldd	r22, Y+21	; 0x15
    30f0:	7e 89       	ldd	r23, Y+22	; 0x16
    30f2:	8f 89       	ldd	r24, Y+23	; 0x17
    30f4:	98 8d       	ldd	r25, Y+24	; 0x18
    30f6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    30fa:	2a ef       	ldi	r18, 0xFA	; 250
    30fc:	39 ec       	ldi	r19, 0xC9	; 201
    30fe:	44 e3       	ldi	r20, 0x34	; 52
    3100:	59 e3       	ldi	r21, 0x39	; 57
    3102:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3106:	a3 01       	movw	r20, r6
    3108:	92 01       	movw	r18, r4
    310a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    310e:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <integralFBx>
    3112:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <integralFBx+0x1>
    3116:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <integralFBx+0x2>
    311a:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    311e:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    3122:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    3126:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    312a:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    312e:	40 90 53 21 	lds	r4, 0x2153	; 0x802153 <integralFBy>
    3132:	50 90 54 21 	lds	r5, 0x2154	; 0x802154 <integralFBy+0x1>
    3136:	60 90 55 21 	lds	r6, 0x2155	; 0x802155 <integralFBy+0x2>
    313a:	70 90 56 21 	lds	r7, 0x2156	; 0x802156 <integralFBy+0x3>
    313e:	c5 01       	movw	r24, r10
    3140:	b4 01       	movw	r22, r8
    3142:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3146:	2a ef       	ldi	r18, 0xFA	; 250
    3148:	39 ec       	ldi	r19, 0xC9	; 201
    314a:	44 e3       	ldi	r20, 0x34	; 52
    314c:	59 e3       	ldi	r21, 0x39	; 57
    314e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3152:	a3 01       	movw	r20, r6
    3154:	92 01       	movw	r18, r4
    3156:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    315a:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <integralFBy>
    315e:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <integralFBy+0x1>
    3162:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <integralFBy+0x2>
    3166:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    316a:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <twoKi>
    316e:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <twoKi+0x1>
    3172:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <twoKi+0x2>
    3176:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <twoKi+0x3>
    317a:	40 90 4f 21 	lds	r4, 0x214F	; 0x80214f <integralFBz>
    317e:	50 90 50 21 	lds	r5, 0x2150	; 0x802150 <integralFBz+0x1>
    3182:	60 90 51 21 	lds	r6, 0x2151	; 0x802151 <integralFBz+0x2>
    3186:	70 90 52 21 	lds	r7, 0x2152	; 0x802152 <integralFBz+0x3>
    318a:	c7 01       	movw	r24, r14
    318c:	b6 01       	movw	r22, r12
    318e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3192:	2a ef       	ldi	r18, 0xFA	; 250
    3194:	39 ec       	ldi	r19, 0xC9	; 201
    3196:	44 e3       	ldi	r20, 0x34	; 52
    3198:	59 e3       	ldi	r21, 0x39	; 57
    319a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    319e:	a3 01       	movw	r20, r6
    31a0:	92 01       	movw	r18, r4
    31a2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    31a6:	60 93 4f 21 	sts	0x214F, r22	; 0x80214f <integralFBz>
    31aa:	70 93 50 21 	sts	0x2150, r23	; 0x802150 <integralFBz+0x1>
    31ae:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <integralFBz+0x2>
    31b2:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    31b6:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <integralFBx>
    31ba:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <integralFBx+0x1>
    31be:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <integralFBx+0x2>
    31c2:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <integralFBx+0x3>
    31c6:	69 89       	ldd	r22, Y+17	; 0x11
    31c8:	7a 89       	ldd	r23, Y+18	; 0x12
    31ca:	8b 89       	ldd	r24, Y+19	; 0x13
    31cc:	9c 89       	ldd	r25, Y+20	; 0x14
    31ce:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    31d2:	69 8b       	std	Y+17, r22	; 0x11
    31d4:	7a 8b       	std	Y+18, r23	; 0x12
    31d6:	8b 8b       	std	Y+19, r24	; 0x13
    31d8:	9c 8b       	std	Y+20, r25	; 0x14
			gy += integralFBy;
    31da:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <integralFBy>
    31de:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <integralFBy+0x1>
    31e2:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <integralFBy+0x2>
    31e6:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <integralFBy+0x3>
    31ea:	69 8d       	ldd	r22, Y+25	; 0x19
    31ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    31f6:	69 8f       	std	Y+25, r22	; 0x19
    31f8:	7a 8f       	std	Y+26, r23	; 0x1a
    31fa:	8b 8f       	std	Y+27, r24	; 0x1b
    31fc:	9c 8f       	std	Y+28, r25	; 0x1c
			gz += integralFBz;
    31fe:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <integralFBz>
    3202:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <integralFBz+0x1>
    3206:	40 91 51 21 	lds	r20, 0x2151	; 0x802151 <integralFBz+0x2>
    320a:	50 91 52 21 	lds	r21, 0x2152	; 0x802152 <integralFBz+0x3>
    320e:	69 81       	ldd	r22, Y+1	; 0x01
    3210:	7a 81       	ldd	r23, Y+2	; 0x02
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    321a:	69 83       	std	Y+1, r22	; 0x01
    321c:	7a 83       	std	Y+2, r23	; 0x02
    321e:	8b 83       	std	Y+3, r24	; 0x03
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	18 c0       	rjmp	.+48     	; 0x3254 <__stack+0x255>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    3224:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <integralFBx>
    3228:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <integralFBx+0x1>
    322c:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <integralFBx+0x2>
    3230:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <integralFBx+0x3>
			integralFBy = 0.0;
    3234:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <integralFBy>
    3238:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <integralFBy+0x1>
    323c:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <integralFBy+0x2>
    3240:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <integralFBy+0x3>
			integralFBz = 0.0;
    3244:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <integralFBz>
    3248:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <integralFBz+0x1>
    324c:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <integralFBz+0x2>
    3250:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    3254:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    3258:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    325c:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    3260:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    3264:	6d 89       	ldd	r22, Y+21	; 0x15
    3266:	7e 89       	ldd	r23, Y+22	; 0x16
    3268:	8f 89       	ldd	r24, Y+23	; 0x17
    326a:	98 8d       	ldd	r25, Y+24	; 0x18
    326c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3270:	9b 01       	movw	r18, r22
    3272:	ac 01       	movw	r20, r24
    3274:	69 89       	ldd	r22, Y+17	; 0x11
    3276:	7a 89       	ldd	r23, Y+18	; 0x12
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3280:	69 8b       	std	Y+17, r22	; 0x11
    3282:	7a 8b       	std	Y+18, r23	; 0x12
    3284:	8b 8b       	std	Y+19, r24	; 0x13
    3286:	9c 8b       	std	Y+20, r25	; 0x14
		gy += twoKp * halfey;
    3288:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    328c:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    3290:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    3294:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    3298:	c5 01       	movw	r24, r10
    329a:	b4 01       	movw	r22, r8
    329c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    32a0:	9b 01       	movw	r18, r22
    32a2:	ac 01       	movw	r20, r24
    32a4:	69 8d       	ldd	r22, Y+25	; 0x19
    32a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ac:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    32b0:	69 8f       	std	Y+25, r22	; 0x19
    32b2:	7a 8f       	std	Y+26, r23	; 0x1a
    32b4:	8b 8f       	std	Y+27, r24	; 0x1b
    32b6:	9c 8f       	std	Y+28, r25	; 0x1c
		gz += twoKp * halfez;
    32b8:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    32bc:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    32c0:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    32c4:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    32c8:	c7 01       	movw	r24, r14
    32ca:	b6 01       	movw	r22, r12
    32cc:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    32d0:	9b 01       	movw	r18, r22
    32d2:	ac 01       	movw	r20, r24
    32d4:	69 81       	ldd	r22, Y+1	; 0x01
    32d6:	7a 81       	ldd	r23, Y+2	; 0x02
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    32e0:	69 83       	std	Y+1, r22	; 0x01
    32e2:	7a 83       	std	Y+2, r23	; 0x02
    32e4:	8b 83       	std	Y+3, r24	; 0x03
    32e6:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    32e8:	2a ef       	ldi	r18, 0xFA	; 250
    32ea:	39 ec       	ldi	r19, 0xC9	; 201
    32ec:	44 eb       	ldi	r20, 0xB4	; 180
    32ee:	58 e3       	ldi	r21, 0x38	; 56
    32f0:	69 89       	ldd	r22, Y+17	; 0x11
    32f2:	7a 89       	ldd	r23, Y+18	; 0x12
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    32fc:	6d 83       	std	Y+5, r22	; 0x05
    32fe:	7e 83       	std	Y+6, r23	; 0x06
    3300:	8f 83       	std	Y+7, r24	; 0x07
    3302:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5 * (1.0 / sampleFreq));
    3304:	2a ef       	ldi	r18, 0xFA	; 250
    3306:	39 ec       	ldi	r19, 0xC9	; 201
    3308:	44 eb       	ldi	r20, 0xB4	; 180
    330a:	58 e3       	ldi	r21, 0x38	; 56
    330c:	69 8d       	ldd	r22, Y+25	; 0x19
    330e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3314:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3318:	69 87       	std	Y+9, r22	; 0x09
    331a:	7a 87       	std	Y+10, r23	; 0x0a
    331c:	8b 87       	std	Y+11, r24	; 0x0b
    331e:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5 * (1.0 / sampleFreq));
    3320:	2a ef       	ldi	r18, 0xFA	; 250
    3322:	39 ec       	ldi	r19, 0xC9	; 201
    3324:	44 eb       	ldi	r20, 0xB4	; 180
    3326:	58 e3       	ldi	r21, 0x38	; 56
    3328:	69 81       	ldd	r22, Y+1	; 0x01
    332a:	7a 81       	ldd	r23, Y+2	; 0x02
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3334:	6d 87       	std	Y+13, r22	; 0x0d
    3336:	7e 87       	std	Y+14, r23	; 0x0e
    3338:	8f 87       	std	Y+15, r24	; 0x0f
    333a:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    333c:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    3340:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    3344:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    3348:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    334c:	e9 8a       	std	Y+17, r14	; 0x11
    334e:	fa 8a       	std	Y+18, r15	; 0x12
    3350:	0b 8b       	std	Y+19, r16	; 0x13
    3352:	1c 8b       	std	Y+20, r17	; 0x14
	qb = q1;
    3354:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    3358:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    335c:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    3360:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
	qc = q2;
    3364:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    3368:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    336c:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    3370:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    3374:	e9 8e       	std	Y+25, r14	; 0x19
    3376:	fa 8e       	std	Y+26, r15	; 0x1a
    3378:	0b 8f       	std	Y+27, r16	; 0x1b
    337a:	1c 8f       	std	Y+28, r17	; 0x1c
	q0 += (-qb * gx - qc * gy - q3 * gz);
    337c:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    3380:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    3384:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    3388:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    338c:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    3390:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    3394:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    3398:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    339c:	c5 01       	movw	r24, r10
    339e:	b4 01       	movw	r22, r8
    33a0:	90 58       	subi	r25, 0x80	; 128
    33a2:	2d 81       	ldd	r18, Y+5	; 0x05
    33a4:	3e 81       	ldd	r19, Y+6	; 0x06
    33a6:	4f 81       	ldd	r20, Y+7	; 0x07
    33a8:	58 85       	ldd	r21, Y+8	; 0x08
    33aa:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    33ae:	69 83       	std	Y+1, r22	; 0x01
    33b0:	7a 83       	std	Y+2, r23	; 0x02
    33b2:	8b 83       	std	Y+3, r24	; 0x03
    33b4:	9c 83       	std	Y+4, r25	; 0x04
    33b6:	29 8d       	ldd	r18, Y+25	; 0x19
    33b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    33bc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    33be:	69 85       	ldd	r22, Y+9	; 0x09
    33c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    33c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    33ca:	9b 01       	movw	r18, r22
    33cc:	ac 01       	movw	r20, r24
    33ce:	69 81       	ldd	r22, Y+1	; 0x01
    33d0:	7a 81       	ldd	r23, Y+2	; 0x02
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    33da:	69 83       	std	Y+1, r22	; 0x01
    33dc:	7a 83       	std	Y+2, r23	; 0x02
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	a3 01       	movw	r20, r6
    33e4:	92 01       	movw	r18, r4
    33e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    33e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    33ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ec:	98 89       	ldd	r25, Y+16	; 0x10
    33ee:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    33f2:	9b 01       	movw	r18, r22
    33f4:	ac 01       	movw	r20, r24
    33f6:	69 81       	ldd	r22, Y+1	; 0x01
    33f8:	7a 81       	ldd	r23, Y+2	; 0x02
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3402:	a7 01       	movw	r20, r14
    3404:	96 01       	movw	r18, r12
    3406:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    340a:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    340e:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    3412:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    3416:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    341a:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    341e:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    3422:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    3426:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    342a:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q1>
    342e:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q1+0x1>
    3432:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q1+0x2>
    3436:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q1+0x3>
    343a:	29 89       	ldd	r18, Y+17	; 0x11
    343c:	3a 89       	ldd	r19, Y+18	; 0x12
    343e:	4b 89       	ldd	r20, Y+19	; 0x13
    3440:	5c 89       	ldd	r21, Y+20	; 0x14
    3442:	6d 81       	ldd	r22, Y+5	; 0x05
    3444:	7e 81       	ldd	r23, Y+6	; 0x06
    3446:	8f 81       	ldd	r24, Y+7	; 0x07
    3448:	98 85       	ldd	r25, Y+8	; 0x08
    344a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    344e:	69 83       	std	Y+1, r22	; 0x01
    3450:	7a 83       	std	Y+2, r23	; 0x02
    3452:	8b 83       	std	Y+3, r24	; 0x03
    3454:	9c 83       	std	Y+4, r25	; 0x04
    3456:	29 8d       	ldd	r18, Y+25	; 0x19
    3458:	3a 8d       	ldd	r19, Y+26	; 0x1a
    345a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    345c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    345e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3460:	7e 85       	ldd	r23, Y+14	; 0x0e
    3462:	8f 85       	ldd	r24, Y+15	; 0x0f
    3464:	98 89       	ldd	r25, Y+16	; 0x10
    3466:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    346a:	9b 01       	movw	r18, r22
    346c:	ac 01       	movw	r20, r24
    346e:	69 81       	ldd	r22, Y+1	; 0x01
    3470:	7a 81       	ldd	r23, Y+2	; 0x02
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    347a:	69 83       	std	Y+1, r22	; 0x01
    347c:	7a 83       	std	Y+2, r23	; 0x02
    347e:	8b 83       	std	Y+3, r24	; 0x03
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	a3 01       	movw	r20, r6
    3484:	92 01       	movw	r18, r4
    3486:	69 85       	ldd	r22, Y+9	; 0x09
    3488:	7a 85       	ldd	r23, Y+10	; 0x0a
    348a:	8b 85       	ldd	r24, Y+11	; 0x0b
    348c:	9c 85       	ldd	r25, Y+12	; 0x0c
    348e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3492:	9b 01       	movw	r18, r22
    3494:	ac 01       	movw	r20, r24
    3496:	69 81       	ldd	r22, Y+1	; 0x01
    3498:	7a 81       	ldd	r23, Y+2	; 0x02
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	9c 81       	ldd	r25, Y+4	; 0x04
    349e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    34a2:	a7 01       	movw	r20, r14
    34a4:	96 01       	movw	r18, r12
    34a6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    34aa:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q1>
    34ae:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q1+0x1>
    34b2:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q1+0x2>
    34b6:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    34ba:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <q3>
    34be:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <q3+0x1>
    34c2:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <q3+0x2>
    34c6:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <q3+0x3>
    34ca:	c0 90 5f 21 	lds	r12, 0x215F	; 0x80215f <q2>
    34ce:	d0 90 60 21 	lds	r13, 0x2160	; 0x802160 <q2+0x1>
    34d2:	e0 90 61 21 	lds	r14, 0x2161	; 0x802161 <q2+0x2>
    34d6:	f0 90 62 21 	lds	r15, 0x2162	; 0x802162 <q2+0x3>
    34da:	29 89       	ldd	r18, Y+17	; 0x11
    34dc:	3a 89       	ldd	r19, Y+18	; 0x12
    34de:	4b 89       	ldd	r20, Y+19	; 0x13
    34e0:	5c 89       	ldd	r21, Y+20	; 0x14
    34e2:	69 85       	ldd	r22, Y+9	; 0x09
    34e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    34e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    34e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    34ea:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    34ee:	69 83       	std	Y+1, r22	; 0x01
    34f0:	7a 83       	std	Y+2, r23	; 0x02
    34f2:	8b 83       	std	Y+3, r24	; 0x03
    34f4:	9c 83       	std	Y+4, r25	; 0x04
    34f6:	a5 01       	movw	r20, r10
    34f8:	94 01       	movw	r18, r8
    34fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    34fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    34fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3500:	98 89       	ldd	r25, Y+16	; 0x10
    3502:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3506:	9b 01       	movw	r18, r22
    3508:	ac 01       	movw	r20, r24
    350a:	69 81       	ldd	r22, Y+1	; 0x01
    350c:	7a 81       	ldd	r23, Y+2	; 0x02
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3516:	69 83       	std	Y+1, r22	; 0x01
    3518:	7a 83       	std	Y+2, r23	; 0x02
    351a:	8b 83       	std	Y+3, r24	; 0x03
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	a3 01       	movw	r20, r6
    3520:	92 01       	movw	r18, r4
    3522:	6d 81       	ldd	r22, Y+5	; 0x05
    3524:	7e 81       	ldd	r23, Y+6	; 0x06
    3526:	8f 81       	ldd	r24, Y+7	; 0x07
    3528:	98 85       	ldd	r25, Y+8	; 0x08
    352a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    352e:	9b 01       	movw	r18, r22
    3530:	ac 01       	movw	r20, r24
    3532:	69 81       	ldd	r22, Y+1	; 0x01
    3534:	7a 81       	ldd	r23, Y+2	; 0x02
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	9c 81       	ldd	r25, Y+4	; 0x04
    353a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    353e:	a7 01       	movw	r20, r14
    3540:	96 01       	movw	r18, r12
    3542:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3546:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q2>
    354a:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q2+0x1>
    354e:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q2+0x2>
    3552:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    3556:	c0 90 5b 21 	lds	r12, 0x215B	; 0x80215b <q3>
    355a:	d0 90 5c 21 	lds	r13, 0x215C	; 0x80215c <q3+0x1>
    355e:	e0 90 5d 21 	lds	r14, 0x215D	; 0x80215d <q3+0x2>
    3562:	f0 90 5e 21 	lds	r15, 0x215E	; 0x80215e <q3+0x3>
    3566:	29 89       	ldd	r18, Y+17	; 0x11
    3568:	3a 89       	ldd	r19, Y+18	; 0x12
    356a:	4b 89       	ldd	r20, Y+19	; 0x13
    356c:	5c 89       	ldd	r21, Y+20	; 0x14
    356e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3570:	7e 85       	ldd	r23, Y+14	; 0x0e
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	98 89       	ldd	r25, Y+16	; 0x10
    3576:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    357a:	2b 01       	movw	r4, r22
    357c:	3c 01       	movw	r6, r24
    357e:	a5 01       	movw	r20, r10
    3580:	94 01       	movw	r18, r8
    3582:	69 85       	ldd	r22, Y+9	; 0x09
    3584:	7a 85       	ldd	r23, Y+10	; 0x0a
    3586:	8b 85       	ldd	r24, Y+11	; 0x0b
    3588:	9c 85       	ldd	r25, Y+12	; 0x0c
    358a:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    358e:	9b 01       	movw	r18, r22
    3590:	ac 01       	movw	r20, r24
    3592:	c3 01       	movw	r24, r6
    3594:	b2 01       	movw	r22, r4
    3596:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    359a:	4b 01       	movw	r8, r22
    359c:	5c 01       	movw	r10, r24
    359e:	29 8d       	ldd	r18, Y+25	; 0x19
    35a0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35a2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    35a4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    35a6:	6d 81       	ldd	r22, Y+5	; 0x05
    35a8:	7e 81       	ldd	r23, Y+6	; 0x06
    35aa:	8f 81       	ldd	r24, Y+7	; 0x07
    35ac:	98 85       	ldd	r25, Y+8	; 0x08
    35ae:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    35b2:	9b 01       	movw	r18, r22
    35b4:	ac 01       	movw	r20, r24
    35b6:	c5 01       	movw	r24, r10
    35b8:	b4 01       	movw	r22, r8
    35ba:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    35be:	a7 01       	movw	r20, r14
    35c0:	96 01       	movw	r18, r12
    35c2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    35c6:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <q3>
    35ca:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <q3+0x1>
    35ce:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <q3+0x2>
    35d2:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    35d6:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    35da:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    35de:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    35e2:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    35e6:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    35ea:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    35ee:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    35f2:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    35f6:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q1>
    35fa:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q1+0x1>
    35fe:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q1+0x2>
    3602:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q1+0x3>
    3606:	40 90 63 21 	lds	r4, 0x2163	; 0x802163 <q1>
    360a:	50 90 64 21 	lds	r5, 0x2164	; 0x802164 <q1+0x1>
    360e:	60 90 65 21 	lds	r6, 0x2165	; 0x802165 <q1+0x2>
    3612:	70 90 66 21 	lds	r7, 0x2166	; 0x802166 <q1+0x3>
    3616:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    361a:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    361e:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    3622:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    3626:	ed 82       	std	Y+5, r14	; 0x05
    3628:	fe 82       	std	Y+6, r15	; 0x06
    362a:	0f 83       	std	Y+7, r16	; 0x07
    362c:	18 87       	std	Y+8, r17	; 0x08
    362e:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q2>
    3632:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q2+0x1>
    3636:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q2+0x2>
    363a:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q2+0x3>
    363e:	e9 86       	std	Y+9, r14	; 0x09
    3640:	fa 86       	std	Y+10, r15	; 0x0a
    3642:	0b 87       	std	Y+11, r16	; 0x0b
    3644:	1c 87       	std	Y+12, r17	; 0x0c
    3646:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    364a:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    364e:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    3652:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    3656:	e9 82       	std	Y+1, r14	; 0x01
    3658:	fa 82       	std	Y+2, r15	; 0x02
    365a:	0b 83       	std	Y+3, r16	; 0x03
    365c:	1c 83       	std	Y+4, r17	; 0x04
    365e:	e0 90 5b 21 	lds	r14, 0x215B	; 0x80215b <q3>
    3662:	f0 90 5c 21 	lds	r15, 0x215C	; 0x80215c <q3+0x1>
    3666:	00 91 5d 21 	lds	r16, 0x215D	; 0x80215d <q3+0x2>
    366a:	10 91 5e 21 	lds	r17, 0x215E	; 0x80215e <q3+0x3>
    366e:	ed 86       	std	Y+13, r14	; 0x0d
    3670:	fe 86       	std	Y+14, r15	; 0x0e
    3672:	0f 87       	std	Y+15, r16	; 0x0f
    3674:	18 8b       	std	Y+16, r17	; 0x10
    3676:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    367a:	6b 01       	movw	r12, r22
    367c:	7c 01       	movw	r14, r24
    367e:	a3 01       	movw	r20, r6
    3680:	92 01       	movw	r18, r4
    3682:	c5 01       	movw	r24, r10
    3684:	b4 01       	movw	r22, r8
    3686:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    368a:	9b 01       	movw	r18, r22
    368c:	ac 01       	movw	r20, r24
    368e:	c7 01       	movw	r24, r14
    3690:	b6 01       	movw	r22, r12
    3692:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3696:	4b 01       	movw	r8, r22
    3698:	5c 01       	movw	r10, r24
    369a:	29 85       	ldd	r18, Y+9	; 0x09
    369c:	3a 85       	ldd	r19, Y+10	; 0x0a
    369e:	4b 85       	ldd	r20, Y+11	; 0x0b
    36a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    36a2:	6d 81       	ldd	r22, Y+5	; 0x05
    36a4:	7e 81       	ldd	r23, Y+6	; 0x06
    36a6:	8f 81       	ldd	r24, Y+7	; 0x07
    36a8:	98 85       	ldd	r25, Y+8	; 0x08
    36aa:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    36ae:	9b 01       	movw	r18, r22
    36b0:	ac 01       	movw	r20, r24
    36b2:	c5 01       	movw	r24, r10
    36b4:	b4 01       	movw	r22, r8
    36b6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    36ba:	4b 01       	movw	r8, r22
    36bc:	5c 01       	movw	r10, r24
    36be:	2d 85       	ldd	r18, Y+13	; 0x0d
    36c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    36c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    36c4:	58 89       	ldd	r21, Y+16	; 0x10
    36c6:	69 81       	ldd	r22, Y+1	; 0x01
    36c8:	7a 81       	ldd	r23, Y+2	; 0x02
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    36d2:	9b 01       	movw	r18, r22
    36d4:	ac 01       	movw	r20, r24
    36d6:	c5 01       	movw	r24, r10
    36d8:	b4 01       	movw	r22, r8
    36da:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    36de:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <invSqrt>
    36e2:	6b 01       	movw	r12, r22
    36e4:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    36e6:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    36ea:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    36ee:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    36f2:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    36f6:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    36fa:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    36fe:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    3702:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    3706:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    370a:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q1>
    370e:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q1+0x1>
    3712:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q1+0x2>
    3716:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q1+0x3>
    371a:	c7 01       	movw	r24, r14
    371c:	b6 01       	movw	r22, r12
    371e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3722:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q1>
    3726:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q1+0x1>
    372a:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q1+0x2>
    372e:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q1+0x3>
	q2 *= recipNorm;
    3732:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q2>
    3736:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q2+0x1>
    373a:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q2+0x2>
    373e:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q2+0x3>
    3742:	c7 01       	movw	r24, r14
    3744:	b6 01       	movw	r22, r12
    3746:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    374a:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q2>
    374e:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q2+0x1>
    3752:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q2+0x2>
    3756:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q2+0x3>
	q3 *= recipNorm;
    375a:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <q3>
    375e:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <q3+0x1>
    3762:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <q3+0x2>
    3766:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <q3+0x3>
    376a:	c7 01       	movw	r24, r14
    376c:	b6 01       	movw	r22, r12
    376e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3772:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <q3>
    3776:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <q3+0x1>
    377a:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <q3+0x2>
    377e:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <q3+0x3>
}
    3782:	c8 5a       	subi	r28, 0xA8	; 168
    3784:	df 4f       	sbci	r29, 0xFF	; 255
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	ff 90       	pop	r15
    3794:	ef 90       	pop	r14
    3796:	df 90       	pop	r13
    3798:	cf 90       	pop	r12
    379a:	bf 90       	pop	r11
    379c:	af 90       	pop	r10
    379e:	9f 90       	pop	r9
    37a0:	8f 90       	pop	r8
    37a2:	7f 90       	pop	r7
    37a4:	6f 90       	pop	r6
    37a6:	5f 90       	pop	r5
    37a8:	4f 90       	pop	r4
    37aa:	3f 90       	pop	r3
    37ac:	2f 90       	pop	r2
    37ae:	08 95       	ret

000037b0 <__portable_avr_delay_cycles>:
	}
	else
	{
		return false;
	}
}
    37b0:	04 c0       	rjmp	.+8      	; 0x37ba <__portable_avr_delay_cycles+0xa>
    37b2:	61 50       	subi	r22, 0x01	; 1
    37b4:	71 09       	sbc	r23, r1
    37b6:	81 09       	sbc	r24, r1
    37b8:	91 09       	sbc	r25, r1
    37ba:	61 15       	cp	r22, r1
    37bc:	71 05       	cpc	r23, r1
    37be:	81 05       	cpc	r24, r1
    37c0:	91 05       	cpc	r25, r1
    37c2:	b9 f7       	brne	.-18     	; 0x37b2 <__portable_avr_delay_cycles+0x2>
    37c4:	08 95       	ret

000037c6 <mpu9250_ODR_init>:
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	8b 01       	movw	r16, r22
    37cc:	9c 01       	movw	r18, r24
    37ce:	64 2f       	mov	r22, r20
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	88 ee       	ldi	r24, 0xE8	; 232
    37d4:	93 e0       	ldi	r25, 0x03	; 3
    37d6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__udivmodhi4>
    37da:	ec e1       	ldi	r30, 0x1C	; 28
    37dc:	f0 e2       	ldi	r31, 0x20	; 32
    37de:	88 e6       	ldi	r24, 0x68	; 104
    37e0:	80 83       	st	Z, r24
    37e2:	89 e1       	ldi	r24, 0x19	; 25
    37e4:	81 83       	std	Z+1, r24	; 0x01
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	80 87       	std	Z+8, r24	; 0x08
    37ec:	91 87       	std	Z+9, r25	; 0x09
    37ee:	61 50       	subi	r22, 0x01	; 1
    37f0:	60 93 7d 21 	sts	0x217D, r22	; 0x80217d <mpu9250_twi_data>
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	bf 01       	movw	r22, r30
    37f8:	c8 01       	movw	r24, r16
    37fa:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <mpu9250_gyro_init>:
    3804:	9f 92       	push	r9
    3806:	af 92       	push	r10
    3808:	bf 92       	push	r11
    380a:	cf 92       	push	r12
    380c:	df 92       	push	r13
    380e:	ef 92       	push	r14
    3810:	ff 92       	push	r15
    3812:	0f 93       	push	r16
    3814:	1f 93       	push	r17
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	6b 01       	movw	r12, r22
    381c:	7c 01       	movw	r14, r24
    381e:	cc e1       	ldi	r28, 0x1C	; 28
    3820:	d0 e2       	ldi	r29, 0x20	; 32
    3822:	0f 2e       	mov	r0, r31
    3824:	f8 e6       	ldi	r31, 0x68	; 104
    3826:	9f 2e       	mov	r9, r31
    3828:	f0 2d       	mov	r31, r0
    382a:	98 82       	st	Y, r9
    382c:	8a e1       	ldi	r24, 0x1A	; 26
    382e:	89 83       	std	Y+1, r24	; 0x01
    3830:	aa 24       	eor	r10, r10
    3832:	a3 94       	inc	r10
    3834:	b1 2c       	mov	r11, r1
    3836:	a8 86       	std	Y+8, r10	; 0x08
    3838:	b9 86       	std	Y+9, r11	; 0x09
    383a:	0d e7       	ldi	r16, 0x7D	; 125
    383c:	11 e2       	ldi	r17, 0x21	; 33
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	f8 01       	movw	r30, r16
    3842:	80 83       	st	Z, r24
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	be 01       	movw	r22, r28
    3848:	c6 01       	movw	r24, r12
    384a:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    384e:	98 82       	st	Y, r9
    3850:	8b e1       	ldi	r24, 0x1B	; 27
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	a8 86       	std	Y+8, r10	; 0x08
    3856:	b9 86       	std	Y+9, r11	; 0x09
    3858:	88 e1       	ldi	r24, 0x18	; 24
    385a:	f8 01       	movw	r30, r16
    385c:	80 83       	st	Z, r24
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	be 01       	movw	r22, r28
    3862:	c6 01       	movw	r24, r12
    3864:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	df 90       	pop	r13
    3876:	cf 90       	pop	r12
    3878:	bf 90       	pop	r11
    387a:	af 90       	pop	r10
    387c:	9f 90       	pop	r9
    387e:	08 95       	ret

00003880 <mpu9250_acc_init>:
    3880:	9f 92       	push	r9
    3882:	af 92       	push	r10
    3884:	bf 92       	push	r11
    3886:	cf 92       	push	r12
    3888:	df 92       	push	r13
    388a:	ef 92       	push	r14
    388c:	ff 92       	push	r15
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	6b 01       	movw	r12, r22
    3898:	7c 01       	movw	r14, r24
    389a:	cc e1       	ldi	r28, 0x1C	; 28
    389c:	d0 e2       	ldi	r29, 0x20	; 32
    389e:	0f 2e       	mov	r0, r31
    38a0:	f8 e6       	ldi	r31, 0x68	; 104
    38a2:	9f 2e       	mov	r9, r31
    38a4:	f0 2d       	mov	r31, r0
    38a6:	98 82       	st	Y, r9
    38a8:	8c e1       	ldi	r24, 0x1C	; 28
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	aa 24       	eor	r10, r10
    38ae:	a3 94       	inc	r10
    38b0:	b1 2c       	mov	r11, r1
    38b2:	a8 86       	std	Y+8, r10	; 0x08
    38b4:	b9 86       	std	Y+9, r11	; 0x09
    38b6:	0d e7       	ldi	r16, 0x7D	; 125
    38b8:	11 e2       	ldi	r17, 0x21	; 33
    38ba:	88 e1       	ldi	r24, 0x18	; 24
    38bc:	f8 01       	movw	r30, r16
    38be:	80 83       	st	Z, r24
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	be 01       	movw	r22, r28
    38c4:	c6 01       	movw	r24, r12
    38c6:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    38ca:	98 82       	st	Y, r9
    38cc:	8d e1       	ldi	r24, 0x1D	; 29
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	a8 86       	std	Y+8, r10	; 0x08
    38d2:	b9 86       	std	Y+9, r11	; 0x09
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	f8 01       	movw	r30, r16
    38d8:	80 83       	st	Z, r24
    38da:	40 e0       	ldi	r20, 0x00	; 0
    38dc:	be 01       	movw	r22, r28
    38de:	c6 01       	movw	r24, r12
    38e0:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	ef 90       	pop	r14
    38f0:	df 90       	pop	r13
    38f2:	cf 90       	pop	r12
    38f4:	bf 90       	pop	r11
    38f6:	af 90       	pop	r10
    38f8:	9f 90       	pop	r9
    38fa:	08 95       	ret

000038fc <mpu9250_mag_cal>:
    38fc:	2f 92       	push	r2
    38fe:	3f 92       	push	r3
    3900:	4f 92       	push	r4
    3902:	5f 92       	push	r5
    3904:	6f 92       	push	r6
    3906:	7f 92       	push	r7
    3908:	8f 92       	push	r8
    390a:	9f 92       	push	r9
    390c:	af 92       	push	r10
    390e:	bf 92       	push	r11
    3910:	cf 92       	push	r12
    3912:	df 92       	push	r13
    3914:	ef 92       	push	r14
    3916:	ff 92       	push	r15
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	6b 01       	movw	r12, r22
    3922:	7c 01       	movw	r14, r24
    3924:	cc e1       	ldi	r28, 0x1C	; 28
    3926:	d0 e2       	ldi	r29, 0x20	; 32
    3928:	0f 2e       	mov	r0, r31
    392a:	f8 e6       	ldi	r31, 0x68	; 104
    392c:	9f 2e       	mov	r9, r31
    392e:	f0 2d       	mov	r31, r0
    3930:	98 82       	st	Y, r9
    3932:	0f 2e       	mov	r0, r31
    3934:	f5 e2       	ldi	r31, 0x25	; 37
    3936:	6f 2e       	mov	r6, r31
    3938:	f0 2d       	mov	r31, r0
    393a:	69 82       	std	Y+1, r6	; 0x01
    393c:	aa 24       	eor	r10, r10
    393e:	a3 94       	inc	r10
    3940:	b1 2c       	mov	r11, r1
    3942:	a8 86       	std	Y+8, r10	; 0x08
    3944:	b9 86       	std	Y+9, r11	; 0x09
    3946:	0d e7       	ldi	r16, 0x7D	; 125
    3948:	11 e2       	ldi	r17, 0x21	; 33
    394a:	0f 2e       	mov	r0, r31
    394c:	fc e0       	ldi	r31, 0x0C	; 12
    394e:	4f 2e       	mov	r4, r31
    3950:	f0 2d       	mov	r31, r0
    3952:	f8 01       	movw	r30, r16
    3954:	40 82       	st	Z, r4
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	be 01       	movw	r22, r28
    395a:	c6 01       	movw	r24, r12
    395c:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3960:	98 82       	st	Y, r9
    3962:	0f 2e       	mov	r0, r31
    3964:	f6 e2       	ldi	r31, 0x26	; 38
    3966:	7f 2e       	mov	r7, r31
    3968:	f0 2d       	mov	r31, r0
    396a:	79 82       	std	Y+1, r7	; 0x01
    396c:	a8 86       	std	Y+8, r10	; 0x08
    396e:	b9 86       	std	Y+9, r11	; 0x09
    3970:	0f 2e       	mov	r0, r31
    3972:	fa e0       	ldi	r31, 0x0A	; 10
    3974:	5f 2e       	mov	r5, r31
    3976:	f0 2d       	mov	r31, r0
    3978:	f8 01       	movw	r30, r16
    397a:	50 82       	st	Z, r5
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	be 01       	movw	r22, r28
    3980:	c6 01       	movw	r24, r12
    3982:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3986:	98 82       	st	Y, r9
    3988:	0f 2e       	mov	r0, r31
    398a:	f3 e6       	ldi	r31, 0x63	; 99
    398c:	3f 2e       	mov	r3, r31
    398e:	f0 2d       	mov	r31, r0
    3990:	39 82       	std	Y+1, r3	; 0x01
    3992:	a8 86       	std	Y+8, r10	; 0x08
    3994:	b9 86       	std	Y+9, r11	; 0x09
    3996:	8f e1       	ldi	r24, 0x1F	; 31
    3998:	f8 01       	movw	r30, r16
    399a:	80 83       	st	Z, r24
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	be 01       	movw	r22, r28
    39a0:	c6 01       	movw	r24, r12
    39a2:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    39a6:	98 82       	st	Y, r9
    39a8:	0f 2e       	mov	r0, r31
    39aa:	f7 e2       	ldi	r31, 0x27	; 39
    39ac:	8f 2e       	mov	r8, r31
    39ae:	f0 2d       	mov	r31, r0
    39b0:	89 82       	std	Y+1, r8	; 0x01
    39b2:	a8 86       	std	Y+8, r10	; 0x08
    39b4:	b9 86       	std	Y+9, r11	; 0x09
    39b6:	81 e8       	ldi	r24, 0x81	; 129
    39b8:	f8 01       	movw	r30, r16
    39ba:	80 83       	st	Z, r24
    39bc:	40 e0       	ldi	r20, 0x00	; 0
    39be:	be 01       	movw	r22, r28
    39c0:	c6 01       	movw	r24, r12
    39c2:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    39c6:	6b e0       	ldi	r22, 0x0B	; 11
    39c8:	7a e1       	ldi	r23, 0x1A	; 26
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	f0 de       	rcall	.-544    	; 0x37b0 <__portable_avr_delay_cycles>
    39d0:	98 82       	st	Y, r9
    39d2:	69 82       	std	Y+1, r6	; 0x01
    39d4:	a8 86       	std	Y+8, r10	; 0x08
    39d6:	b9 86       	std	Y+9, r11	; 0x09
    39d8:	8c e8       	ldi	r24, 0x8C	; 140
    39da:	f8 01       	movw	r30, r16
    39dc:	80 83       	st	Z, r24
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	be 01       	movw	r22, r28
    39e2:	c6 01       	movw	r24, r12
    39e4:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    39e8:	98 82       	st	Y, r9
    39ea:	79 82       	std	Y+1, r7	; 0x01
    39ec:	a8 86       	std	Y+8, r10	; 0x08
    39ee:	b9 86       	std	Y+9, r11	; 0x09
    39f0:	68 94       	set
    39f2:	22 24       	eor	r2, r2
    39f4:	24 f8       	bld	r2, 4
    39f6:	f8 01       	movw	r30, r16
    39f8:	20 82       	st	Z, r2
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	be 01       	movw	r22, r28
    39fe:	c6 01       	movw	r24, r12
    3a00:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3a04:	98 82       	st	Y, r9
    3a06:	89 82       	std	Y+1, r8	; 0x01
    3a08:	a8 86       	std	Y+8, r10	; 0x08
    3a0a:	b9 86       	std	Y+9, r11	; 0x09
    3a0c:	83 e8       	ldi	r24, 0x83	; 131
    3a0e:	f8 01       	movw	r30, r16
    3a10:	80 83       	st	Z, r24
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	be 01       	movw	r22, r28
    3a16:	c6 01       	movw	r24, r12
    3a18:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3a1c:	6b e0       	ldi	r22, 0x0B	; 11
    3a1e:	7a e1       	ldi	r23, 0x1A	; 26
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	c5 de       	rcall	.-630    	; 0x37b0 <__portable_avr_delay_cycles>
    3a26:	98 82       	st	Y, r9
    3a28:	89 e4       	ldi	r24, 0x49	; 73
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	84 e0       	ldi	r24, 0x04	; 4
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	88 87       	std	Y+8, r24	; 0x08
    3a32:	99 87       	std	Y+9, r25	; 0x09
    3a34:	41 e0       	ldi	r20, 0x01	; 1
    3a36:	be 01       	movw	r22, r28
    3a38:	c6 01       	movw	r24, r12
    3a3a:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3a3e:	f8 01       	movw	r30, r16
    3a40:	60 81       	ld	r22, Z
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 94 9e 28 	call	0x513c	; 0x513c <__floatunsisf>
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	53 e4       	ldi	r21, 0x43	; 67
    3a54:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5b e3       	ldi	r21, 0x3B	; 59
    3a60:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e8       	ldi	r20, 0x80	; 128
    3a6a:	5f e3       	ldi	r21, 0x3F	; 63
    3a6c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3a70:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <ASAX>
    3a74:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <ASAX+0x1>
    3a78:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <ASAX+0x2>
    3a7c:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <ASAX+0x3>
    3a80:	f8 01       	movw	r30, r16
    3a82:	61 81       	ldd	r22, Z+1	; 0x01
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 9e 28 	call	0x513c	; 0x513c <__floatunsisf>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	53 e4       	ldi	r21, 0x43	; 67
    3a96:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e8       	ldi	r20, 0x80	; 128
    3aa0:	5b e3       	ldi	r21, 0x3B	; 59
    3aa2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3ab2:	60 93 6f 21 	sts	0x216F, r22	; 0x80216f <ASAY>
    3ab6:	70 93 70 21 	sts	0x2170, r23	; 0x802170 <ASAY+0x1>
    3aba:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <ASAY+0x2>
    3abe:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <ASAY+0x3>
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	62 81       	ldd	r22, Z+2	; 0x02
    3ac6:	70 e0       	ldi	r23, 0x00	; 0
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 9e 28 	call	0x513c	; 0x513c <__floatunsisf>
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	53 e4       	ldi	r21, 0x43	; 67
    3ad8:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__subsf3>
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e8       	ldi	r20, 0x80	; 128
    3ae2:	5b e3       	ldi	r21, 0x3B	; 59
    3ae4:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <__addsf3>
    3af4:	60 93 6b 21 	sts	0x216B, r22	; 0x80216b <ASAZ>
    3af8:	70 93 6c 21 	sts	0x216C, r23	; 0x80216c <ASAZ+0x1>
    3afc:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <ASAZ+0x2>
    3b00:	90 93 6e 21 	sts	0x216E, r25	; 0x80216e <ASAZ+0x3>
    3b04:	98 82       	st	Y, r9
    3b06:	69 82       	std	Y+1, r6	; 0x01
    3b08:	a8 86       	std	Y+8, r10	; 0x08
    3b0a:	b9 86       	std	Y+9, r11	; 0x09
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	40 82       	st	Z, r4
    3b10:	40 e0       	ldi	r20, 0x00	; 0
    3b12:	be 01       	movw	r22, r28
    3b14:	c6 01       	movw	r24, r12
    3b16:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3b1a:	98 82       	st	Y, r9
    3b1c:	79 82       	std	Y+1, r7	; 0x01
    3b1e:	a8 86       	std	Y+8, r10	; 0x08
    3b20:	b9 86       	std	Y+9, r11	; 0x09
    3b22:	f8 01       	movw	r30, r16
    3b24:	50 82       	st	Z, r5
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	be 01       	movw	r22, r28
    3b2a:	c6 01       	movw	r24, r12
    3b2c:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3b30:	98 82       	st	Y, r9
    3b32:	39 82       	std	Y+1, r3	; 0x01
    3b34:	a8 86       	std	Y+8, r10	; 0x08
    3b36:	b9 86       	std	Y+9, r11	; 0x09
    3b38:	f8 01       	movw	r30, r16
    3b3a:	20 82       	st	Z, r2
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	be 01       	movw	r22, r28
    3b40:	c6 01       	movw	r24, r12
    3b42:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3b46:	98 82       	st	Y, r9
    3b48:	89 82       	std	Y+1, r8	; 0x01
    3b4a:	a8 86       	std	Y+8, r10	; 0x08
    3b4c:	b9 86       	std	Y+9, r11	; 0x09
    3b4e:	81 e8       	ldi	r24, 0x81	; 129
    3b50:	f8 01       	movw	r30, r16
    3b52:	80 83       	st	Z, r24
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	be 01       	movw	r22, r28
    3b58:	c6 01       	movw	r24, r12
    3b5a:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3b5e:	6b e0       	ldi	r22, 0x0B	; 11
    3b60:	7a e1       	ldi	r23, 0x1A	; 26
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	24 de       	rcall	.-952    	; 0x37b0 <__portable_avr_delay_cycles>
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	ff 90       	pop	r15
    3b72:	ef 90       	pop	r14
    3b74:	df 90       	pop	r13
    3b76:	cf 90       	pop	r12
    3b78:	bf 90       	pop	r11
    3b7a:	af 90       	pop	r10
    3b7c:	9f 90       	pop	r9
    3b7e:	8f 90       	pop	r8
    3b80:	7f 90       	pop	r7
    3b82:	6f 90       	pop	r6
    3b84:	5f 90       	pop	r5
    3b86:	4f 90       	pop	r4
    3b88:	3f 90       	pop	r3
    3b8a:	2f 90       	pop	r2
    3b8c:	08 95       	ret

00003b8e <mpu9250_mag_init>:
    3b8e:	4f 92       	push	r4
    3b90:	5f 92       	push	r5
    3b92:	6f 92       	push	r6
    3b94:	7f 92       	push	r7
    3b96:	8f 92       	push	r8
    3b98:	9f 92       	push	r9
    3b9a:	af 92       	push	r10
    3b9c:	bf 92       	push	r11
    3b9e:	cf 92       	push	r12
    3ba0:	df 92       	push	r13
    3ba2:	ef 92       	push	r14
    3ba4:	ff 92       	push	r15
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	cf 93       	push	r28
    3bac:	df 93       	push	r29
    3bae:	6b 01       	movw	r12, r22
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	cc e1       	ldi	r28, 0x1C	; 28
    3bb4:	d0 e2       	ldi	r29, 0x20	; 32
    3bb6:	0f 2e       	mov	r0, r31
    3bb8:	f8 e6       	ldi	r31, 0x68	; 104
    3bba:	9f 2e       	mov	r9, r31
    3bbc:	f0 2d       	mov	r31, r0
    3bbe:	98 82       	st	Y, r9
    3bc0:	84 e2       	ldi	r24, 0x24	; 36
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	aa 24       	eor	r10, r10
    3bc6:	a3 94       	inc	r10
    3bc8:	b1 2c       	mov	r11, r1
    3bca:	a8 86       	std	Y+8, r10	; 0x08
    3bcc:	b9 86       	std	Y+9, r11	; 0x09
    3bce:	0d e7       	ldi	r16, 0x7D	; 125
    3bd0:	11 e2       	ldi	r17, 0x21	; 33
    3bd2:	8d ec       	ldi	r24, 0xCD	; 205
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	80 83       	st	Z, r24
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	be 01       	movw	r22, r28
    3bdc:	c6 01       	movw	r24, r12
    3bde:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3be2:	98 82       	st	Y, r9
    3be4:	87 e6       	ldi	r24, 0x67	; 103
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	a8 86       	std	Y+8, r10	; 0x08
    3bea:	b9 86       	std	Y+9, r11	; 0x09
    3bec:	0f 2e       	mov	r0, r31
    3bee:	f1 e8       	ldi	r31, 0x81	; 129
    3bf0:	6f 2e       	mov	r6, r31
    3bf2:	f0 2d       	mov	r31, r0
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	60 82       	st	Z, r6
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	be 01       	movw	r22, r28
    3bfc:	c6 01       	movw	r24, r12
    3bfe:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c02:	98 82       	st	Y, r9
    3c04:	8a e6       	ldi	r24, 0x6A	; 106
    3c06:	89 83       	std	Y+1, r24	; 0x01
    3c08:	a8 86       	std	Y+8, r10	; 0x08
    3c0a:	b9 86       	std	Y+9, r11	; 0x09
    3c0c:	80 e2       	ldi	r24, 0x20	; 32
    3c0e:	f8 01       	movw	r30, r16
    3c10:	80 83       	st	Z, r24
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	be 01       	movw	r22, r28
    3c16:	c6 01       	movw	r24, r12
    3c18:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c1c:	98 82       	st	Y, r9
    3c1e:	0f 2e       	mov	r0, r31
    3c20:	f5 e2       	ldi	r31, 0x25	; 37
    3c22:	5f 2e       	mov	r5, r31
    3c24:	f0 2d       	mov	r31, r0
    3c26:	59 82       	std	Y+1, r5	; 0x01
    3c28:	a8 86       	std	Y+8, r10	; 0x08
    3c2a:	b9 86       	std	Y+9, r11	; 0x09
    3c2c:	8c e0       	ldi	r24, 0x0C	; 12
    3c2e:	f8 01       	movw	r30, r16
    3c30:	80 83       	st	Z, r24
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	be 01       	movw	r22, r28
    3c36:	c6 01       	movw	r24, r12
    3c38:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c3c:	98 82       	st	Y, r9
    3c3e:	0f 2e       	mov	r0, r31
    3c40:	f6 e2       	ldi	r31, 0x26	; 38
    3c42:	7f 2e       	mov	r7, r31
    3c44:	f0 2d       	mov	r31, r0
    3c46:	79 82       	std	Y+1, r7	; 0x01
    3c48:	a8 86       	std	Y+8, r10	; 0x08
    3c4a:	b9 86       	std	Y+9, r11	; 0x09
    3c4c:	8b e0       	ldi	r24, 0x0B	; 11
    3c4e:	f8 01       	movw	r30, r16
    3c50:	80 83       	st	Z, r24
    3c52:	40 e0       	ldi	r20, 0x00	; 0
    3c54:	be 01       	movw	r22, r28
    3c56:	c6 01       	movw	r24, r12
    3c58:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c5c:	98 82       	st	Y, r9
    3c5e:	0f 2e       	mov	r0, r31
    3c60:	f3 e6       	ldi	r31, 0x63	; 99
    3c62:	4f 2e       	mov	r4, r31
    3c64:	f0 2d       	mov	r31, r0
    3c66:	49 82       	std	Y+1, r4	; 0x01
    3c68:	a8 86       	std	Y+8, r10	; 0x08
    3c6a:	b9 86       	std	Y+9, r11	; 0x09
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	f8 01       	movw	r30, r16
    3c70:	80 83       	st	Z, r24
    3c72:	40 e0       	ldi	r20, 0x00	; 0
    3c74:	be 01       	movw	r22, r28
    3c76:	c6 01       	movw	r24, r12
    3c78:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c7c:	98 82       	st	Y, r9
    3c7e:	0f 2e       	mov	r0, r31
    3c80:	f7 e2       	ldi	r31, 0x27	; 39
    3c82:	8f 2e       	mov	r8, r31
    3c84:	f0 2d       	mov	r31, r0
    3c86:	89 82       	std	Y+1, r8	; 0x01
    3c88:	a8 86       	std	Y+8, r10	; 0x08
    3c8a:	b9 86       	std	Y+9, r11	; 0x09
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	60 82       	st	Z, r6
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	be 01       	movw	r22, r28
    3c94:	c6 01       	movw	r24, r12
    3c96:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3c9a:	66 e0       	ldi	r22, 0x06	; 6
    3c9c:	7d e0       	ldi	r23, 0x0D	; 13
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	86 dd       	rcall	.-1268   	; 0x37b0 <__portable_avr_delay_cycles>
    3ca4:	c7 01       	movw	r24, r14
    3ca6:	b6 01       	movw	r22, r12
    3ca8:	29 de       	rcall	.-942    	; 0x38fc <mpu9250_mag_cal>
    3caa:	98 82       	st	Y, r9
    3cac:	79 82       	std	Y+1, r7	; 0x01
    3cae:	a8 86       	std	Y+8, r10	; 0x08
    3cb0:	b9 86       	std	Y+9, r11	; 0x09
    3cb2:	8a e0       	ldi	r24, 0x0A	; 10
    3cb4:	f8 01       	movw	r30, r16
    3cb6:	80 83       	st	Z, r24
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	be 01       	movw	r22, r28
    3cbc:	c6 01       	movw	r24, r12
    3cbe:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3cc2:	98 82       	st	Y, r9
    3cc4:	49 82       	std	Y+1, r4	; 0x01
    3cc6:	a8 86       	std	Y+8, r10	; 0x08
    3cc8:	b9 86       	std	Y+9, r11	; 0x09
    3cca:	86 e1       	ldi	r24, 0x16	; 22
    3ccc:	f8 01       	movw	r30, r16
    3cce:	80 83       	st	Z, r24
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	be 01       	movw	r22, r28
    3cd4:	c6 01       	movw	r24, r12
    3cd6:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3cda:	98 82       	st	Y, r9
    3cdc:	89 82       	std	Y+1, r8	; 0x01
    3cde:	a8 86       	std	Y+8, r10	; 0x08
    3ce0:	b9 86       	std	Y+9, r11	; 0x09
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	60 82       	st	Z, r6
    3ce6:	40 e0       	ldi	r20, 0x00	; 0
    3ce8:	be 01       	movw	r22, r28
    3cea:	c6 01       	movw	r24, r12
    3cec:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3cf0:	66 e0       	ldi	r22, 0x06	; 6
    3cf2:	7d e0       	ldi	r23, 0x0D	; 13
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	5b dd       	rcall	.-1354   	; 0x37b0 <__portable_avr_delay_cycles>
    3cfa:	98 82       	st	Y, r9
    3cfc:	59 82       	std	Y+1, r5	; 0x01
    3cfe:	a8 86       	std	Y+8, r10	; 0x08
    3d00:	b9 86       	std	Y+9, r11	; 0x09
    3d02:	8c e8       	ldi	r24, 0x8C	; 140
    3d04:	f8 01       	movw	r30, r16
    3d06:	80 83       	st	Z, r24
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	be 01       	movw	r22, r28
    3d0c:	c6 01       	movw	r24, r12
    3d0e:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3d12:	98 82       	st	Y, r9
    3d14:	79 82       	std	Y+1, r7	; 0x01
    3d16:	a8 86       	std	Y+8, r10	; 0x08
    3d18:	b9 86       	std	Y+9, r11	; 0x09
    3d1a:	83 e0       	ldi	r24, 0x03	; 3
    3d1c:	f8 01       	movw	r30, r16
    3d1e:	80 83       	st	Z, r24
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	be 01       	movw	r22, r28
    3d24:	c6 01       	movw	r24, r12
    3d26:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3d2a:	98 82       	st	Y, r9
    3d2c:	89 82       	std	Y+1, r8	; 0x01
    3d2e:	a8 86       	std	Y+8, r10	; 0x08
    3d30:	b9 86       	std	Y+9, r11	; 0x09
    3d32:	87 e8       	ldi	r24, 0x87	; 135
    3d34:	f8 01       	movw	r30, r16
    3d36:	80 83       	st	Z, r24
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	be 01       	movw	r22, r28
    3d3c:	c6 01       	movw	r24, r12
    3d3e:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	cf 90       	pop	r12
    3d52:	bf 90       	pop	r11
    3d54:	af 90       	pop	r10
    3d56:	9f 90       	pop	r9
    3d58:	8f 90       	pop	r8
    3d5a:	7f 90       	pop	r7
    3d5c:	6f 90       	pop	r6
    3d5e:	5f 90       	pop	r5
    3d60:	4f 90       	pop	r4
    3d62:	08 95       	ret

00003d64 <mpu9250_int_init>:
    3d64:	9f 92       	push	r9
    3d66:	af 92       	push	r10
    3d68:	bf 92       	push	r11
    3d6a:	cf 92       	push	r12
    3d6c:	df 92       	push	r13
    3d6e:	ef 92       	push	r14
    3d70:	ff 92       	push	r15
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	6b 01       	movw	r12, r22
    3d7c:	7c 01       	movw	r14, r24
    3d7e:	cc e1       	ldi	r28, 0x1C	; 28
    3d80:	d0 e2       	ldi	r29, 0x20	; 32
    3d82:	0f 2e       	mov	r0, r31
    3d84:	f8 e6       	ldi	r31, 0x68	; 104
    3d86:	9f 2e       	mov	r9, r31
    3d88:	f0 2d       	mov	r31, r0
    3d8a:	98 82       	st	Y, r9
    3d8c:	87 e3       	ldi	r24, 0x37	; 55
    3d8e:	89 83       	std	Y+1, r24	; 0x01
    3d90:	aa 24       	eor	r10, r10
    3d92:	a3 94       	inc	r10
    3d94:	b1 2c       	mov	r11, r1
    3d96:	a8 86       	std	Y+8, r10	; 0x08
    3d98:	b9 86       	std	Y+9, r11	; 0x09
    3d9a:	0d e7       	ldi	r16, 0x7D	; 125
    3d9c:	11 e2       	ldi	r17, 0x21	; 33
    3d9e:	80 e1       	ldi	r24, 0x10	; 16
    3da0:	f8 01       	movw	r30, r16
    3da2:	80 83       	st	Z, r24
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	be 01       	movw	r22, r28
    3da8:	c6 01       	movw	r24, r12
    3daa:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3dae:	98 82       	st	Y, r9
    3db0:	88 e3       	ldi	r24, 0x38	; 56
    3db2:	89 83       	std	Y+1, r24	; 0x01
    3db4:	a8 86       	std	Y+8, r10	; 0x08
    3db6:	b9 86       	std	Y+9, r11	; 0x09
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	f8 01       	movw	r30, r16
    3dbc:	80 83       	st	Z, r24
    3dbe:	40 e0       	ldi	r20, 0x00	; 0
    3dc0:	be 01       	movw	r22, r28
    3dc2:	c6 01       	movw	r24, r12
    3dc4:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	08 95       	ret

00003de0 <init_mpu9250>:
    3de0:	7f 92       	push	r7
    3de2:	8f 92       	push	r8
    3de4:	9f 92       	push	r9
    3de6:	af 92       	push	r10
    3de8:	bf 92       	push	r11
    3dea:	cf 92       	push	r12
    3dec:	df 92       	push	r13
    3dee:	ef 92       	push	r14
    3df0:	ff 92       	push	r15
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	6b 01       	movw	r12, r22
    3dfc:	7c 01       	movw	r14, r24
    3dfe:	74 2e       	mov	r7, r20
    3e00:	cc e1       	ldi	r28, 0x1C	; 28
    3e02:	d0 e2       	ldi	r29, 0x20	; 32
    3e04:	0f 2e       	mov	r0, r31
    3e06:	f8 e6       	ldi	r31, 0x68	; 104
    3e08:	9f 2e       	mov	r9, r31
    3e0a:	f0 2d       	mov	r31, r0
    3e0c:	98 82       	st	Y, r9
    3e0e:	0f 2e       	mov	r0, r31
    3e10:	fb e6       	ldi	r31, 0x6B	; 107
    3e12:	8f 2e       	mov	r8, r31
    3e14:	f0 2d       	mov	r31, r0
    3e16:	89 82       	std	Y+1, r8	; 0x01
    3e18:	aa 24       	eor	r10, r10
    3e1a:	a3 94       	inc	r10
    3e1c:	b1 2c       	mov	r11, r1
    3e1e:	a8 86       	std	Y+8, r10	; 0x08
    3e20:	b9 86       	std	Y+9, r11	; 0x09
    3e22:	0d e7       	ldi	r16, 0x7D	; 125
    3e24:	11 e2       	ldi	r17, 0x21	; 33
    3e26:	80 e8       	ldi	r24, 0x80	; 128
    3e28:	f8 01       	movw	r30, r16
    3e2a:	80 83       	st	Z, r24
    3e2c:	40 e0       	ldi	r20, 0x00	; 0
    3e2e:	be 01       	movw	r22, r28
    3e30:	c6 01       	movw	r24, r12
    3e32:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3e36:	66 e3       	ldi	r22, 0x36	; 54
    3e38:	72 e8       	ldi	r23, 0x82	; 130
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	b8 dc       	rcall	.-1680   	; 0x37b0 <__portable_avr_delay_cycles>
    3e40:	98 82       	st	Y, r9
    3e42:	89 82       	std	Y+1, r8	; 0x01
    3e44:	a8 86       	std	Y+8, r10	; 0x08
    3e46:	b9 86       	std	Y+9, r11	; 0x09
    3e48:	88 24       	eor	r8, r8
    3e4a:	83 94       	inc	r8
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	80 82       	st	Z, r8
    3e50:	40 e0       	ldi	r20, 0x00	; 0
    3e52:	be 01       	movw	r22, r28
    3e54:	c6 01       	movw	r24, r12
    3e56:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3e5a:	98 82       	st	Y, r9
    3e5c:	8c e6       	ldi	r24, 0x6C	; 108
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	a8 86       	std	Y+8, r10	; 0x08
    3e62:	b9 86       	std	Y+9, r11	; 0x09
    3e64:	f8 01       	movw	r30, r16
    3e66:	10 82       	st	Z, r1
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	be 01       	movw	r22, r28
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3e72:	c7 01       	movw	r24, r14
    3e74:	b6 01       	movw	r22, r12
    3e76:	c6 dc       	rcall	.-1652   	; 0x3804 <mpu9250_gyro_init>
    3e78:	c7 01       	movw	r24, r14
    3e7a:	b6 01       	movw	r22, r12
    3e7c:	01 dd       	rcall	.-1534   	; 0x3880 <mpu9250_acc_init>
    3e7e:	47 2d       	mov	r20, r7
    3e80:	c7 01       	movw	r24, r14
    3e82:	b6 01       	movw	r22, r12
    3e84:	a0 dc       	rcall	.-1728   	; 0x37c6 <mpu9250_ODR_init>
    3e86:	c7 01       	movw	r24, r14
    3e88:	b6 01       	movw	r22, r12
    3e8a:	6c df       	rcall	.-296    	; 0x3d64 <mpu9250_int_init>
    3e8c:	c7 01       	movw	r24, r14
    3e8e:	b6 01       	movw	r22, r12
    3e90:	7e de       	rcall	.-772    	; 0x3b8e <mpu9250_mag_init>
    3e92:	e0 e6       	ldi	r30, 0x60	; 96
    3e94:	f6 e0       	ldi	r31, 0x06	; 6
    3e96:	81 e1       	ldi	r24, 0x11	; 17
    3e98:	80 8b       	std	Z+16, r24	; 0x10
    3e9a:	82 86       	std	Z+10, r8	; 0x0a
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	81 87       	std	Z+9, r24	; 0x09
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	ff 90       	pop	r15
    3eaa:	ef 90       	pop	r14
    3eac:	df 90       	pop	r13
    3eae:	cf 90       	pop	r12
    3eb0:	bf 90       	pop	r11
    3eb2:	af 90       	pop	r10
    3eb4:	9f 90       	pop	r9
    3eb6:	8f 90       	pop	r8
    3eb8:	7f 90       	pop	r7
    3eba:	08 95       	ret

00003ebc <read_mpu9250>:
    3ebc:	4f 92       	push	r4
    3ebe:	5f 92       	push	r5
    3ec0:	6f 92       	push	r6
    3ec2:	7f 92       	push	r7
    3ec4:	8f 92       	push	r8
    3ec6:	9f 92       	push	r9
    3ec8:	af 92       	push	r10
    3eca:	bf 92       	push	r11
    3ecc:	cf 92       	push	r12
    3ece:	df 92       	push	r13
    3ed0:	ef 92       	push	r14
    3ed2:	ff 92       	push	r15
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	68 97       	sbiw	r28, 0x18	; 24
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	8c 01       	movw	r16, r24
    3ee8:	db 01       	movw	r26, r22
    3eea:	ca 01       	movw	r24, r20
    3eec:	ec e1       	ldi	r30, 0x1C	; 28
    3eee:	f0 e2       	ldi	r31, 0x20	; 32
    3ef0:	28 e6       	ldi	r18, 0x68	; 104
    3ef2:	20 83       	st	Z, r18
    3ef4:	2a e3       	ldi	r18, 0x3A	; 58
    3ef6:	21 83       	std	Z+1, r18	; 0x01
    3ef8:	26 e1       	ldi	r18, 0x16	; 22
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	20 87       	std	Z+8, r18	; 0x08
    3efe:	31 87       	std	Z+9, r19	; 0x09
    3f00:	41 e0       	ldi	r20, 0x01	; 1
    3f02:	bf 01       	movw	r22, r30
    3f04:	0e 94 a8 07 	call	0xf50	; 0xf50 <twi_master_transfer>
    3f08:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3f0c:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3f10:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3f14:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3f18:	60 91 7e 21 	lds	r22, 0x217E	; 0x80217e <mpu9250_twi_data+0x1>
    3f1c:	70 e0       	ldi	r23, 0x00	; 0
    3f1e:	76 2f       	mov	r23, r22
    3f20:	66 27       	eor	r22, r22
    3f22:	80 91 7f 21 	lds	r24, 0x217F	; 0x80217f <mpu9250_twi_data+0x2>
    3f26:	68 0f       	add	r22, r24
    3f28:	71 1d       	adc	r23, r1
    3f2a:	07 2e       	mov	r0, r23
    3f2c:	00 0c       	add	r0, r0
    3f2e:	88 0b       	sbc	r24, r24
    3f30:	99 0b       	sbc	r25, r25
    3f32:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    3f36:	a7 01       	movw	r20, r14
    3f38:	96 01       	movw	r18, r12
    3f3a:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    3f3e:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    3f42:	69 83       	std	Y+1, r22	; 0x01
    3f44:	7a 83       	std	Y+2, r23	; 0x02
    3f46:	8b 83       	std	Y+3, r24	; 0x03
    3f48:	9c 83       	std	Y+4, r25	; 0x04
    3f4a:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3f4e:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3f52:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3f56:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3f5a:	60 91 80 21 	lds	r22, 0x2180	; 0x802180 <mpu9250_twi_data+0x3>
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	76 2f       	mov	r23, r22
    3f62:	66 27       	eor	r22, r22
    3f64:	80 91 81 21 	lds	r24, 0x2181	; 0x802181 <mpu9250_twi_data+0x4>
    3f68:	68 0f       	add	r22, r24
    3f6a:	71 1d       	adc	r23, r1
    3f6c:	07 2e       	mov	r0, r23
    3f6e:	00 0c       	add	r0, r0
    3f70:	88 0b       	sbc	r24, r24
    3f72:	99 0b       	sbc	r25, r25
    3f74:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    3f78:	a7 01       	movw	r20, r14
    3f7a:	96 01       	movw	r18, r12
    3f7c:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    3f80:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    3f84:	6d 83       	std	Y+5, r22	; 0x05
    3f86:	7e 83       	std	Y+6, r23	; 0x06
    3f88:	8f 83       	std	Y+7, r24	; 0x07
    3f8a:	98 87       	std	Y+8, r25	; 0x08
    3f8c:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3f90:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3f94:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3f98:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3f9c:	60 91 82 21 	lds	r22, 0x2182	; 0x802182 <mpu9250_twi_data+0x5>
    3fa0:	70 e0       	ldi	r23, 0x00	; 0
    3fa2:	76 2f       	mov	r23, r22
    3fa4:	66 27       	eor	r22, r22
    3fa6:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <mpu9250_twi_data+0x6>
    3faa:	68 0f       	add	r22, r24
    3fac:	71 1d       	adc	r23, r1
    3fae:	07 2e       	mov	r0, r23
    3fb0:	00 0c       	add	r0, r0
    3fb2:	88 0b       	sbc	r24, r24
    3fb4:	99 0b       	sbc	r25, r25
    3fb6:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    3fba:	a7 01       	movw	r20, r14
    3fbc:	96 01       	movw	r18, r12
    3fbe:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    3fc2:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    3fc6:	69 87       	std	Y+9, r22	; 0x09
    3fc8:	7a 87       	std	Y+10, r23	; 0x0a
    3fca:	8b 87       	std	Y+11, r24	; 0x0b
    3fcc:	9c 87       	std	Y+12, r25	; 0x0c
    3fce:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    3fd2:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    3fd6:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    3fda:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    3fde:	60 91 86 21 	lds	r22, 0x2186	; 0x802186 <mpu9250_twi_data+0x9>
    3fe2:	70 e0       	ldi	r23, 0x00	; 0
    3fe4:	76 2f       	mov	r23, r22
    3fe6:	66 27       	eor	r22, r22
    3fe8:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <mpu9250_twi_data+0xa>
    3fec:	68 0f       	add	r22, r24
    3fee:	71 1d       	adc	r23, r1
    3ff0:	07 2e       	mov	r0, r23
    3ff2:	00 0c       	add	r0, r0
    3ff4:	88 0b       	sbc	r24, r24
    3ff6:	99 0b       	sbc	r25, r25
    3ff8:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    3ffc:	a7 01       	movw	r20, r14
    3ffe:	96 01       	movw	r18, r12
    4000:	0e 94 05 28 	call	0x500a	; 0x500a <__divsf3>
    4004:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    4008:	6d 87       	std	Y+13, r22	; 0x0d
    400a:	7e 87       	std	Y+14, r23	; 0x0e
    400c:	8f 87       	std	Y+15, r24	; 0x0f
    400e:	98 8b       	std	Y+16, r25	; 0x10
    4010:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    4014:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    4018:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    401c:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    4020:	60 91 88 21 	lds	r22, 0x2188	; 0x802188 <mpu9250_twi_data+0xb>
    4024:	70 e0       	ldi	r23, 0x00	; 0
    4026:	76 2f       	mov	r23, r22
    4028:	66 27       	eor	r22, r22
    402a:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <mpu9250_twi_data+0xc>
    402e:	68 0f       	add	r22, r24
    4030:	71 1d       	adc	r23, r1
    4032:	07 2e       	mov	r0, r23
    4034:	00 0c       	add	r0, r0
    4036:	88 0b       	sbc	r24, r24
    4038:	99 0b       	sbc	r25, r25
    403a:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    403e:	a7 01       	movw	r20, r14
    4040:	96 01       	movw	r18, r12
    4042:	e3 d7       	rcall	.+4038   	; 0x500a <__divsf3>
    4044:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    4048:	69 8b       	std	Y+17, r22	; 0x11
    404a:	7a 8b       	std	Y+18, r23	; 0x12
    404c:	8b 8b       	std	Y+19, r24	; 0x13
    404e:	9c 8b       	std	Y+20, r25	; 0x14
    4050:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    4054:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    4058:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    405c:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    4060:	60 91 8a 21 	lds	r22, 0x218A	; 0x80218a <mpu9250_twi_data+0xd>
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	76 2f       	mov	r23, r22
    4068:	66 27       	eor	r22, r22
    406a:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <mpu9250_twi_data+0xe>
    406e:	68 0f       	add	r22, r24
    4070:	71 1d       	adc	r23, r1
    4072:	07 2e       	mov	r0, r23
    4074:	00 0c       	add	r0, r0
    4076:	88 0b       	sbc	r24, r24
    4078:	99 0b       	sbc	r25, r25
    407a:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    407e:	a7 01       	movw	r20, r14
    4080:	96 01       	movw	r18, r12
    4082:	c3 d7       	rcall	.+3974   	; 0x500a <__divsf3>
    4084:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    4088:	6d 8b       	std	Y+21, r22	; 0x15
    408a:	7e 8b       	std	Y+22, r23	; 0x16
    408c:	8f 8b       	std	Y+23, r24	; 0x17
    408e:	98 8f       	std	Y+24, r25	; 0x18
    4090:	c0 90 73 21 	lds	r12, 0x2173	; 0x802173 <ASAX>
    4094:	d0 90 74 21 	lds	r13, 0x2174	; 0x802174 <ASAX+0x1>
    4098:	e0 90 75 21 	lds	r14, 0x2175	; 0x802175 <ASAX+0x2>
    409c:	f0 90 76 21 	lds	r15, 0x2176	; 0x802176 <ASAX+0x3>
    40a0:	60 91 8d 21 	lds	r22, 0x218D	; 0x80218d <mpu9250_twi_data+0x10>
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	76 2f       	mov	r23, r22
    40a8:	66 27       	eor	r22, r22
    40aa:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <mpu9250_twi_data+0xf>
    40ae:	68 0f       	add	r22, r24
    40b0:	71 1d       	adc	r23, r1
    40b2:	07 2e       	mov	r0, r23
    40b4:	00 0c       	add	r0, r0
    40b6:	88 0b       	sbc	r24, r24
    40b8:	99 0b       	sbc	r25, r25
    40ba:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    40be:	a7 01       	movw	r20, r14
    40c0:	96 01       	movw	r18, r12
    40c2:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 ec       	ldi	r20, 0xC0	; 192
    40cc:	50 e4       	ldi	r21, 0x40	; 64
    40ce:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    40d2:	0e 94 6d 28 	call	0x50da	; 0x50da <__fixsfsi>
    40d6:	2b 01       	movw	r4, r22
    40d8:	3c 01       	movw	r6, r24
    40da:	c0 90 6f 21 	lds	r12, 0x216F	; 0x80216f <ASAY>
    40de:	d0 90 70 21 	lds	r13, 0x2170	; 0x802170 <ASAY+0x1>
    40e2:	e0 90 71 21 	lds	r14, 0x2171	; 0x802171 <ASAY+0x2>
    40e6:	f0 90 72 21 	lds	r15, 0x2172	; 0x802172 <ASAY+0x3>
    40ea:	60 91 8f 21 	lds	r22, 0x218F	; 0x80218f <mpu9250_twi_data+0x12>
    40ee:	70 e0       	ldi	r23, 0x00	; 0
    40f0:	76 2f       	mov	r23, r22
    40f2:	66 27       	eor	r22, r22
    40f4:	80 91 8e 21 	lds	r24, 0x218E	; 0x80218e <mpu9250_twi_data+0x11>
    40f8:	68 0f       	add	r22, r24
    40fa:	71 1d       	adc	r23, r1
    40fc:	07 2e       	mov	r0, r23
    40fe:	00 0c       	add	r0, r0
    4100:	88 0b       	sbc	r24, r24
    4102:	99 0b       	sbc	r25, r25
    4104:	0e 94 a0 28 	call	0x5140	; 0x5140 <__floatsisf>
    4108:	a7 01       	movw	r20, r14
    410a:	96 01       	movw	r18, r12
    410c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 ec       	ldi	r20, 0xC0	; 192
    4116:	50 e4       	ldi	r21, 0x40	; 64
    4118:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    411c:	de d7       	rcall	.+4028   	; 0x50da <__fixsfsi>
    411e:	4b 01       	movw	r8, r22
    4120:	5c 01       	movw	r10, r24
    4122:	c0 90 6b 21 	lds	r12, 0x216B	; 0x80216b <ASAZ>
    4126:	d0 90 6c 21 	lds	r13, 0x216C	; 0x80216c <ASAZ+0x1>
    412a:	e0 90 6d 21 	lds	r14, 0x216D	; 0x80216d <ASAZ+0x2>
    412e:	f0 90 6e 21 	lds	r15, 0x216E	; 0x80216e <ASAZ+0x3>
    4132:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <mpu9250_twi_data+0x14>
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	76 2f       	mov	r23, r22
    413a:	66 27       	eor	r22, r22
    413c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <mpu9250_twi_data+0x13>
    4140:	68 0f       	add	r22, r24
    4142:	71 1d       	adc	r23, r1
    4144:	07 2e       	mov	r0, r23
    4146:	00 0c       	add	r0, r0
    4148:	88 0b       	sbc	r24, r24
    414a:	99 0b       	sbc	r25, r25
    414c:	f9 d7       	rcall	.+4082   	; 0x5140 <__floatsisf>
    414e:	a7 01       	movw	r20, r14
    4150:	96 01       	movw	r18, r12
    4152:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 ec       	ldi	r20, 0xC0	; 192
    415c:	50 e4       	ldi	r21, 0x40	; 64
    415e:	0e 94 ac 29 	call	0x5358	; 0x5358 <__mulsf3>
    4162:	bb d7       	rcall	.+3958   	; 0x50da <__fixsfsi>
    4164:	6b 01       	movw	r12, r22
    4166:	7c 01       	movw	r14, r24
    4168:	60 91 84 21 	lds	r22, 0x2184	; 0x802184 <mpu9250_twi_data+0x7>
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	76 2f       	mov	r23, r22
    4170:	66 27       	eor	r22, r22
    4172:	80 91 85 21 	lds	r24, 0x2185	; 0x802185 <mpu9250_twi_data+0x8>
    4176:	68 0f       	add	r22, r24
    4178:	71 1d       	adc	r23, r1
    417a:	07 2e       	mov	r0, r23
    417c:	00 0c       	add	r0, r0
    417e:	88 0b       	sbc	r24, r24
    4180:	99 0b       	sbc	r25, r25
    4182:	de d7       	rcall	.+4028   	; 0x5140 <__floatsisf>
    4184:	23 e4       	ldi	r18, 0x43	; 67
    4186:	3d ea       	ldi	r19, 0xAD	; 173
    4188:	45 e5       	ldi	r20, 0x55	; 85
    418a:	50 e4       	ldi	r21, 0x40	; 64
    418c:	3e d7       	rcall	.+3708   	; 0x500a <__divsf3>
    418e:	a5 d7       	rcall	.+3914   	; 0x50da <__fixsfsi>
    4190:	6c 5c       	subi	r22, 0xCC	; 204
    4192:	77 4f       	sbci	r23, 0xF7	; 247
    4194:	ed e7       	ldi	r30, 0x7D	; 125
    4196:	f1 e2       	ldi	r31, 0x21	; 33
    4198:	80 81       	ld	r24, Z
    419a:	f8 01       	movw	r30, r16
    419c:	80 83       	st	Z, r24
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	81 83       	std	Z+1, r24	; 0x01
    41a4:	92 83       	std	Z+2, r25	; 0x02
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	9e 81       	ldd	r25, Y+6	; 0x06
    41aa:	83 83       	std	Z+3, r24	; 0x03
    41ac:	94 83       	std	Z+4, r25	; 0x04
    41ae:	89 85       	ldd	r24, Y+9	; 0x09
    41b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b2:	85 83       	std	Z+5, r24	; 0x05
    41b4:	96 83       	std	Z+6, r25	; 0x06
    41b6:	67 83       	std	Z+7, r22	; 0x07
    41b8:	70 87       	std	Z+8, r23	; 0x08
    41ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    41bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41be:	81 87       	std	Z+9, r24	; 0x09
    41c0:	92 87       	std	Z+10, r25	; 0x0a
    41c2:	89 89       	ldd	r24, Y+17	; 0x11
    41c4:	9a 89       	ldd	r25, Y+18	; 0x12
    41c6:	83 87       	std	Z+11, r24	; 0x0b
    41c8:	94 87       	std	Z+12, r25	; 0x0c
    41ca:	8d 89       	ldd	r24, Y+21	; 0x15
    41cc:	9e 89       	ldd	r25, Y+22	; 0x16
    41ce:	85 87       	std	Z+13, r24	; 0x0d
    41d0:	96 87       	std	Z+14, r25	; 0x0e
    41d2:	47 86       	std	Z+15, r4	; 0x0f
    41d4:	50 8a       	std	Z+16, r5	; 0x10
    41d6:	81 8a       	std	Z+17, r8	; 0x11
    41d8:	92 8a       	std	Z+18, r9	; 0x12
    41da:	c3 8a       	std	Z+19, r12	; 0x13
    41dc:	d4 8a       	std	Z+20, r13	; 0x14
    41de:	c8 01       	movw	r24, r16
    41e0:	68 96       	adiw	r28, 0x18	; 24
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	de bf       	out	0x3e, r29	; 62
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	ef 90       	pop	r14
    41f2:	df 90       	pop	r13
    41f4:	cf 90       	pop	r12
    41f6:	bf 90       	pop	r11
    41f8:	af 90       	pop	r10
    41fa:	9f 90       	pop	r9
    41fc:	8f 90       	pop	r8
    41fe:	7f 90       	pop	r7
    4200:	6f 90       	pop	r6
    4202:	5f 90       	pop	r5
    4204:	4f 90       	pop	r4
    4206:	08 95       	ret

00004208 <__vector_64>:

ISR(MPU9250_INT_vect)
{
    4208:	1f 92       	push	r1
    420a:	0f 92       	push	r0
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	0f 92       	push	r0
    4210:	11 24       	eor	r1, r1
    4212:	8f 93       	push	r24
    4214:	9f 93       	push	r25
    4216:	af 93       	push	r26
    4218:	bf 93       	push	r27
	//printf("jkeavrf\n");
	data_rdy_flag = 1;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <data_rdy_flag>
	timerflag = 1;
    4220:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <timerflag>
	time++;
    4224:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <time>
    4228:	90 91 78 21 	lds	r25, 0x2178	; 0x802178 <time+0x1>
    422c:	a0 91 79 21 	lds	r26, 0x2179	; 0x802179 <time+0x2>
    4230:	b0 91 7a 21 	lds	r27, 0x217A	; 0x80217a <time+0x3>
    4234:	01 96       	adiw	r24, 0x01	; 1
    4236:	a1 1d       	adc	r26, r1
    4238:	b1 1d       	adc	r27, r1
    423a:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <time>
    423e:	90 93 78 21 	sts	0x2178, r25	; 0x802178 <time+0x1>
    4242:	a0 93 79 21 	sts	0x2179, r26	; 0x802179 <time+0x2>
    4246:	b0 93 7a 21 	sts	0x217A, r27	; 0x80217a <time+0x3>
}
    424a:	bf 91       	pop	r27
    424c:	af 91       	pop	r26
    424e:	9f 91       	pop	r25
    4250:	8f 91       	pop	r24
    4252:	0f 90       	pop	r0
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	0f 90       	pop	r0
    4258:	1f 90       	pop	r1
    425a:	18 95       	reti

0000425c <__portable_avr_delay_cycles>:
{
	uint32_t result = ((uint32_t)spi_read(targetspi)) << 16;
	result += (uint32_t)spi_read(targetspi) << 8;
	result += (uint32_t)spi_read(targetspi);
	return (uint32_t)result;
}
    425c:	04 c0       	rjmp	.+8      	; 0x4266 <__portable_avr_delay_cycles+0xa>
    425e:	61 50       	subi	r22, 0x01	; 1
    4260:	71 09       	sbc	r23, r1
    4262:	81 09       	sbc	r24, r1
    4264:	91 09       	sbc	r25, r1
    4266:	61 15       	cp	r22, r1
    4268:	71 05       	cpc	r23, r1
    426a:	81 05       	cpc	r24, r1
    426c:	91 05       	cpc	r25, r1
    426e:	b9 f7       	brne	.-18     	; 0x425e <__portable_avr_delay_cycles+0x2>
    4270:	08 95       	ret

00004272 <read16>:
    4272:	0f 93       	push	r16
    4274:	1f 93       	push	r17
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	8c 01       	movw	r16, r24
    427c:	72 d1       	rcall	.+740    	; 0x4562 <spi_read>
    427e:	c8 2f       	mov	r28, r24
    4280:	d0 e0       	ldi	r29, 0x00	; 0
    4282:	dc 2f       	mov	r29, r28
    4284:	cc 27       	eor	r28, r28
    4286:	c8 01       	movw	r24, r16
    4288:	6c d1       	rcall	.+728    	; 0x4562 <spi_read>
    428a:	9e 01       	movw	r18, r28
    428c:	28 0f       	add	r18, r24
    428e:	31 1d       	adc	r19, r1
    4290:	c9 01       	movw	r24, r18
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <pressure_reset>:

void pressure_reset(MS5607* sensor)
{
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	ec 01       	movw	r28, r24
	spi_select(sensor->ss_pin);
    42a2:	88 81       	ld	r24, Y
    42a4:	8b d1       	rcall	.+790    	; 0x45bc <spi_select>
	spi_write(MS5607_SPI, 0x1E);
    42a6:	6e e1       	ldi	r22, 0x1E	; 30
    42a8:	80 ec       	ldi	r24, 0xC0	; 192
    42aa:	99 e0       	ldi	r25, 0x09	; 9
    42ac:	70 d1       	rcall	.+736    	; 0x458e <spi_write>
	spi_deselect(sensor->ss_pin);
    42ae:	88 81       	ld	r24, Y
    42b0:	a5 d1       	rcall	.+842    	; 0x45fc <spi_deselect>
    42b2:	63 e8       	ldi	r22, 0x83	; 131
	delay_ms(5);
    42b4:	76 e0       	ldi	r23, 0x06	; 6
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	d0 df       	rcall	.-96     	; 0x425c <__portable_avr_delay_cycles>
    42bc:	df 91       	pop	r29
}
    42be:	cf 91       	pop	r28
    42c0:	08 95       	ret

000042c2 <pressure_init>:
    42c2:	cf 93       	push	r28

void pressure_init(MS5607* sensor)
{
    42c4:	df 93       	push	r29
    42c6:	ec 01       	movw	r28, r24
	pressure_reset(sensor);
    42c8:	e9 df       	rcall	.-46     	; 0x429c <pressure_reset>
	
	spi_select(sensor->ss_pin);
    42ca:	88 81       	ld	r24, Y
    42cc:	77 d1       	rcall	.+750    	; 0x45bc <spi_select>
	spi_write(MS5607_SPI, 0xA2);
    42ce:	62 ea       	ldi	r22, 0xA2	; 162
    42d0:	80 ec       	ldi	r24, 0xC0	; 192
    42d2:	99 e0       	ldi	r25, 0x09	; 9
    42d4:	5c d1       	rcall	.+696    	; 0x458e <spi_write>
	sensor->C1 = read16(MS5607_SPI);
    42d6:	80 ec       	ldi	r24, 0xC0	; 192
    42d8:	99 e0       	ldi	r25, 0x09	; 9
    42da:	cb df       	rcall	.-106    	; 0x4272 <read16>
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	9a 83       	std	Y+2, r25	; 0x02
	spi_deselect(sensor->ss_pin);
    42e0:	88 81       	ld	r24, Y
    42e2:	8c d1       	rcall	.+792    	; 0x45fc <spi_deselect>
    42e4:	88 81       	ld	r24, Y
	
	spi_select(sensor->ss_pin);
    42e6:	6a d1       	rcall	.+724    	; 0x45bc <spi_select>
    42e8:	64 ea       	ldi	r22, 0xA4	; 164
	spi_write(MS5607_SPI, 0xA4);
    42ea:	80 ec       	ldi	r24, 0xC0	; 192
    42ec:	99 e0       	ldi	r25, 0x09	; 9
    42ee:	4f d1       	rcall	.+670    	; 0x458e <spi_write>
    42f0:	80 ec       	ldi	r24, 0xC0	; 192
	sensor->C2 = read16(MS5607_SPI);
    42f2:	99 e0       	ldi	r25, 0x09	; 9
    42f4:	be df       	rcall	.-132    	; 0x4272 <read16>
    42f6:	8b 83       	std	Y+3, r24	; 0x03
    42f8:	9c 83       	std	Y+4, r25	; 0x04
    42fa:	88 81       	ld	r24, Y
	spi_deselect(sensor->ss_pin);
    42fc:	7f d1       	rcall	.+766    	; 0x45fc <spi_deselect>
    42fe:	88 81       	ld	r24, Y
	
	spi_select(sensor->ss_pin);
    4300:	5d d1       	rcall	.+698    	; 0x45bc <spi_select>
    4302:	66 ea       	ldi	r22, 0xA6	; 166
    4304:	80 ec       	ldi	r24, 0xC0	; 192
	spi_write(MS5607_SPI, 0xA6);
    4306:	99 e0       	ldi	r25, 0x09	; 9
    4308:	42 d1       	rcall	.+644    	; 0x458e <spi_write>
    430a:	80 ec       	ldi	r24, 0xC0	; 192
	sensor->C3 = read16(MS5607_SPI);
    430c:	99 e0       	ldi	r25, 0x09	; 9
    430e:	b1 df       	rcall	.-158    	; 0x4272 <read16>
    4310:	8d 83       	std	Y+5, r24	; 0x05
    4312:	9e 83       	std	Y+6, r25	; 0x06
	spi_deselect(sensor->ss_pin);
    4314:	88 81       	ld	r24, Y
    4316:	72 d1       	rcall	.+740    	; 0x45fc <spi_deselect>
	
	spi_select(sensor->ss_pin);
    4318:	88 81       	ld	r24, Y
    431a:	50 d1       	rcall	.+672    	; 0x45bc <spi_select>
	spi_write(MS5607_SPI, 0xA8);
    431c:	68 ea       	ldi	r22, 0xA8	; 168
    431e:	80 ec       	ldi	r24, 0xC0	; 192
    4320:	99 e0       	ldi	r25, 0x09	; 9
    4322:	35 d1       	rcall	.+618    	; 0x458e <spi_write>
	sensor->C4 = read16(MS5607_SPI);
    4324:	80 ec       	ldi	r24, 0xC0	; 192
    4326:	99 e0       	ldi	r25, 0x09	; 9
    4328:	a4 df       	rcall	.-184    	; 0x4272 <read16>
    432a:	8f 83       	std	Y+7, r24	; 0x07
	spi_deselect(sensor->ss_pin);
    432c:	98 87       	std	Y+8, r25	; 0x08
    432e:	88 81       	ld	r24, Y
	
	spi_select(sensor->ss_pin);
    4330:	65 d1       	rcall	.+714    	; 0x45fc <spi_deselect>
    4332:	88 81       	ld	r24, Y
	spi_write(MS5607_SPI, 0xAA);
    4334:	43 d1       	rcall	.+646    	; 0x45bc <spi_select>
    4336:	6a ea       	ldi	r22, 0xAA	; 170
    4338:	80 ec       	ldi	r24, 0xC0	; 192
    433a:	99 e0       	ldi	r25, 0x09	; 9
	sensor->C5 = read16(MS5607_SPI);
    433c:	28 d1       	rcall	.+592    	; 0x458e <spi_write>
    433e:	80 ec       	ldi	r24, 0xC0	; 192
    4340:	99 e0       	ldi	r25, 0x09	; 9
    4342:	97 df       	rcall	.-210    	; 0x4272 <read16>
    4344:	89 87       	std	Y+9, r24	; 0x09
	spi_deselect(sensor->ss_pin);
    4346:	9a 87       	std	Y+10, r25	; 0x0a
    4348:	88 81       	ld	r24, Y
    434a:	58 d1       	rcall	.+688    	; 0x45fc <spi_deselect>
	
	spi_select(sensor->ss_pin);
    434c:	88 81       	ld	r24, Y
    434e:	36 d1       	rcall	.+620    	; 0x45bc <spi_select>
    4350:	6c ea       	ldi	r22, 0xAC	; 172
	spi_write(MS5607_SPI, 0xAC);
    4352:	80 ec       	ldi	r24, 0xC0	; 192
    4354:	99 e0       	ldi	r25, 0x09	; 9
    4356:	1b d1       	rcall	.+566    	; 0x458e <spi_write>
    4358:	80 ec       	ldi	r24, 0xC0	; 192
    435a:	99 e0       	ldi	r25, 0x09	; 9
	sensor->C6 = read16(MS5607_SPI);
    435c:	8a df       	rcall	.-236    	; 0x4272 <read16>
    435e:	8b 87       	std	Y+11, r24	; 0x0b
    4360:	9c 87       	std	Y+12, r25	; 0x0c
    4362:	88 81       	ld	r24, Y
    4364:	4b d1       	rcall	.+662    	; 0x45fc <spi_deselect>
    4366:	df 91       	pop	r29
	spi_deselect(sensor->ss_pin);
    4368:	cf 91       	pop	r28
    436a:	08 95       	ret

0000436c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    436c:	04 c0       	rjmp	.+8      	; 0x4376 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    436e:	61 50       	subi	r22, 0x01	; 1
    4370:	71 09       	sbc	r23, r1
    4372:	81 09       	sbc	r24, r1
    4374:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4376:	61 15       	cp	r22, r1
    4378:	71 05       	cpc	r23, r1
    437a:	81 05       	cpc	r24, r1
    437c:	91 05       	cpc	r25, r1
    437e:	b9 f7       	brne	.-18     	; 0x436e <__portable_avr_delay_cycles+0x2>
    4380:	08 95       	ret

00004382 <spi_init>:

#include "drivers/SPI.h"
#include <asf.h>

void spi_init(SPI_t* targetspi, PORT_t* port)
{
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	ec 01       	movw	r28, r24
    438c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    438e:	00 97       	sbiw	r24, 0x00	; 0
    4390:	09 f4       	brne	.+2      	; 0x4394 <spi_init+0x12>
    4392:	d6 c0       	rjmp	.+428    	; 0x4540 <spi_init+0x1be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    4394:	80 3c       	cpi	r24, 0xC0	; 192
    4396:	91 05       	cpc	r25, r1
    4398:	29 f4       	brne	.+10     	; 0x43a4 <spi_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    439a:	60 e1       	ldi	r22, 0x10	; 16
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43a2:	ce c0       	rjmp	.+412    	; 0x4540 <spi_init+0x1be>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    43a4:	c1 15       	cp	r28, r1
    43a6:	84 e0       	ldi	r24, 0x04	; 4
    43a8:	d8 07       	cpc	r29, r24
    43aa:	29 f4       	brne	.+10     	; 0x43b6 <spi_init+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    43ac:	64 e0       	ldi	r22, 0x04	; 4
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43b4:	c5 c0       	rjmp	.+394    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    43b6:	c0 38       	cpi	r28, 0x80	; 128
    43b8:	e1 e0       	ldi	r30, 0x01	; 1
    43ba:	de 07       	cpc	r29, r30
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <spi_init+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    43be:	62 e0       	ldi	r22, 0x02	; 2
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43c6:	bc c0       	rjmp	.+376    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    43c8:	c1 15       	cp	r28, r1
    43ca:	f1 e0       	ldi	r31, 0x01	; 1
    43cc:	df 07       	cpc	r29, r31
    43ce:	29 f4       	brne	.+10     	; 0x43da <spi_init+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    43d0:	61 e0       	ldi	r22, 0x01	; 1
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43d8:	b3 c0       	rjmp	.+358    	; 0x4540 <spi_init+0x1be>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    43da:	c0 38       	cpi	r28, 0x80	; 128
    43dc:	83 e0       	ldi	r24, 0x03	; 3
    43de:	d8 07       	cpc	r29, r24
    43e0:	29 f4       	brne	.+10     	; 0x43ec <spi_init+0x6a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    43e2:	61 e0       	ldi	r22, 0x01	; 1
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43ea:	aa c0       	rjmp	.+340    	; 0x4540 <spi_init+0x1be>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    43ec:	c1 15       	cp	r28, r1
    43ee:	e2 e0       	ldi	r30, 0x02	; 2
    43f0:	de 07       	cpc	r29, r30
    43f2:	29 f4       	brne	.+10     	; 0x43fe <spi_init+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    43f4:	62 e0       	ldi	r22, 0x02	; 2
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    43fc:	a1 c0       	rjmp	.+322    	; 0x4540 <spi_init+0x1be>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    43fe:	c0 32       	cpi	r28, 0x20	; 32
    4400:	f3 e0       	ldi	r31, 0x03	; 3
    4402:	df 07       	cpc	r29, r31
    4404:	29 f4       	brne	.+10     	; 0x4410 <spi_init+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    4406:	64 e0       	ldi	r22, 0x04	; 4
    4408:	82 e0       	ldi	r24, 0x02	; 2
    440a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    440e:	98 c0       	rjmp	.+304    	; 0x4540 <spi_init+0x1be>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    4410:	c1 15       	cp	r28, r1
    4412:	88 e0       	ldi	r24, 0x08	; 8
    4414:	d8 07       	cpc	r29, r24
    4416:	29 f4       	brne	.+10     	; 0x4422 <spi_init+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    4418:	61 e0       	ldi	r22, 0x01	; 1
    441a:	83 e0       	ldi	r24, 0x03	; 3
    441c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    4420:	8f c0       	rjmp	.+286    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    4422:	c1 15       	cp	r28, r1
    4424:	e9 e0       	ldi	r30, 0x09	; 9
    4426:	de 07       	cpc	r29, r30
    4428:	29 f4       	brne	.+10     	; 0x4434 <spi_init+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    442a:	61 e0       	ldi	r22, 0x01	; 1
    442c:	84 e0       	ldi	r24, 0x04	; 4
    442e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    4432:	86 c0       	rjmp	.+268    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    4434:	c1 15       	cp	r28, r1
    4436:	fa e0       	ldi	r31, 0x0A	; 10
    4438:	df 07       	cpc	r29, r31
    443a:	29 f4       	brne	.+10     	; 0x4446 <spi_init+0xc4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    443c:	61 e0       	ldi	r22, 0x01	; 1
    443e:	85 e0       	ldi	r24, 0x05	; 5
    4440:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    4444:	7d c0       	rjmp	.+250    	; 0x4540 <spi_init+0x1be>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    4446:	c0 34       	cpi	r28, 0x40	; 64
    4448:	88 e0       	ldi	r24, 0x08	; 8
    444a:	d8 07       	cpc	r29, r24
    444c:	29 f4       	brne	.+10     	; 0x4458 <spi_init+0xd6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    444e:	62 e0       	ldi	r22, 0x02	; 2
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    4456:	74 c0       	rjmp	.+232    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    4458:	c0 34       	cpi	r28, 0x40	; 64
    445a:	e9 e0       	ldi	r30, 0x09	; 9
    445c:	de 07       	cpc	r29, r30
    445e:	29 f4       	brne	.+10     	; 0x446a <spi_init+0xe8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    4460:	62 e0       	ldi	r22, 0x02	; 2
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    4468:	6b c0       	rjmp	.+214    	; 0x4540 <spi_init+0x1be>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    446a:	c0 39       	cpi	r28, 0x90	; 144
    446c:	f8 e0       	ldi	r31, 0x08	; 8
    446e:	df 07       	cpc	r29, r31
    4470:	29 f4       	brne	.+10     	; 0x447c <spi_init+0xfa>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4472:	64 e0       	ldi	r22, 0x04	; 4
    4474:	83 e0       	ldi	r24, 0x03	; 3
    4476:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    447a:	62 c0       	rjmp	.+196    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    447c:	c0 39       	cpi	r28, 0x90	; 144
    447e:	89 e0       	ldi	r24, 0x09	; 9
    4480:	d8 07       	cpc	r29, r24
    4482:	29 f4       	brne	.+10     	; 0x448e <spi_init+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4484:	64 e0       	ldi	r22, 0x04	; 4
    4486:	84 e0       	ldi	r24, 0x04	; 4
    4488:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    448c:	59 c0       	rjmp	.+178    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    448e:	c0 39       	cpi	r28, 0x90	; 144
    4490:	ea e0       	ldi	r30, 0x0A	; 10
    4492:	de 07       	cpc	r29, r30
    4494:	29 f4       	brne	.+10     	; 0x44a0 <spi_init+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    4496:	64 e0       	ldi	r22, 0x04	; 4
    4498:	85 e0       	ldi	r24, 0x05	; 5
    449a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    449e:	50 c0       	rjmp	.+160    	; 0x4540 <spi_init+0x1be>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    44a0:	c0 3c       	cpi	r28, 0xC0	; 192
    44a2:	f8 e0       	ldi	r31, 0x08	; 8
    44a4:	df 07       	cpc	r29, r31
    44a6:	29 f4       	brne	.+10     	; 0x44b2 <spi_init+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    44a8:	68 e0       	ldi	r22, 0x08	; 8
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    44b0:	47 c0       	rjmp	.+142    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    44b2:	c0 3c       	cpi	r28, 0xC0	; 192
    44b4:	89 e0       	ldi	r24, 0x09	; 9
    44b6:	d8 07       	cpc	r29, r24
    44b8:	29 f4       	brne	.+10     	; 0x44c4 <spi_init+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    44ba:	68 e0       	ldi	r22, 0x08	; 8
    44bc:	84 e0       	ldi	r24, 0x04	; 4
    44be:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    44c2:	3e c0       	rjmp	.+124    	; 0x4540 <spi_init+0x1be>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    44c4:	c0 3a       	cpi	r28, 0xA0	; 160
    44c6:	e8 e0       	ldi	r30, 0x08	; 8
    44c8:	de 07       	cpc	r29, r30
    44ca:	29 f4       	brne	.+10     	; 0x44d6 <spi_init+0x154>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    44cc:	60 e1       	ldi	r22, 0x10	; 16
    44ce:	83 e0       	ldi	r24, 0x03	; 3
    44d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    44d4:	35 c0       	rjmp	.+106    	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    44d6:	c0 3a       	cpi	r28, 0xA0	; 160
    44d8:	f9 e0       	ldi	r31, 0x09	; 9
    44da:	df 07       	cpc	r29, r31
    44dc:	29 f4       	brne	.+10     	; 0x44e8 <spi_init+0x166>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    44de:	60 e1       	ldi	r22, 0x10	; 16
    44e0:	84 e0       	ldi	r24, 0x04	; 4
    44e2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    44e6:	2c c0       	rjmp	.+88     	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    44e8:	c0 3a       	cpi	r28, 0xA0	; 160
    44ea:	8a e0       	ldi	r24, 0x0A	; 10
    44ec:	d8 07       	cpc	r29, r24
    44ee:	29 f4       	brne	.+10     	; 0x44fa <spi_init+0x178>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    44f0:	60 e1       	ldi	r22, 0x10	; 16
    44f2:	85 e0       	ldi	r24, 0x05	; 5
    44f4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    44f8:	23 c0       	rjmp	.+70     	; 0x4540 <spi_init+0x1be>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    44fa:	c0 3b       	cpi	r28, 0xB0	; 176
    44fc:	e8 e0       	ldi	r30, 0x08	; 8
    44fe:	de 07       	cpc	r29, r30
    4500:	29 f4       	brne	.+10     	; 0x450c <spi_init+0x18a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    4502:	60 e2       	ldi	r22, 0x20	; 32
    4504:	83 e0       	ldi	r24, 0x03	; 3
    4506:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    450a:	1a c0       	rjmp	.+52     	; 0x4540 <spi_init+0x1be>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    450c:	c0 3b       	cpi	r28, 0xB0	; 176
    450e:	f9 e0       	ldi	r31, 0x09	; 9
    4510:	df 07       	cpc	r29, r31
    4512:	29 f4       	brne	.+10     	; 0x451e <spi_init+0x19c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    4514:	60 e2       	ldi	r22, 0x20	; 32
    4516:	84 e0       	ldi	r24, 0x04	; 4
    4518:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    451c:	11 c0       	rjmp	.+34     	; 0x4540 <spi_init+0x1be>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    451e:	c0 38       	cpi	r28, 0x80	; 128
    4520:	84 e0       	ldi	r24, 0x04	; 4
    4522:	d8 07       	cpc	r29, r24
    4524:	29 f4       	brne	.+10     	; 0x4530 <spi_init+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    4526:	60 e4       	ldi	r22, 0x40	; 64
    4528:	83 e0       	ldi	r24, 0x03	; 3
    452a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    452e:	08 c0       	rjmp	.+16     	; 0x4540 <spi_init+0x1be>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    4530:	c0 3a       	cpi	r28, 0xA0	; 160
    4532:	e4 e0       	ldi	r30, 0x04	; 4
    4534:	de 07       	cpc	r29, r30
    4536:	21 f4       	brne	.+8      	; 0x4540 <spi_init+0x1be>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    4538:	60 e4       	ldi	r22, 0x40	; 64
    453a:	85 e0       	ldi	r24, 0x05	; 5
    453c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(targetspi);	//Enable peripheral clock
	port->DIRSET |= 0b10110000;	//Initialize 
    4540:	f8 01       	movw	r30, r16
    4542:	81 81       	ldd	r24, Z+1	; 0x01
    4544:	80 6b       	ori	r24, 0xB0	; 176
    4546:	81 83       	std	Z+1, r24	; 0x01
	port->DIR &= 0b10111111;
    4548:	80 81       	ld	r24, Z
    454a:	8f 7b       	andi	r24, 0xBF	; 191
    454c:	80 83       	st	Z, r24
	port->OUT |= 0b10110000;
    454e:	84 81       	ldd	r24, Z+4	; 0x04
    4550:	80 6b       	ori	r24, 0xB0	; 176
    4552:	84 83       	std	Z+4, r24	; 0x04
	targetspi->CTRL = 0b11010000;	//16 MHz
    4554:	80 ed       	ldi	r24, 0xD0	; 208
    4556:	88 83       	st	Y, r24
}
    4558:	df 91       	pop	r29
    455a:	cf 91       	pop	r28
    455c:	1f 91       	pop	r17
    455e:	0f 91       	pop	r16
    4560:	08 95       	ret

00004562 <spi_read>:

uint8_t spi_read(SPI_t* targetspi)
{
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	ec 01       	movw	r28, r24
	delay_ms(1);
    4568:	6e e4       	ldi	r22, 0x4E	; 78
    456a:	71 e0       	ldi	r23, 0x01	; 1
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	fd de       	rcall	.-518    	; 0x436c <__portable_avr_delay_cycles>
	targetspi->DATA = 0xFF;
    4572:	8f ef       	ldi	r24, 0xFF	; 255
    4574:	8b 83       	std	Y+3, r24	; 0x03
	while(!(targetspi->STATUS >> 7));
    4576:	8a 81       	ldd	r24, Y+2	; 0x02
    4578:	88 23       	and	r24, r24
    457a:	ec f7       	brge	.-6      	; 0x4576 <spi_read+0x14>
	delay_ms(1);
    457c:	6e e4       	ldi	r22, 0x4E	; 78
    457e:	71 e0       	ldi	r23, 0x01	; 1
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	f3 de       	rcall	.-538    	; 0x436c <__portable_avr_delay_cycles>
	//printf("spi_read:%u\n",targetspi->DATA);	//Actually reading in all 1's. Next use this code on an xplained board and see if it's functional or if it's the sensor
	return targetspi->DATA;
    4586:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	08 95       	ret

0000458e <spi_write>:

void spi_write(SPI_t* targetspi, uint8_t data)
{
    458e:	1f 93       	push	r17
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	ec 01       	movw	r28, r24
    4596:	16 2f       	mov	r17, r22
	delay_ms(1);
    4598:	6e e4       	ldi	r22, 0x4E	; 78
    459a:	71 e0       	ldi	r23, 0x01	; 1
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	e5 de       	rcall	.-566    	; 0x436c <__portable_avr_delay_cycles>
	targetspi->DATA = data;
    45a2:	1b 83       	std	Y+3, r17	; 0x03
	while(!(targetspi->STATUS >> 7));
    45a4:	8a 81       	ldd	r24, Y+2	; 0x02
    45a6:	88 23       	and	r24, r24
    45a8:	ec f7       	brge	.-6      	; 0x45a4 <spi_write+0x16>
	delay_ms(1);
    45aa:	6e e4       	ldi	r22, 0x4E	; 78
    45ac:	71 e0       	ldi	r23, 0x01	; 1
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	dc de       	rcall	.-584    	; 0x436c <__portable_avr_delay_cycles>
}
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	08 95       	ret

000045bc <spi_select>:

void spi_select(ioport_pin_t pin)
{
    45bc:	cf 93       	push	r28
    45be:	c8 2f       	mov	r28, r24
	delay_ms(1);
    45c0:	6e e4       	ldi	r22, 0x4E	; 78
    45c2:	71 e0       	ldi	r23, 0x01	; 1
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	d1 de       	rcall	.-606    	; 0x436c <__portable_avr_delay_cycles>
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    45ca:	ec 2f       	mov	r30, r28
    45cc:	e6 95       	lsr	r30
    45ce:	e6 95       	lsr	r30
    45d0:	e6 95       	lsr	r30
    45d2:	80 e2       	ldi	r24, 0x20	; 32
    45d4:	e8 9f       	mul	r30, r24
    45d6:	f0 01       	movw	r30, r0
    45d8:	11 24       	eor	r1, r1
    45da:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    45dc:	c7 70       	andi	r28, 0x07	; 7
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <spi_select+0x2c>
    45e4:	88 0f       	add	r24, r24
    45e6:	99 1f       	adc	r25, r25
    45e8:	ca 95       	dec	r28
    45ea:	e2 f7       	brpl	.-8      	; 0x45e4 <spi_select+0x28>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    45ec:	86 83       	std	Z+6, r24	; 0x06
	ioport_set_pin_low(pin);
	delay_ms(1);
    45ee:	6e e4       	ldi	r22, 0x4E	; 78
    45f0:	71 e0       	ldi	r23, 0x01	; 1
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	ba de       	rcall	.-652    	; 0x436c <__portable_avr_delay_cycles>
}
    45f8:	cf 91       	pop	r28
    45fa:	08 95       	ret

000045fc <spi_deselect>:

void spi_deselect(ioport_pin_t pin)
{
    45fc:	cf 93       	push	r28
    45fe:	c8 2f       	mov	r28, r24
	delay_ms(1);
    4600:	6e e4       	ldi	r22, 0x4E	; 78
    4602:	71 e0       	ldi	r23, 0x01	; 1
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	b1 de       	rcall	.-670    	; 0x436c <__portable_avr_delay_cycles>
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    460a:	ec 2f       	mov	r30, r28
    460c:	e6 95       	lsr	r30
    460e:	e6 95       	lsr	r30
    4610:	e6 95       	lsr	r30
    4612:	80 e2       	ldi	r24, 0x20	; 32
    4614:	e8 9f       	mul	r30, r24
    4616:	f0 01       	movw	r30, r0
    4618:	11 24       	eor	r1, r1
    461a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    461c:	c7 70       	andi	r28, 0x07	; 7
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	02 c0       	rjmp	.+4      	; 0x4628 <spi_deselect+0x2c>
    4624:	88 0f       	add	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	ca 95       	dec	r28
    462a:	e2 f7       	brpl	.-8      	; 0x4624 <spi_deselect+0x28>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    462c:	85 83       	std	Z+5, r24	; 0x05
	ioport_set_pin_high(pin);
	delay_ms(1);
    462e:	6e e4       	ldi	r22, 0x4E	; 78
    4630:	71 e0       	ldi	r23, 0x01	; 1
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	9a de       	rcall	.-716    	; 0x436c <__portable_avr_delay_cycles>
    4638:	cf 91       	pop	r28
    463a:	08 95       	ret

0000463c <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    4642:	0e 94 14 08 	call	0x1028	; 0x1028 <usart_getchar>
    4646:	88 83       	st	Y, r24
}
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	08 95       	ret

0000464e <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    464e:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <usart_putchar>
}
    4652:	08 95       	ret

00004654 <uart_sd_init>:

#include <asf.h>
#include "uart.h"

void uart_sd_init()
{
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	27 97       	sbiw	r28, 0x07	; 7
    465e:	cd bf       	out	0x3d, r28	; 61
    4660:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4662:	60 e1       	ldi	r22, 0x10	; 16
    4664:	84 e0       	ldi	r24, 0x04	; 4
    4666:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
		.charlength =	UART_SD_SERIAL_CHAR_LEN,
		.paritytype =	UART_SD_SERIAL_PARITY,
		.stopbits	=	UART_SD_SERIAL_STOP_BIT
	};
	
	UART_SD_PORT.DIR |= UART_SD_TX_PIN;	// set the USART transmit pin to output
    466a:	e0 e6       	ldi	r30, 0x60	; 96
    466c:	f6 e0       	ldi	r31, 0x06	; 6
    466e:	80 81       	ld	r24, Z
    4670:	88 60       	ori	r24, 0x08	; 8
    4672:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    4674:	80 ea       	ldi	r24, 0xA0	; 160
    4676:	99 e0       	ldi	r25, 0x09	; 9
    4678:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <stdio_base>
    467c:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4680:	87 e2       	ldi	r24, 0x27	; 39
    4682:	93 e2       	ldi	r25, 0x23	; 35
    4684:	80 93 7f 22 	sts	0x227F, r24	; 0x80227f <ptr_put>
    4688:	90 93 80 22 	sts	0x2280, r25	; 0x802280 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    468c:	8e e1       	ldi	r24, 0x1E	; 30
    468e:	93 e2       	ldi	r25, 0x23	; 35
    4690:	80 93 7d 22 	sts	0x227D, r24	; 0x80227d <ptr_get>
    4694:	90 93 7e 22 	sts	0x227E, r25	; 0x80227e <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    4698:	e6 e3       	ldi	r30, 0x36	; 54
    469a:	f0 e2       	ldi	r31, 0x20	; 32
    469c:	84 81       	ldd	r24, Z+4	; 0x04
    469e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    46a0:	85 81       	ldd	r24, Z+5	; 0x05
    46a2:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    46a4:	86 81       	ldd	r24, Z+6	; 0x06
    46a6:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	a2 81       	ldd	r26, Z+2	; 0x02
    46ae:	b3 81       	ldd	r27, Z+3	; 0x03
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	9a 83       	std	Y+2, r25	; 0x02
    46b4:	ab 83       	std	Y+3, r26	; 0x03
    46b6:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    46b8:	60 e1       	ldi	r22, 0x10	; 16
    46ba:	84 e0       	ldi	r24, 0x04	; 4
    46bc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    46c0:	be 01       	movw	r22, r28
    46c2:	6f 5f       	subi	r22, 0xFF	; 255
    46c4:	7f 4f       	sbci	r23, 0xFF	; 255
    46c6:	80 ea       	ldi	r24, 0xA0	; 160
    46c8:	99 e0       	ldi	r25, 0x09	; 9
    46ca:	0e 94 2d 09 	call	0x125a	; 0x125a <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    46ce:	6f e9       	ldi	r22, 0x9F	; 159
    46d0:	71 e0       	ldi	r23, 0x01	; 1
    46d2:	88 eb       	ldi	r24, 0xB8	; 184
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	33 d7       	rcall	.+3686   	; 0x553e <fdevopen>
	
	stdio_serial_init(UART_SD_SERIAL, &usart_config); // function maps the serial output to printf,
	
}
    46d8:	27 96       	adiw	r28, 0x07	; 7
    46da:	cd bf       	out	0x3d, r28	; 61
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	08 95       	ret

000046e4 <uart_gps_init>:

void uart_gps_init()
{
    46e4:	0f 93       	push	r16
    46e6:	1f 93       	push	r17
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
    46ec:	cd b7       	in	r28, 0x3d	; 61
    46ee:	de b7       	in	r29, 0x3e	; 62
    46f0:	27 97       	sbiw	r28, 0x07	; 7
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    46f6:	60 e1       	ldi	r22, 0x10	; 16
    46f8:	83 e0       	ldi	r24, 0x03	; 3
    46fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    46fe:	00 ea       	ldi	r16, 0xA0	; 160
    4700:	18 e0       	ldi	r17, 0x08	; 8
    4702:	00 93 81 22 	sts	0x2281, r16	; 0x802281 <stdio_base>
    4706:	10 93 82 22 	sts	0x2282, r17	; 0x802282 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    470a:	87 e2       	ldi	r24, 0x27	; 39
    470c:	93 e2       	ldi	r25, 0x23	; 35
    470e:	80 93 7f 22 	sts	0x227F, r24	; 0x80227f <ptr_put>
    4712:	90 93 80 22 	sts	0x2280, r25	; 0x802280 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4716:	8e e1       	ldi	r24, 0x1E	; 30
    4718:	93 e2       	ldi	r25, 0x23	; 35
    471a:	80 93 7d 22 	sts	0x227D, r24	; 0x80227d <ptr_get>
    471e:	90 93 7e 22 	sts	0x227E, r25	; 0x80227e <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    4722:	ef e2       	ldi	r30, 0x2F	; 47
    4724:	f0 e2       	ldi	r31, 0x20	; 32
    4726:	84 81       	ldd	r24, Z+4	; 0x04
    4728:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    472a:	85 81       	ldd	r24, Z+5	; 0x05
    472c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    472e:	86 81       	ldd	r24, Z+6	; 0x06
    4730:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    4732:	80 81       	ld	r24, Z
    4734:	91 81       	ldd	r25, Z+1	; 0x01
    4736:	a2 81       	ldd	r26, Z+2	; 0x02
    4738:	b3 81       	ldd	r27, Z+3	; 0x03
    473a:	89 83       	std	Y+1, r24	; 0x01
    473c:	9a 83       	std	Y+2, r25	; 0x02
    473e:	ab 83       	std	Y+3, r26	; 0x03
    4740:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    4742:	60 e1       	ldi	r22, 0x10	; 16
    4744:	83 e0       	ldi	r24, 0x03	; 3
    4746:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    474a:	be 01       	movw	r22, r28
    474c:	6f 5f       	subi	r22, 0xFF	; 255
    474e:	7f 4f       	sbci	r23, 0xFF	; 255
    4750:	80 ea       	ldi	r24, 0xA0	; 160
    4752:	98 e0       	ldi	r25, 0x08	; 8
    4754:	0e 94 2d 09 	call	0x125a	; 0x125a <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4758:	6f e9       	ldi	r22, 0x9F	; 159
    475a:	71 e0       	ldi	r23, 0x01	; 1
    475c:	88 eb       	ldi	r24, 0xB8	; 184
    475e:	91 e0       	ldi	r25, 0x01	; 1
    4760:	ee d6       	rcall	.+3548   	; 0x553e <fdevopen>
		.paritytype =	UART_GPS_SERIAL_PARITY,
		.stopbits	=	UART_GPS_SERIAL_STOP_BIT
	};
	
	stdio_serial_init(UART_GPS_SERIAL, &usart_config);
	USARTC0.CTRLA |= 0x10;
    4762:	f8 01       	movw	r30, r16
    4764:	83 81       	ldd	r24, Z+3	; 0x03
    4766:	80 61       	ori	r24, 0x10	; 16
    4768:	83 83       	std	Z+3, r24	; 0x03
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
    476a:	e0 ea       	ldi	r30, 0xA0	; 160
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	81 60       	ori	r24, 0x01	; 1
    4772:	82 83       	std	Z+2, r24	; 0x02
    4774:	27 96       	adiw	r28, 0x07	; 7
    4776:	cd bf       	out	0x3d, r28	; 61
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	df 91       	pop	r29
    477c:	cf 91       	pop	r28
    477e:	1f 91       	pop	r17
    4780:	0f 91       	pop	r16
    4782:	08 95       	ret

00004784 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4784:	04 c0       	rjmp	.+8      	; 0x478e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4786:	61 50       	subi	r22, 0x01	; 1
    4788:	71 09       	sbc	r23, r1
    478a:	81 09       	sbc	r24, r1
    478c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    478e:	61 15       	cp	r22, r1
    4790:	71 05       	cpc	r23, r1
    4792:	81 05       	cpc	r24, r1
    4794:	91 05       	cpc	r25, r1
    4796:	b9 f7       	brne	.-18     	; 0x4786 <__portable_avr_delay_cycles+0x2>
    4798:	08 95       	ret

0000479a <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	09 f4       	brne	.+2      	; 0x47a0 <sysclk_enable_peripheral_clock+0x6>
    479e:	d5 c0       	rjmp	.+426    	; 0x494a <sysclk_enable_peripheral_clock+0x1b0>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    47a0:	80 3c       	cpi	r24, 0xC0	; 192
    47a2:	91 05       	cpc	r25, r1
    47a4:	29 f4       	brne	.+10     	; 0x47b0 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    47a6:	60 e1       	ldi	r22, 0x10	; 16
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    47ae:	08 95       	ret
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    47b0:	81 15       	cp	r24, r1
    47b2:	24 e0       	ldi	r18, 0x04	; 4
    47b4:	92 07       	cpc	r25, r18
    47b6:	29 f4       	brne	.+10     	; 0x47c2 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    47b8:	64 e0       	ldi	r22, 0x04	; 4
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    47c0:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    47c2:	80 38       	cpi	r24, 0x80	; 128
    47c4:	21 e0       	ldi	r18, 0x01	; 1
    47c6:	92 07       	cpc	r25, r18
    47c8:	29 f4       	brne	.+10     	; 0x47d4 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    47ca:	62 e0       	ldi	r22, 0x02	; 2
    47cc:	80 e0       	ldi	r24, 0x00	; 0
    47ce:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    47d2:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    47d4:	81 15       	cp	r24, r1
    47d6:	21 e0       	ldi	r18, 0x01	; 1
    47d8:	92 07       	cpc	r25, r18
    47da:	29 f4       	brne	.+10     	; 0x47e6 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    47dc:	61 e0       	ldi	r22, 0x01	; 1
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    47e4:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    47e6:	80 38       	cpi	r24, 0x80	; 128
    47e8:	23 e0       	ldi	r18, 0x03	; 3
    47ea:	92 07       	cpc	r25, r18
    47ec:	29 f4       	brne	.+10     	; 0x47f8 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    47ee:	61 e0       	ldi	r22, 0x01	; 1
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    47f6:	08 95       	ret
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    47f8:	81 15       	cp	r24, r1
    47fa:	22 e0       	ldi	r18, 0x02	; 2
    47fc:	92 07       	cpc	r25, r18
    47fe:	29 f4       	brne	.+10     	; 0x480a <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4800:	62 e0       	ldi	r22, 0x02	; 2
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4808:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    480a:	80 32       	cpi	r24, 0x20	; 32
    480c:	23 e0       	ldi	r18, 0x03	; 3
    480e:	92 07       	cpc	r25, r18
    4810:	29 f4       	brne	.+10     	; 0x481c <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    4812:	64 e0       	ldi	r22, 0x04	; 4
    4814:	82 e0       	ldi	r24, 0x02	; 2
    4816:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    481a:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    481c:	81 15       	cp	r24, r1
    481e:	28 e0       	ldi	r18, 0x08	; 8
    4820:	92 07       	cpc	r25, r18
    4822:	29 f4       	brne	.+10     	; 0x482e <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    4824:	61 e0       	ldi	r22, 0x01	; 1
    4826:	83 e0       	ldi	r24, 0x03	; 3
    4828:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    482c:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    482e:	81 15       	cp	r24, r1
    4830:	29 e0       	ldi	r18, 0x09	; 9
    4832:	92 07       	cpc	r25, r18
    4834:	29 f4       	brne	.+10     	; 0x4840 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    4836:	61 e0       	ldi	r22, 0x01	; 1
    4838:	84 e0       	ldi	r24, 0x04	; 4
    483a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    483e:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    4840:	81 15       	cp	r24, r1
    4842:	2a e0       	ldi	r18, 0x0A	; 10
    4844:	92 07       	cpc	r25, r18
    4846:	29 f4       	brne	.+10     	; 0x4852 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    4848:	61 e0       	ldi	r22, 0x01	; 1
    484a:	85 e0       	ldi	r24, 0x05	; 5
    484c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4850:	08 95       	ret
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    4852:	80 34       	cpi	r24, 0x40	; 64
    4854:	28 e0       	ldi	r18, 0x08	; 8
    4856:	92 07       	cpc	r25, r18
    4858:	29 f4       	brne	.+10     	; 0x4864 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    485a:	62 e0       	ldi	r22, 0x02	; 2
    485c:	83 e0       	ldi	r24, 0x03	; 3
    485e:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4862:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    4864:	80 34       	cpi	r24, 0x40	; 64
    4866:	29 e0       	ldi	r18, 0x09	; 9
    4868:	92 07       	cpc	r25, r18
    486a:	29 f4       	brne	.+10     	; 0x4876 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    486c:	62 e0       	ldi	r22, 0x02	; 2
    486e:	84 e0       	ldi	r24, 0x04	; 4
    4870:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4874:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    4876:	80 39       	cpi	r24, 0x90	; 144
    4878:	28 e0       	ldi	r18, 0x08	; 8
    487a:	92 07       	cpc	r25, r18
    487c:	29 f4       	brne	.+10     	; 0x4888 <sysclk_enable_peripheral_clock+0xee>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    487e:	64 e0       	ldi	r22, 0x04	; 4
    4880:	83 e0       	ldi	r24, 0x03	; 3
    4882:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4886:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    4888:	80 39       	cpi	r24, 0x90	; 144
    488a:	29 e0       	ldi	r18, 0x09	; 9
    488c:	92 07       	cpc	r25, r18
    488e:	29 f4       	brne	.+10     	; 0x489a <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4890:	64 e0       	ldi	r22, 0x04	; 4
    4892:	84 e0       	ldi	r24, 0x04	; 4
    4894:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4898:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    489a:	80 39       	cpi	r24, 0x90	; 144
    489c:	2a e0       	ldi	r18, 0x0A	; 10
    489e:	92 07       	cpc	r25, r18
    48a0:	29 f4       	brne	.+10     	; 0x48ac <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    48a2:	64 e0       	ldi	r22, 0x04	; 4
    48a4:	85 e0       	ldi	r24, 0x05	; 5
    48a6:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    48aa:	08 95       	ret
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    48ac:	80 3c       	cpi	r24, 0xC0	; 192
    48ae:	28 e0       	ldi	r18, 0x08	; 8
    48b0:	92 07       	cpc	r25, r18
    48b2:	29 f4       	brne	.+10     	; 0x48be <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    48b4:	68 e0       	ldi	r22, 0x08	; 8
    48b6:	83 e0       	ldi	r24, 0x03	; 3
    48b8:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    48bc:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    48be:	80 3c       	cpi	r24, 0xC0	; 192
    48c0:	29 e0       	ldi	r18, 0x09	; 9
    48c2:	92 07       	cpc	r25, r18
    48c4:	29 f4       	brne	.+10     	; 0x48d0 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    48c6:	68 e0       	ldi	r22, 0x08	; 8
    48c8:	84 e0       	ldi	r24, 0x04	; 4
    48ca:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    48ce:	08 95       	ret
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    48d0:	80 3a       	cpi	r24, 0xA0	; 160
    48d2:	28 e0       	ldi	r18, 0x08	; 8
    48d4:	92 07       	cpc	r25, r18
    48d6:	29 f4       	brne	.+10     	; 0x48e2 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    48d8:	60 e1       	ldi	r22, 0x10	; 16
    48da:	83 e0       	ldi	r24, 0x03	; 3
    48dc:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    48e0:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    48e2:	80 3a       	cpi	r24, 0xA0	; 160
    48e4:	29 e0       	ldi	r18, 0x09	; 9
    48e6:	92 07       	cpc	r25, r18
    48e8:	29 f4       	brne	.+10     	; 0x48f4 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    48ea:	60 e1       	ldi	r22, 0x10	; 16
    48ec:	84 e0       	ldi	r24, 0x04	; 4
    48ee:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    48f2:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    48f4:	80 3a       	cpi	r24, 0xA0	; 160
    48f6:	2a e0       	ldi	r18, 0x0A	; 10
    48f8:	92 07       	cpc	r25, r18
    48fa:	29 f4       	brne	.+10     	; 0x4906 <sysclk_enable_peripheral_clock+0x16c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    48fc:	60 e1       	ldi	r22, 0x10	; 16
    48fe:	85 e0       	ldi	r24, 0x05	; 5
    4900:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4904:	08 95       	ret
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    4906:	80 3b       	cpi	r24, 0xB0	; 176
    4908:	28 e0       	ldi	r18, 0x08	; 8
    490a:	92 07       	cpc	r25, r18
    490c:	29 f4       	brne	.+10     	; 0x4918 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    490e:	60 e2       	ldi	r22, 0x20	; 32
    4910:	83 e0       	ldi	r24, 0x03	; 3
    4912:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4916:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    4918:	80 3b       	cpi	r24, 0xB0	; 176
    491a:	29 e0       	ldi	r18, 0x09	; 9
    491c:	92 07       	cpc	r25, r18
    491e:	29 f4       	brne	.+10     	; 0x492a <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    4920:	60 e2       	ldi	r22, 0x20	; 32
    4922:	84 e0       	ldi	r24, 0x04	; 4
    4924:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4928:	08 95       	ret
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    492a:	80 38       	cpi	r24, 0x80	; 128
    492c:	24 e0       	ldi	r18, 0x04	; 4
    492e:	92 07       	cpc	r25, r18
    4930:	29 f4       	brne	.+10     	; 0x493c <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    4932:	60 e4       	ldi	r22, 0x40	; 64
    4934:	83 e0       	ldi	r24, 0x03	; 3
    4936:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    493a:	08 95       	ret
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    493c:	80 3a       	cpi	r24, 0xA0	; 160
    493e:	94 40       	sbci	r25, 0x04	; 4
    4940:	21 f4       	brne	.+8      	; 0x494a <sysclk_enable_peripheral_clock+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    4942:	60 e4       	ldi	r22, 0x40	; 64
    4944:	85 e0       	ldi	r24, 0x05	; 5
    4946:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    494a:	08 95       	ret

0000494c <ring_push>:

int ring_push(ring_buf_t *r, uint8_t data) {
	// push onto head, then move head up
	int next;
	
	next = r->head+1;
    494c:	fc 01       	movw	r30, r24
    494e:	f3 95       	inc	r31
    4950:	40 81       	ld	r20, Z
    4952:	51 81       	ldd	r21, Z+1	; 0x01
    4954:	9a 01       	movw	r18, r20
    4956:	2f 5f       	subi	r18, 0xFF	; 255
    4958:	3f 4f       	sbci	r19, 0xFF	; 255
	if(next >= r->maxlen) { // loop back around to beginning
    495a:	34 96       	adiw	r30, 0x04	; 4
    495c:	01 90       	ld	r0, Z+
    495e:	f0 81       	ld	r31, Z
    4960:	e0 2d       	mov	r30, r0
    4962:	2e 17       	cp	r18, r30
    4964:	3f 07       	cpc	r19, r31
    4966:	10 f0       	brcs	.+4      	; 0x496c <ring_push+0x20>
		next = 0;
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
	}
	if(next == r->tail) { // buffer full
    496c:	fc 01       	movw	r30, r24
    496e:	ee 5f       	subi	r30, 0xFE	; 254
    4970:	fe 4f       	sbci	r31, 0xFE	; 254
    4972:	01 90       	ld	r0, Z+
    4974:	f0 81       	ld	r31, Z
    4976:	e0 2d       	mov	r30, r0
    4978:	e2 17       	cp	r30, r18
    497a:	f3 07       	cpc	r31, r19
    497c:	59 f0       	breq	.+22     	; 0x4994 <ring_push+0x48>
		return -1;
	}
	
	r->buffer[r->head] = data; // load data into head
    497e:	fc 01       	movw	r30, r24
    4980:	e4 0f       	add	r30, r20
    4982:	f5 1f       	adc	r31, r21
    4984:	60 83       	st	Z, r22
	r->head = next;			   // head at next offset
    4986:	fc 01       	movw	r30, r24
    4988:	f3 95       	inc	r31
    498a:	20 83       	st	Z, r18
    498c:	31 83       	std	Z+1, r19	; 0x01
	
	return 0;				   // success
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	08 95       	ret
	next = r->head+1;
	if(next >= r->maxlen) { // loop back around to beginning
		next = 0;
	}
	if(next == r->tail) { // buffer full
		return -1;
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	9f ef       	ldi	r25, 0xFF	; 255
	
	r->buffer[r->head] = data; // load data into head
	r->head = next;			   // head at next offset
	
	return 0;				   // success
}
    4998:	08 95       	ret

0000499a <ring_pop>:

int ring_pop(ring_buf_t *r, uint8_t *data) {
	// pop from tail, then move tail up
	int next;
	
	if(r->head == r->tail) { // no data
    499a:	fc 01       	movw	r30, r24
    499c:	ee 5f       	subi	r30, 0xFE	; 254
    499e:	fe 4f       	sbci	r31, 0xFE	; 254
    49a0:	20 81       	ld	r18, Z
    49a2:	31 81       	ldd	r19, Z+1	; 0x01
    49a4:	32 97       	sbiw	r30, 0x02	; 2
    49a6:	40 81       	ld	r20, Z
    49a8:	51 81       	ldd	r21, Z+1	; 0x01
    49aa:	42 17       	cp	r20, r18
    49ac:	53 07       	cpc	r21, r19
    49ae:	e9 f0       	breq	.+58     	; 0x49ea <ring_pop+0x50>
		return -1;
	}
	
	next =  r->tail + 1;
    49b0:	a9 01       	movw	r20, r18
    49b2:	4f 5f       	subi	r20, 0xFF	; 255
    49b4:	5f 4f       	sbci	r21, 0xFF	; 255
	if(next >= r->maxlen) {
    49b6:	34 96       	adiw	r30, 0x04	; 4
    49b8:	01 90       	ld	r0, Z+
    49ba:	f0 81       	ld	r31, Z
    49bc:	e0 2d       	mov	r30, r0
    49be:	4e 17       	cp	r20, r30
    49c0:	5f 07       	cpc	r21, r31
    49c2:	18 f4       	brcc	.+6      	; 0x49ca <ring_pop+0x30>
	
	if(r->head == r->tail) { // no data
		return -1;
	}
	
	next =  r->tail + 1;
    49c4:	a4 2f       	mov	r26, r20
    49c6:	45 2f       	mov	r20, r21
    49c8:	02 c0       	rjmp	.+4      	; 0x49ce <ring_pop+0x34>
	if(next >= r->maxlen) {
		next = 0;
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	*data = r->buffer[r->tail]; // load data from tail
    49ce:	fc 01       	movw	r30, r24
    49d0:	e2 0f       	add	r30, r18
    49d2:	f3 1f       	adc	r31, r19
    49d4:	20 81       	ld	r18, Z
    49d6:	fb 01       	movw	r30, r22
    49d8:	20 83       	st	Z, r18
	r->tail = next;				// tail at next offset
    49da:	fc 01       	movw	r30, r24
    49dc:	ee 5f       	subi	r30, 0xFE	; 254
    49de:	fe 4f       	sbci	r31, 0xFE	; 254
    49e0:	a0 83       	st	Z, r26
    49e2:	41 83       	std	Z+1, r20	; 0x01
	return 0;					// success
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	08 95       	ret
int ring_pop(ring_buf_t *r, uint8_t *data) {
	// pop from tail, then move tail up
	int next;
	
	if(r->head == r->tail) { // no data
		return -1;
    49ea:	8f ef       	ldi	r24, 0xFF	; 255
    49ec:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	*data = r->buffer[r->tail]; // load data from tail
	r->tail = next;				// tail at next offset
	return 0;					// success
}
    49ee:	08 95       	ret

000049f0 <__vector_25>:

volatile ring_buf_t gps_ring;

ISR(USARTC0_RXC_vect)
{
    49f0:	1f 92       	push	r1
    49f2:	0f 92       	push	r0
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	0f 92       	push	r0
    49f8:	11 24       	eor	r1, r1
    49fa:	2f 93       	push	r18
    49fc:	3f 93       	push	r19
    49fe:	4f 93       	push	r20
    4a00:	5f 93       	push	r21
    4a02:	6f 93       	push	r22
    4a04:	7f 93       	push	r23
    4a06:	8f 93       	push	r24
    4a08:	9f 93       	push	r25
    4a0a:	af 93       	push	r26
    4a0c:	bf 93       	push	r27
    4a0e:	ef 93       	push	r30
    4a10:	ff 93       	push	r31
	char data=USARTC0.DATA;
    4a12:	60 91 a0 08 	lds	r22, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if(ring_push(&gps_ring, data)) {
    4a16:	8c ee       	ldi	r24, 0xEC	; 236
    4a18:	92 e2       	ldi	r25, 0x22	; 34
    4a1a:	98 df       	rcall	.-208    	; 0x494c <ring_push>
		//out of space in gps ring buffer
	}
}
    4a1c:	ff 91       	pop	r31
    4a1e:	ef 91       	pop	r30
    4a20:	bf 91       	pop	r27
    4a22:	af 91       	pop	r26
    4a24:	9f 91       	pop	r25
    4a26:	8f 91       	pop	r24
    4a28:	7f 91       	pop	r23
    4a2a:	6f 91       	pop	r22
    4a2c:	5f 91       	pop	r21
    4a2e:	4f 91       	pop	r20
    4a30:	3f 91       	pop	r19
    4a32:	2f 91       	pop	r18
    4a34:	0f 90       	pop	r0
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	0f 90       	pop	r0
    4a3a:	1f 90       	pop	r1
    4a3c:	18 95       	reti

00004a3e <main>:


int main (void)
{
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	cd b7       	in	r28, 0x3d	; 61
    4a44:	de b7       	in	r29, 0x3e	; 62
    4a46:	c8 54       	subi	r28, 0x48	; 72
    4a48:	d1 09       	sbc	r29, r1
    4a4a:	cd bf       	out	0x3d, r28	; 61
    4a4c:	de bf       	out	0x3e, r29	; 62
	// ************** INITS ************** //
	gps_ring.head = 0;
    4a4e:	10 92 ec 23 	sts	0x23EC, r1	; 0x8023ec <gps_ring+0x100>
    4a52:	10 92 ed 23 	sts	0x23ED, r1	; 0x8023ed <gps_ring+0x101>
	gps_ring.tail = 0;
    4a56:	10 92 ee 23 	sts	0x23EE, r1	; 0x8023ee <gps_ring+0x102>
    4a5a:	10 92 ef 23 	sts	0x23EF, r1	; 0x8023ef <gps_ring+0x103>
	gps_ring.maxlen = 256;
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	91 e0       	ldi	r25, 0x01	; 1
    4a62:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <gps_ring+0x104>
    4a66:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <gps_ring+0x105>
	
	board_init();
    4a6a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <board_init>

	delay_ms(10);
    4a6e:	66 e0       	ldi	r22, 0x06	; 6
    4a70:	7d e0       	ldi	r23, 0x0D	; 13
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	86 de       	rcall	.-756    	; 0x4784 <__portable_avr_delay_cycles>
	sysclk_init();
    4a78:	0e 94 52 01 	call	0x2a4	; 0x2a4 <sysclk_init>
	
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES); //Enable GPS HiRes
    4a7c:	64 e0       	ldi	r22, 0x04	; 4
    4a7e:	83 e0       	ldi	r24, 0x03	; 3
    4a80:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&ADCA);             //Voltage
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	92 e0       	ldi	r25, 0x02	; 2
    4a88:	88 de       	rcall	.-752    	; 0x479a <sysclk_enable_peripheral_clock>
	adc_init();
    4a8a:	0e 94 29 0a 	call	0x1452	; 0x1452 <adc_init>
	uart_gps_init();
    4a8e:	2a de       	rcall	.-940    	; 0x46e4 <uart_gps_init>
	uart_sd_init();
    4a90:	e1 dd       	rcall	.-1086   	; 0x4654 <uart_sd_init>
    4a92:	6b e0       	ldi	r22, 0x0B	; 11
	delay_ms(20);
    4a94:	7a e1       	ldi	r23, 0x1A	; 26
    4a96:	80 e0       	ldi	r24, 0x00	; 0
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	74 de       	rcall	.-792    	; 0x4784 <__portable_avr_delay_cycles>
    4a9c:	78 94       	sei
// 	{
// 		printf("%s\n", "OUT OF MEMORY");
// 		return -1;
// 	}
		
	delay_ms(200);
    4a9e:	6b e6       	ldi	r22, 0x6B	; 107
    4aa0:	74 e0       	ldi	r23, 0x04	; 4
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	6e de       	rcall	.-804    	; 0x4784 <__portable_avr_delay_cycles>
    4aa8:	0b ec       	ldi	r16, 0xCB	; 203
	
	
	// Pressure
 	static_sensor.ss_pin = IOPORT_CREATE_PIN(PORTC, 4);
    4aaa:	12 e2       	ldi	r17, 0x22	; 34
    4aac:	84 e1       	ldi	r24, 0x14	; 20
    4aae:	d8 01       	movw	r26, r16
    4ab0:	8c 93       	st	X, r24
 	//Initialize the SPI interface
 	spi_init(&SPIC, &PORTC);
    4ab2:	60 e4       	ldi	r22, 0x40	; 64
    4ab4:	76 e0       	ldi	r23, 0x06	; 6
    4ab6:	80 ec       	ldi	r24, 0xC0	; 192
    4ab8:	98 e0       	ldi	r25, 0x08	; 8
    4aba:	63 dc       	rcall	.-1850   	; 0x4382 <spi_init>
    4abc:	f8 01       	movw	r30, r16
 	ioport_configure_pin(static_sensor.ss_pin, IOPORT_DIR_OUTPUT || IOPORT_INIT_HIGH);
    4abe:	80 81       	ld	r24, Z
    4ac0:	98 2f       	mov	r25, r24
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    4ac2:	97 70       	andi	r25, 0x07	; 7
    4ac4:	61 e0       	ldi	r22, 0x01	; 1
    4ac6:	70 e0       	ldi	r23, 0x00	; 0
    4ac8:	02 c0       	rjmp	.+4      	; 0x4ace <main+0x90>
    4aca:	66 0f       	add	r22, r22
    4acc:	77 1f       	adc	r23, r23
    4ace:	9a 95       	dec	r25
    4ad0:	e2 f7       	brpl	.-8      	; 0x4aca <main+0x8c>
    4ad2:	86 95       	lsr	r24
    4ad4:	86 95       	lsr	r24
    4ad6:	86 95       	lsr	r24
    4ad8:	f0 e2       	ldi	r31, 0x20	; 32
    4ada:	8f 9f       	mul	r24, r31
    4adc:	c0 01       	movw	r24, r0
    4ade:	11 24       	eor	r1, r1
    4ae0:	41 e0       	ldi	r20, 0x01	; 1
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	9a 5f       	subi	r25, 0xFA	; 250
    4ae6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ioport_configure_port_pin>
 	pressure_init(&static_sensor);
    4aea:	c8 01       	movw	r24, r16
    4aec:	ea db       	rcall	.-2092   	; 0x42c2 <pressure_init>
    4aee:	0f 2e       	mov	r0, r31
	
	
	
	
	//IMU initialization
	twi_options_t m_options = {
    4af0:	f9 e0       	ldi	r31, 0x09	; 9
    4af2:	df 2e       	mov	r13, r31
    4af4:	f0 2d       	mov	r31, r0
    4af6:	8e 01       	movw	r16, r28
    4af8:	0f 5f       	subi	r16, 0xFF	; 255
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	d8 01       	movw	r26, r16
    4afe:	ed 2d       	mov	r30, r13
    4b00:	1d 92       	st	X+, r1
    4b02:	ea 95       	dec	r30
    4b04:	e9 f7       	brne	.-6      	; 0x4b00 <main+0xc2>
    4b06:	80 e8       	ldi	r24, 0x80	; 128
    4b08:	9a e1       	ldi	r25, 0x1A	; 26
    4b0a:	a6 e0       	ldi	r26, 0x06	; 6
    4b0c:	b0 e0       	ldi	r27, 0x00	; 0
    4b0e:	89 83       	std	Y+1, r24	; 0x01
    4b10:	9a 83       	std	Y+2, r25	; 0x02
    4b12:	ab 83       	std	Y+3, r26	; 0x03
    4b14:	bc 83       	std	Y+4, r27	; 0x04
    4b16:	83 e2       	ldi	r24, 0x23	; 35
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	a0 e0       	ldi	r26, 0x00	; 0
    4b1c:	b0 e0       	ldi	r27, 0x00	; 0
    4b1e:	8d 83       	std	Y+5, r24	; 0x05
    4b20:	9e 83       	std	Y+6, r25	; 0x06
    4b22:	af 83       	std	Y+7, r26	; 0x07
    4b24:	b8 87       	std	Y+8, r27	; 0x08
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
	sysclk_enable_peripheral_clock(&TWIE);
    4b26:	80 ea       	ldi	r24, 0xA0	; 160
    4b28:	94 e0       	ldi	r25, 0x04	; 4
    4b2a:	37 de       	rcall	.-914    	; 0x479a <sysclk_enable_peripheral_clock>
    4b2c:	7e 01       	movw	r14, r28
		
	twi_master_options_t opt = {
    4b2e:	fa e0       	ldi	r31, 0x0A	; 10
    4b30:	ef 0e       	add	r14, r31
    4b32:	f1 1c       	adc	r15, r1
    4b34:	d7 01       	movw	r26, r14
    4b36:	1d 92       	st	X+, r1
    4b38:	da 94       	dec	r13
    4b3a:	e9 f7       	brne	.-6      	; 0x4b36 <main+0xf8>
    4b3c:	80 e5       	ldi	r24, 0x50	; 80
    4b3e:	93 ec       	ldi	r25, 0xC3	; 195
    4b40:	a0 e0       	ldi	r26, 0x00	; 0
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	8a 87       	std	Y+10, r24	; 0x0a
    4b46:	9b 87       	std	Y+11, r25	; 0x0b
    4b48:	ac 87       	std	Y+12, r26	; 0x0c
    4b4a:	bd 87       	std	Y+13, r27	; 0x0d
    4b4c:	80 e5       	ldi	r24, 0x50	; 80
    4b4e:	8a 8b       	std	Y+18, r24	; 0x12
    4b50:	8f e0       	ldi	r24, 0x0F	; 15
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	a0 e0       	ldi	r26, 0x00	; 0
    4b56:	b0 e0       	ldi	r27, 0x00	; 0
    4b58:	8e 87       	std	Y+14, r24	; 0x0e
    4b5a:	9f 87       	std	Y+15, r25	; 0x0f
    4b5c:	a8 8b       	std	Y+16, r26	; 0x10
    4b5e:	b9 8b       	std	Y+17, r27	; 0x11

	sysclk_enable_peripheral_clock(twi);
    4b60:	80 ea       	ldi	r24, 0xA0	; 160
    4b62:	94 e0       	ldi	r25, 0x04	; 4
    4b64:	1a de       	rcall	.-972    	; 0x479a <sysclk_enable_peripheral_clock>
    4b66:	b7 01       	movw	r22, r14

	return twi_master_init(twi,opt);
    4b68:	80 ea       	ldi	r24, 0xA0	; 160
    4b6a:	94 e0       	ldi	r25, 0x04	; 4
    4b6c:	0e 94 93 07 	call	0xf26	; 0xf26 <twi_master_init>
    4b70:	b8 01       	movw	r22, r16
		.speed = 50000,
		.chip  = 0x50
	};

	twi_master_setup(&TWIE, &opt);
	twi_master_init(&TWIE, &m_options);
    4b72:	80 ea       	ldi	r24, 0xA0	; 160
    4b74:	94 e0       	ldi	r25, 0x04	; 4
    4b76:	0e 94 93 07 	call	0xf26	; 0xf26 <twi_master_init>
    4b7a:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    4b7c:	f4 e0       	ldi	r31, 0x04	; 4
    4b7e:	81 81       	ldd	r24, Z+1	; 0x01
    4b80:	88 60       	ori	r24, 0x08	; 8
    4b82:	81 83       	std	Z+1, r24	; 0x01
    4b84:	60 ea       	ldi	r22, 0xA0	; 160
	mpu9250_t imu_e =
	{
		.twi = &TWIE,
	};
		
	init_imu(imu_e);
    4b86:	74 e0       	ldi	r23, 0x04	; 4
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <init_imu>
    4b90:	00 e2       	ldi	r16, 0x20	; 32
		
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	uint32_t packetNumber = 0;
	
	PORTB.DIR = 0b00000111; // On Board LED
    4b92:	16 e0       	ldi	r17, 0x06	; 6
    4b94:	0f 2e       	mov	r0, r31
    4b96:	f7 e0       	ldi	r31, 0x07	; 7
    4b98:	ff 2e       	mov	r15, r31
    4b9a:	f0 2d       	mov	r31, r0
    4b9c:	f8 01       	movw	r30, r16
	

	printf("Packet #,  Pitch,   Roll,    Yaw, AccX, AccY, AccZ,GyroX,GyroY,GyroZ, MagX, MagY, MagZ,IMUTp,HPSTp,EXTTp,BATTp,PMTTp\n");
    4b9e:	f0 82       	st	Z, r15
    4ba0:	8d e3       	ldi	r24, 0x3D	; 61
    4ba2:	90 e2       	ldi	r25, 0x20	; 32
    4ba4:	2e d5       	rcall	.+2652   	; 0x5602 <puts>


	int GPSLock = 0;
	int GPSCounter = 0;

	PORTB.OUT = 0b00000111; // Turn LED On
    4ba6:	d8 01       	movw	r26, r16
    4ba8:	14 96       	adiw	r26, 0x04	; 4
    4baa:	fc 92       	st	X, r15
	uart_sd_init();
    4bac:	53 dd       	rcall	.-1370   	; 0x4654 <uart_sd_init>
    4bae:	c1 2c       	mov	r12, r1
// 	
// 	
// }


	int GPSLock = 0;
    4bb0:	d1 2c       	mov	r13, r1
    4bb2:	81 2c       	mov	r8, r1
	init_imu(imu_e);
		
		
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	uint32_t packetNumber = 0;
    4bb4:	91 2c       	mov	r9, r1
    4bb6:	54 01       	movw	r10, r8
    4bb8:	0f 2e       	mov	r0, r31

	PORTB.OUT = 0b00000111; // Turn LED On
	uart_sd_init();
	while(1){
		char gps_data;
		PORTB.OUT = 0b00000111; // Turn LED On
    4bba:	f7 e0       	ldi	r31, 0x07	; 7
    4bbc:	2f 2e       	mov	r2, r31
    4bbe:	f0 2d       	mov	r31, r0
    4bc0:	0f 2e       	mov	r0, r31
		}
		
		// turn on sd card writing
		uart_sd_init();
		
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
    4bc2:	fa e9       	ldi	r31, 0x9A	; 154
    4bc4:	ef 2e       	mov	r14, r31
    4bc6:	f2 e2       	ldi	r31, 0x22	; 34
    4bc8:	ff 2e       	mov	r15, r31
    4bca:	f0 2d       	mov	r31, r0

	PORTB.OUT = 0b00000111; // Turn LED On
	uart_sd_init();
	while(1){
		char gps_data;
		PORTB.OUT = 0b00000111; // Turn LED On
    4bcc:	20 92 24 06 	sts	0x0624, r2	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
		delay_ms(250);
    4bd0:	66 e8       	ldi	r22, 0x86	; 134
    4bd2:	75 e4       	ldi	r23, 0x45	; 69
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	d5 dd       	rcall	.-1110   	; 0x4784 <__portable_avr_delay_cycles>
		if (!GPSLock){
    4bda:	c1 14       	cp	r12, r1
    4bdc:	d1 04       	cpc	r13, r1
    4bde:	11 f4       	brne	.+4      	; 0x4be4 <main+0x1a6>
			PORTB.OUT = 0b00000000; // Turn LED Off
    4be0:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
		}
		delay_ms(250);
    4be4:	66 e8       	ldi	r22, 0x86	; 134
    4be6:	75 e4       	ldi	r23, 0x45	; 69
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	cb dd       	rcall	.-1130   	; 0x4784 <__portable_avr_delay_cycles>
    4bee:	40 ea       	ldi	r20, 0xA0	; 160
		imu_data = imu_update(imu_e); // Reading IMU
    4bf0:	54 e0       	ldi	r21, 0x04	; 4
    4bf2:	60 e0       	ldi	r22, 0x00	; 0
    4bf4:	70 e0       	ldi	r23, 0x00	; 0
    4bf6:	ce 01       	movw	r24, r28
    4bf8:	43 96       	adiw	r24, 0x13	; 19
    4bfa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <imu_update>
    4bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    4c00:	9c 89       	ldd	r25, Y+20	; 0x14
    4c02:	ad 89       	ldd	r26, Y+21	; 0x15
    4c04:	be 89       	ldd	r27, Y+22	; 0x16
    4c06:	29 96       	adiw	r28, 0x09	; 9
    4c08:	8c af       	std	Y+60, r24	; 0x3c
    4c0a:	9d af       	std	Y+61, r25	; 0x3d
    4c0c:	ae af       	std	Y+62, r26	; 0x3e
    4c0e:	bf af       	std	Y+63, r27	; 0x3f
    4c10:	29 97       	sbiw	r28, 0x09	; 9
    4c12:	8f 89       	ldd	r24, Y+23	; 0x17
    4c14:	98 8d       	ldd	r25, Y+24	; 0x18
    4c16:	a9 8d       	ldd	r26, Y+25	; 0x19
    4c18:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4c1a:	21 96       	adiw	r28, 0x01	; 1
    4c1c:	8c af       	std	Y+60, r24	; 0x3c
    4c1e:	9d af       	std	Y+61, r25	; 0x3d
    4c20:	ae af       	std	Y+62, r26	; 0x3e
    4c22:	bf af       	std	Y+63, r27	; 0x3f
    4c24:	21 97       	sbiw	r28, 0x01	; 1
    4c26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c2a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4c2c:	be 8d       	ldd	r27, Y+30	; 0x1e
    4c2e:	25 96       	adiw	r28, 0x05	; 5
    4c30:	8c af       	std	Y+60, r24	; 0x3c
    4c32:	9d af       	std	Y+61, r25	; 0x3d
    4c34:	ae af       	std	Y+62, r26	; 0x3e
    4c36:	bf af       	std	Y+63, r27	; 0x3f
    4c38:	25 97       	sbiw	r28, 0x05	; 5
    4c3a:	0f 2e       	mov	r0, r31
    4c3c:	fa e9       	ldi	r31, 0x9A	; 154
    4c3e:	6f 2e       	mov	r6, r31
    4c40:	f2 e2       	ldi	r31, 0x22	; 34
    4c42:	7f 2e       	mov	r7, r31
    4c44:	f0 2d       	mov	r31, r0
    4c46:	11 e0       	ldi	r17, 0x01	; 1
		for (int i = 0; i < 4; i++)
		{
			adc_set_pin(i+1);
    4c48:	81 2f       	mov	r24, r17
    4c4a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <adc_set_pin>
			delay_ms(5);
    4c4e:	63 e8       	ldi	r22, 0x83	; 131
    4c50:	76 e0       	ldi	r23, 0x06	; 6
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	96 dd       	rcall	.-1236   	; 0x4784 <__portable_avr_delay_cycles>
			adcValues[i] = adc_read();
    4c58:	0e 94 66 0a 	call	0x14cc	; 0x14cc <adc_read>
    4c5c:	d3 01       	movw	r26, r6
    4c5e:	8d 93       	st	X+, r24
    4c60:	9d 93       	st	X+, r25
    4c62:	3d 01       	movw	r6, r26
		if (!GPSLock){
			PORTB.OUT = 0b00000000; // Turn LED Off
		}
		delay_ms(250);
		imu_data = imu_update(imu_e); // Reading IMU
		for (int i = 0; i < 4; i++)
    4c64:	1f 5f       	subi	r17, 0xFF	; 255
    4c66:	15 30       	cpi	r17, 0x05	; 5
			delay_ms(5);
			adcValues[i] = adc_read();
		}
		
		// turn on sd card writing
		uart_sd_init();
    4c68:	79 f7       	brne	.-34     	; 0x4c48 <main+0x20a>
		
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
			(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)),
			(int16_t)imu_data.yaw, (int16_t)abs(((imu_data.yaw-(int16_t)imu_data.yaw)*1000)),
    4c6a:	f4 dc       	rcall	.-1560   	; 0x4654 <uart_sd_init>
    4c6c:	25 96       	adiw	r28, 0x05	; 5
    4c6e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4c70:	7d ad       	ldd	r23, Y+61	; 0x3d
    4c72:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c74:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c76:	25 97       	sbiw	r28, 0x05	; 5
    4c78:	30 d2       	rcall	.+1120   	; 0x50da <__fixsfsi>
    4c7a:	2b 01       	movw	r4, r22
    4c7c:	3c 01       	movw	r6, r24
		uart_sd_init();
		
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
			(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)),
    4c7e:	21 96       	adiw	r28, 0x01	; 1
    4c80:	6c ad       	ldd	r22, Y+60	; 0x3c
    4c82:	7d ad       	ldd	r23, Y+61	; 0x3d
    4c84:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c86:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c88:	21 97       	sbiw	r28, 0x01	; 1
    4c8a:	27 d2       	rcall	.+1102   	; 0x50da <__fixsfsi>
    4c8c:	6d ab       	std	Y+53, r22	; 0x35
    4c8e:	7e ab       	std	Y+54, r23	; 0x36
    4c90:	8f ab       	std	Y+55, r24	; 0x37
    4c92:	98 af       	std	Y+56, r25	; 0x38
		// turn on sd card writing
		uart_sd_init();
		
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
    4c94:	29 96       	adiw	r28, 0x09	; 9
    4c96:	6c ad       	ldd	r22, Y+60	; 0x3c
    4c98:	7d ad       	ldd	r23, Y+61	; 0x3d
    4c9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c9e:	29 97       	sbiw	r28, 0x09	; 9
    4ca0:	1c d2       	rcall	.+1080   	; 0x50da <__fixsfsi>
    4ca2:	69 af       	std	Y+57, r22	; 0x39
    4ca4:	7a af       	std	Y+58, r23	; 0x3a
    4ca6:	8b af       	std	Y+59, r24	; 0x3b
    4ca8:	9c af       	std	Y+60, r25	; 0x3c
    4caa:	f7 01       	movw	r30, r14
		}
		
		// turn on sd card writing
		uart_sd_init();
		
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
    4cac:	87 81       	ldd	r24, Z+7	; 0x07
    4cae:	8f 93       	push	r24
    4cb0:	86 81       	ldd	r24, Z+6	; 0x06
    4cb2:	8f 93       	push	r24
    4cb4:	85 81       	ldd	r24, Z+5	; 0x05
    4cb6:	8f 93       	push	r24
    4cb8:	84 81       	ldd	r24, Z+4	; 0x04
    4cba:	8f 93       	push	r24
    4cbc:	83 81       	ldd	r24, Z+3	; 0x03
    4cbe:	8f 93       	push	r24
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	8f 93       	push	r24
    4cc4:	81 81       	ldd	r24, Z+1	; 0x01
    4cc6:	8f 93       	push	r24
    4cc8:	80 81       	ld	r24, Z
    4cca:	8f 93       	push	r24
    4ccc:	8f a1       	ldd	r24, Y+39	; 0x27
    4cce:	8f 93       	push	r24
    4cd0:	8e a1       	ldd	r24, Y+38	; 0x26
    4cd2:	8f 93       	push	r24
    4cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    4cd6:	8f 93       	push	r24
    4cd8:	8a a9       	ldd	r24, Y+50	; 0x32
    4cda:	8f 93       	push	r24
    4cdc:	89 a9       	ldd	r24, Y+49	; 0x31
    4cde:	8f 93       	push	r24
    4ce0:	88 a9       	ldd	r24, Y+48	; 0x30
    4ce2:	8f 93       	push	r24
    4ce4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ce6:	8f 93       	push	r24
    4ce8:	8e a5       	ldd	r24, Y+46	; 0x2e
    4cea:	8f 93       	push	r24
    4cec:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cee:	8f 93       	push	r24
    4cf0:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cf2:	8f 93       	push	r24
    4cf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cf6:	8f 93       	push	r24
    4cf8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cfa:	8f 93       	push	r24
    4cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    4cfe:	8f 93       	push	r24
    4d00:	88 a5       	ldd	r24, Y+40	; 0x28
    4d02:	8f 93       	push	r24
    4d04:	8d a1       	ldd	r24, Y+37	; 0x25
    4d06:	8f 93       	push	r24
    4d08:	8c a1       	ldd	r24, Y+36	; 0x24
    4d0a:	8f 93       	push	r24
    4d0c:	8b a1       	ldd	r24, Y+35	; 0x23
    4d0e:	8f 93       	push	r24
    4d10:	8a a1       	ldd	r24, Y+34	; 0x22
    4d12:	8f 93       	push	r24
    4d14:	89 a1       	ldd	r24, Y+33	; 0x21
    4d16:	8f 93       	push	r24
    4d18:	88 a1       	ldd	r24, Y+32	; 0x20
    4d1a:	8f 93       	push	r24
    4d1c:	b2 01       	movw	r22, r4
    4d1e:	05 2c       	mov	r0, r5
    4d20:	00 0c       	add	r0, r0
    4d22:	88 0b       	sbc	r24, r24
    4d24:	99 0b       	sbc	r25, r25
    4d26:	0c d2       	rcall	.+1048   	; 0x5140 <__floatsisf>
    4d28:	9b 01       	movw	r18, r22
    4d2a:	ac 01       	movw	r20, r24
    4d2c:	25 96       	adiw	r28, 0x05	; 5
    4d2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d30:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d32:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d34:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d36:	25 97       	sbiw	r28, 0x05	; 5
    4d38:	86 d0       	rcall	.+268    	; 0x4e46 <__subsf3>
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	4a e7       	ldi	r20, 0x7A	; 122
    4d40:	54 e4       	ldi	r21, 0x44	; 68
    4d42:	0a d3       	rcall	.+1556   	; 0x5358 <__mulsf3>
    4d44:	ca d1       	rcall	.+916    	; 0x50da <__fixsfsi>
    4d46:	9b 01       	movw	r18, r22
    4d48:	77 23       	and	r23, r23
    4d4a:	24 f4       	brge	.+8      	; 0x4d54 <main+0x316>
    4d4c:	22 27       	eor	r18, r18
    4d4e:	33 27       	eor	r19, r19
    4d50:	26 1b       	sub	r18, r22
    4d52:	37 0b       	sbc	r19, r23
    4d54:	3f 93       	push	r19
    4d56:	2f 93       	push	r18
    4d58:	5f 92       	push	r5
    4d5a:	4f 92       	push	r4
    4d5c:	2d a9       	ldd	r18, Y+53	; 0x35
    4d5e:	3e a9       	ldd	r19, Y+54	; 0x36
    4d60:	b9 01       	movw	r22, r18
    4d62:	33 0f       	add	r19, r19
    4d64:	88 0b       	sbc	r24, r24
    4d66:	99 0b       	sbc	r25, r25
    4d68:	eb d1       	rcall	.+982    	; 0x5140 <__floatsisf>
    4d6a:	9b 01       	movw	r18, r22
    4d6c:	ac 01       	movw	r20, r24
    4d6e:	21 96       	adiw	r28, 0x01	; 1
    4d70:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d72:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d78:	21 97       	sbiw	r28, 0x01	; 1
    4d7a:	65 d0       	rcall	.+202    	; 0x4e46 <__subsf3>
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	4a e7       	ldi	r20, 0x7A	; 122
    4d82:	54 e4       	ldi	r21, 0x44	; 68
    4d84:	e9 d2       	rcall	.+1490   	; 0x5358 <__mulsf3>
    4d86:	a9 d1       	rcall	.+850    	; 0x50da <__fixsfsi>
    4d88:	9b 01       	movw	r18, r22
    4d8a:	77 23       	and	r23, r23
    4d8c:	24 f4       	brge	.+8      	; 0x4d96 <main+0x358>
    4d8e:	22 27       	eor	r18, r18
    4d90:	33 27       	eor	r19, r19
    4d92:	26 1b       	sub	r18, r22
    4d94:	37 0b       	sbc	r19, r23
    4d96:	3f 93       	push	r19
    4d98:	2f 93       	push	r18
    4d9a:	3e a9       	ldd	r19, Y+54	; 0x36
    4d9c:	3f 93       	push	r19
    4d9e:	8d a9       	ldd	r24, Y+53	; 0x35
    4da0:	8f 93       	push	r24
    4da2:	a9 ad       	ldd	r26, Y+57	; 0x39
    4da4:	ba ad       	ldd	r27, Y+58	; 0x3a
    4da6:	bd 01       	movw	r22, r26
    4da8:	bb 0f       	add	r27, r27
    4daa:	88 0b       	sbc	r24, r24
    4dac:	99 0b       	sbc	r25, r25
    4dae:	c8 d1       	rcall	.+912    	; 0x5140 <__floatsisf>
    4db0:	9b 01       	movw	r18, r22
    4db2:	ac 01       	movw	r20, r24
    4db4:	29 96       	adiw	r28, 0x09	; 9
    4db6:	6c ad       	ldd	r22, Y+60	; 0x3c
    4db8:	7d ad       	ldd	r23, Y+61	; 0x3d
    4dba:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dbe:	29 97       	sbiw	r28, 0x09	; 9
    4dc0:	42 d0       	rcall	.+132    	; 0x4e46 <__subsf3>
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	4a e7       	ldi	r20, 0x7A	; 122
    4dc8:	54 e4       	ldi	r21, 0x44	; 68
    4dca:	c6 d2       	rcall	.+1420   	; 0x5358 <__mulsf3>
    4dcc:	86 d1       	rcall	.+780    	; 0x50da <__fixsfsi>
    4dce:	9b 01       	movw	r18, r22
    4dd0:	77 23       	and	r23, r23
    4dd2:	24 f4       	brge	.+8      	; 0x4ddc <main+0x39e>
    4dd4:	22 27       	eor	r18, r18
    4dd6:	33 27       	eor	r19, r19
    4dd8:	26 1b       	sub	r18, r22
    4dda:	37 0b       	sbc	r19, r23
    4ddc:	3f 93       	push	r19
    4dde:	2f 93       	push	r18
    4de0:	ba ad       	ldd	r27, Y+58	; 0x3a
    4de2:	bf 93       	push	r27
    4de4:	e9 ad       	ldd	r30, Y+57	; 0x39
    4de6:	ef 93       	push	r30
    4de8:	bf 92       	push	r11
    4dea:	af 92       	push	r10
    4dec:	9f 92       	push	r9
    4dee:	8f 92       	push	r8
    4df0:	22 eb       	ldi	r18, 0xB2	; 178
    4df2:	30 e2       	ldi	r19, 0x20	; 32
    4df4:	3f 93       	push	r19
    4df6:	2f 93       	push	r18
    4df8:	ec d3       	rcall	.+2008   	; 0x55d2 <printf>
			imu_data.data.mag_x, imu_data.data.mag_y, imu_data.data.mag_z,
			imu_data.data.imu_temperature,
			adcValues[0], adcValues[1], adcValues[2], adcValues[3]);
		
		GPSCounter = 0;
		while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    4dfa:	cd bf       	out	0x3d, r28	; 61
    4dfc:	de bf       	out	0x3e, r29	; 62
			imu_data.data.gyro_x, imu_data.data.gyro_y, imu_data.data.gyro_z,
			imu_data.data.mag_x, imu_data.data.mag_y, imu_data.data.mag_z,
			imu_data.data.imu_temperature,
			adcValues[0], adcValues[1], adcValues[2], adcValues[3]);
		
		GPSCounter = 0;
    4dfe:	00 e0       	ldi	r16, 0x00	; 0
    4e00:	10 e0       	ldi	r17, 0x00	; 0
		while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    4e02:	0f c0       	rjmp	.+30     	; 0x4e22 <main+0x3e4>
			printf("%c", gps_data);
    4e04:	8c a9       	ldd	r24, Y+52	; 0x34
    4e06:	08 2e       	mov	r0, r24
    4e08:	00 0c       	add	r0, r0
    4e0a:	99 0b       	sbc	r25, r25
    4e0c:	f5 d3       	rcall	.+2026   	; 0x55f8 <putchar>
    4e0e:	0f 5f       	subi	r16, 0xFF	; 255
			GPSCounter++;
    4e10:	1f 4f       	sbci	r17, 0xFF	; 255
    4e12:	91 e0       	ldi	r25, 0x01	; 1
			if (GPSCounter>250)
			{
				GPSLock = 1;
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	0b 3f       	cpi	r16, 0xFB	; 251
    4e18:	11 05       	cpc	r17, r1
    4e1a:	0c f4       	brge	.+2      	; 0x4e1e <main+0x3e0>
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	c9 2e       	mov	r12, r25
    4e20:	d8 2e       	mov	r13, r24
    4e22:	be 01       	movw	r22, r28
			imu_data.data.mag_x, imu_data.data.mag_y, imu_data.data.mag_z,
			imu_data.data.imu_temperature,
			adcValues[0], adcValues[1], adcValues[2], adcValues[3]);
		
		GPSCounter = 0;
		while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    4e24:	6c 5c       	subi	r22, 0xCC	; 204
    4e26:	7f 4f       	sbci	r23, 0xFF	; 255
    4e28:	8c ee       	ldi	r24, 0xEC	; 236
    4e2a:	92 e2       	ldi	r25, 0x22	; 34
    4e2c:	b6 dd       	rcall	.-1172   	; 0x499a <ring_pop>
    4e2e:	89 2b       	or	r24, r25
    4e30:	49 f3       	breq	.-46     	; 0x4e04 <main+0x3c6>
    4e32:	8a e0       	ldi	r24, 0x0A	; 10
    4e34:	90 e0       	ldi	r25, 0x00	; 0
				GPSLock = 1;
			}else{
				GPSLock = 0;
			}
		}
		printf("\n");
    4e36:	e0 d3       	rcall	.+1984   	; 0x55f8 <putchar>
    4e38:	55 dc       	rcall	.-1878   	; 0x46e4 <uart_gps_init>
    4e3a:	bf ef       	ldi	r27, 0xFF	; 255
    4e3c:	8b 1a       	sub	r8, r27
		
		// turn sd off, gps on
		uart_gps_init();
    4e3e:	9b 0a       	sbc	r9, r27
    4e40:	ab 0a       	sbc	r10, r27
		
		packetNumber = packetNumber + 1;
    4e42:	bb 0a       	sbc	r11, r27
    4e44:	c3 ce       	rjmp	.-634    	; 0x4bcc <main+0x18e>

00004e46 <__subsf3>:
    4e46:	50 58       	subi	r21, 0x80	; 128

00004e48 <__addsf3>:
    4e48:	bb 27       	eor	r27, r27
    4e4a:	aa 27       	eor	r26, r26
	}
    4e4c:	0e d0       	rcall	.+28     	; 0x4e6a <__addsf3x>
    4e4e:	3f c2       	rjmp	.+1150   	; 0x52ce <__fp_round>
    4e50:	30 d2       	rcall	.+1120   	; 0x52b2 <__fp_pscA>
    4e52:	30 f0       	brcs	.+12     	; 0x4e60 <__addsf3+0x18>
    4e54:	35 d2       	rcall	.+1130   	; 0x52c0 <__fp_pscB>
    4e56:	20 f0       	brcs	.+8      	; 0x4e60 <__addsf3+0x18>
    4e58:	31 f4       	brne	.+12     	; 0x4e66 <__addsf3+0x1e>
    4e5a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e5c:	11 f4       	brne	.+4      	; 0x4e62 <__addsf3+0x1a>
    4e5e:	1e f4       	brtc	.+6      	; 0x4e66 <__addsf3+0x1e>
    4e60:	ef c1       	rjmp	.+990    	; 0x5240 <__fp_nan>
    4e62:	0e f4       	brtc	.+2      	; 0x4e66 <__addsf3+0x1e>
    4e64:	e0 95       	com	r30
    4e66:	e7 fb       	bst	r30, 7
    4e68:	e5 c1       	rjmp	.+970    	; 0x5234 <__fp_inf>

00004e6a <__addsf3x>:
    4e6a:	e9 2f       	mov	r30, r25
    4e6c:	41 d2       	rcall	.+1154   	; 0x52f0 <__fp_split3>
    4e6e:	80 f3       	brcs	.-32     	; 0x4e50 <__addsf3+0x8>
    4e70:	ba 17       	cp	r27, r26
    4e72:	62 07       	cpc	r22, r18
    4e74:	73 07       	cpc	r23, r19
    4e76:	84 07       	cpc	r24, r20
    4e78:	95 07       	cpc	r25, r21
    4e7a:	18 f0       	brcs	.+6      	; 0x4e82 <__addsf3x+0x18>
    4e7c:	71 f4       	brne	.+28     	; 0x4e9a <__addsf3x+0x30>
    4e7e:	9e f5       	brtc	.+102    	; 0x4ee6 <__addsf3x+0x7c>
    4e80:	59 c2       	rjmp	.+1202   	; 0x5334 <__fp_zero>
    4e82:	0e f4       	brtc	.+2      	; 0x4e86 <__addsf3x+0x1c>
    4e84:	e0 95       	com	r30
    4e86:	0b 2e       	mov	r0, r27
    4e88:	ba 2f       	mov	r27, r26
    4e8a:	a0 2d       	mov	r26, r0
    4e8c:	0b 01       	movw	r0, r22
    4e8e:	b9 01       	movw	r22, r18
    4e90:	90 01       	movw	r18, r0
    4e92:	0c 01       	movw	r0, r24
    4e94:	ca 01       	movw	r24, r20
    4e96:	a0 01       	movw	r20, r0
    4e98:	11 24       	eor	r1, r1
    4e9a:	ff 27       	eor	r31, r31
    4e9c:	59 1b       	sub	r21, r25
    4e9e:	99 f0       	breq	.+38     	; 0x4ec6 <__addsf3x+0x5c>
    4ea0:	59 3f       	cpi	r21, 0xF9	; 249
    4ea2:	50 f4       	brcc	.+20     	; 0x4eb8 <__addsf3x+0x4e>
    4ea4:	50 3e       	cpi	r21, 0xE0	; 224
    4ea6:	68 f1       	brcs	.+90     	; 0x4f02 <__addsf3x+0x98>
    4ea8:	1a 16       	cp	r1, r26
    4eaa:	f0 40       	sbci	r31, 0x00	; 0
    4eac:	a2 2f       	mov	r26, r18
    4eae:	23 2f       	mov	r18, r19
    4eb0:	34 2f       	mov	r19, r20
    4eb2:	44 27       	eor	r20, r20
    4eb4:	58 5f       	subi	r21, 0xF8	; 248
    4eb6:	f3 cf       	rjmp	.-26     	; 0x4e9e <__addsf3x+0x34>
    4eb8:	46 95       	lsr	r20
    4eba:	37 95       	ror	r19
    4ebc:	27 95       	ror	r18
    4ebe:	a7 95       	ror	r26
    4ec0:	f0 40       	sbci	r31, 0x00	; 0
    4ec2:	53 95       	inc	r21
    4ec4:	c9 f7       	brne	.-14     	; 0x4eb8 <__addsf3x+0x4e>
    4ec6:	7e f4       	brtc	.+30     	; 0x4ee6 <__addsf3x+0x7c>
    4ec8:	1f 16       	cp	r1, r31
    4eca:	ba 0b       	sbc	r27, r26
    4ecc:	62 0b       	sbc	r22, r18
    4ece:	73 0b       	sbc	r23, r19
    4ed0:	84 0b       	sbc	r24, r20
    4ed2:	ba f0       	brmi	.+46     	; 0x4f02 <__addsf3x+0x98>
    4ed4:	91 50       	subi	r25, 0x01	; 1
    4ed6:	a1 f0       	breq	.+40     	; 0x4f00 <__addsf3x+0x96>
    4ed8:	ff 0f       	add	r31, r31
    4eda:	bb 1f       	adc	r27, r27
    4edc:	66 1f       	adc	r22, r22
    4ede:	77 1f       	adc	r23, r23
    4ee0:	88 1f       	adc	r24, r24
    4ee2:	c2 f7       	brpl	.-16     	; 0x4ed4 <__addsf3x+0x6a>
    4ee4:	0e c0       	rjmp	.+28     	; 0x4f02 <__addsf3x+0x98>
    4ee6:	ba 0f       	add	r27, r26
    4ee8:	62 1f       	adc	r22, r18
    4eea:	73 1f       	adc	r23, r19
    4eec:	84 1f       	adc	r24, r20
    4eee:	48 f4       	brcc	.+18     	; 0x4f02 <__addsf3x+0x98>
    4ef0:	87 95       	ror	r24
    4ef2:	77 95       	ror	r23
    4ef4:	67 95       	ror	r22
    4ef6:	b7 95       	ror	r27
    4ef8:	f7 95       	ror	r31
    4efa:	9e 3f       	cpi	r25, 0xFE	; 254
    4efc:	08 f0       	brcs	.+2      	; 0x4f00 <__addsf3x+0x96>
    4efe:	b3 cf       	rjmp	.-154    	; 0x4e66 <__addsf3+0x1e>
    4f00:	93 95       	inc	r25
    4f02:	88 0f       	add	r24, r24
    4f04:	08 f0       	brcs	.+2      	; 0x4f08 <__addsf3x+0x9e>
    4f06:	99 27       	eor	r25, r25
    4f08:	ee 0f       	add	r30, r30
    4f0a:	97 95       	ror	r25
    4f0c:	87 95       	ror	r24
    4f0e:	08 95       	ret

00004f10 <asin>:
    4f10:	9f 93       	push	r25
    4f12:	9f 77       	andi	r25, 0x7F	; 127
    4f14:	ee e3       	ldi	r30, 0x3E	; 62
    4f16:	89 37       	cpi	r24, 0x79	; 121
    4f18:	9e 07       	cpc	r25, r30
    4f1a:	20 f4       	brcc	.+8      	; 0x4f24 <asin+0x14>
    4f1c:	ec ef       	ldi	r30, 0xFC	; 252
    4f1e:	f1 e0       	ldi	r31, 0x01	; 1
    4f20:	b7 d1       	rcall	.+878    	; 0x5290 <__fp_powsodd>
    4f22:	09 c0       	rjmp	.+18     	; 0x4f36 <asin+0x26>
    4f24:	48 d1       	rcall	.+656    	; 0x51b6 <__fp_arccos>
    4f26:	90 58       	subi	r25, 0x80	; 128
    4f28:	a2 ea       	ldi	r26, 0xA2	; 162
    4f2a:	2a ed       	ldi	r18, 0xDA	; 218
    4f2c:	3f e0       	ldi	r19, 0x0F	; 15
    4f2e:	49 ec       	ldi	r20, 0xC9	; 201
    4f30:	5f e3       	ldi	r21, 0x3F	; 63
    4f32:	9b df       	rcall	.-202    	; 0x4e6a <__addsf3x>
    4f34:	cc d1       	rcall	.+920    	; 0x52ce <__fp_round>
    4f36:	0f 90       	pop	r0
    4f38:	07 fc       	sbrc	r0, 7
    4f3a:	90 58       	subi	r25, 0x80	; 128
    4f3c:	08 95       	ret
    4f3e:	b9 d1       	rcall	.+882    	; 0x52b2 <__fp_pscA>
    4f40:	58 f0       	brcs	.+22     	; 0x4f58 <asin+0x48>
    4f42:	80 e8       	ldi	r24, 0x80	; 128
    4f44:	91 e0       	ldi	r25, 0x01	; 1
    4f46:	09 f4       	brne	.+2      	; 0x4f4a <asin+0x3a>
    4f48:	9e ef       	ldi	r25, 0xFE	; 254
    4f4a:	ba d1       	rcall	.+884    	; 0x52c0 <__fp_pscB>
    4f4c:	28 f0       	brcs	.+10     	; 0x4f58 <asin+0x48>
    4f4e:	40 e8       	ldi	r20, 0x80	; 128
    4f50:	51 e0       	ldi	r21, 0x01	; 1
    4f52:	59 f4       	brne	.+22     	; 0x4f6a <atan2+0xe>
    4f54:	5e ef       	ldi	r21, 0xFE	; 254
    4f56:	09 c0       	rjmp	.+18     	; 0x4f6a <atan2+0xe>
    4f58:	73 c1       	rjmp	.+742    	; 0x5240 <__fp_nan>
    4f5a:	ec c1       	rjmp	.+984    	; 0x5334 <__fp_zero>

00004f5c <atan2>:
    4f5c:	e9 2f       	mov	r30, r25
    4f5e:	e0 78       	andi	r30, 0x80	; 128
    4f60:	c7 d1       	rcall	.+910    	; 0x52f0 <__fp_split3>
    4f62:	68 f3       	brcs	.-38     	; 0x4f3e <asin+0x2e>
    4f64:	09 2e       	mov	r0, r25
    4f66:	05 2a       	or	r0, r21
    4f68:	c1 f3       	breq	.-16     	; 0x4f5a <asin+0x4a>
    4f6a:	26 17       	cp	r18, r22
    4f6c:	37 07       	cpc	r19, r23
    4f6e:	48 07       	cpc	r20, r24
    4f70:	59 07       	cpc	r21, r25
    4f72:	38 f0       	brcs	.+14     	; 0x4f82 <atan2+0x26>
    4f74:	0e 2e       	mov	r0, r30
    4f76:	07 f8       	bld	r0, 7
    4f78:	e0 25       	eor	r30, r0
    4f7a:	69 f0       	breq	.+26     	; 0x4f96 <atan2+0x3a>
    4f7c:	e0 25       	eor	r30, r0
    4f7e:	e0 64       	ori	r30, 0x40	; 64
    4f80:	0a c0       	rjmp	.+20     	; 0x4f96 <atan2+0x3a>
    4f82:	ef 63       	ori	r30, 0x3F	; 63
    4f84:	07 f8       	bld	r0, 7
    4f86:	00 94       	com	r0
    4f88:	07 fa       	bst	r0, 7
    4f8a:	db 01       	movw	r26, r22
    4f8c:	b9 01       	movw	r22, r18
    4f8e:	9d 01       	movw	r18, r26
    4f90:	dc 01       	movw	r26, r24
    4f92:	ca 01       	movw	r24, r20
    4f94:	ad 01       	movw	r20, r26
    4f96:	ef 93       	push	r30
    4f98:	47 d0       	rcall	.+142    	; 0x5028 <__divsf3_pse>
    4f9a:	99 d1       	rcall	.+818    	; 0x52ce <__fp_round>
    4f9c:	0a d0       	rcall	.+20     	; 0x4fb2 <atan>
    4f9e:	5f 91       	pop	r21
    4fa0:	55 23       	and	r21, r21
    4fa2:	31 f0       	breq	.+12     	; 0x4fb0 <atan2+0x54>
    4fa4:	2b ed       	ldi	r18, 0xDB	; 219
    4fa6:	3f e0       	ldi	r19, 0x0F	; 15
    4fa8:	49 e4       	ldi	r20, 0x49	; 73
    4faa:	50 fd       	sbrc	r21, 0
    4fac:	49 ec       	ldi	r20, 0xC9	; 201
    4fae:	4c cf       	rjmp	.-360    	; 0x4e48 <__addsf3>
    4fb0:	08 95       	ret

00004fb2 <atan>:
    4fb2:	df 93       	push	r29
    4fb4:	dd 27       	eor	r29, r29
    4fb6:	b9 2f       	mov	r27, r25
    4fb8:	bf 77       	andi	r27, 0x7F	; 127
    4fba:	40 e8       	ldi	r20, 0x80	; 128
    4fbc:	5f e3       	ldi	r21, 0x3F	; 63
    4fbe:	16 16       	cp	r1, r22
    4fc0:	17 06       	cpc	r1, r23
    4fc2:	48 07       	cpc	r20, r24
    4fc4:	5b 07       	cpc	r21, r27
    4fc6:	10 f4       	brcc	.+4      	; 0x4fcc <atan+0x1a>
    4fc8:	d9 2f       	mov	r29, r25
    4fca:	bf d1       	rcall	.+894    	; 0x534a <inverse>
    4fcc:	9f 93       	push	r25
    4fce:	8f 93       	push	r24
    4fd0:	7f 93       	push	r23
    4fd2:	6f 93       	push	r22
    4fd4:	66 d2       	rcall	.+1228   	; 0x54a2 <square>
    4fd6:	e0 e1       	ldi	r30, 0x10	; 16
    4fd8:	f2 e0       	ldi	r31, 0x02	; 2
    4fda:	35 d1       	rcall	.+618    	; 0x5246 <__fp_powser>
    4fdc:	78 d1       	rcall	.+752    	; 0x52ce <__fp_round>
    4fde:	2f 91       	pop	r18
    4fe0:	3f 91       	pop	r19
    4fe2:	4f 91       	pop	r20
    4fe4:	5f 91       	pop	r21
    4fe6:	c4 d1       	rcall	.+904    	; 0x5370 <__mulsf3x>
    4fe8:	dd 23       	and	r29, r29
    4fea:	49 f0       	breq	.+18     	; 0x4ffe <atan+0x4c>
    4fec:	90 58       	subi	r25, 0x80	; 128
    4fee:	a2 ea       	ldi	r26, 0xA2	; 162
    4ff0:	2a ed       	ldi	r18, 0xDA	; 218
    4ff2:	3f e0       	ldi	r19, 0x0F	; 15
    4ff4:	49 ec       	ldi	r20, 0xC9	; 201
    4ff6:	5f e3       	ldi	r21, 0x3F	; 63
    4ff8:	d0 78       	andi	r29, 0x80	; 128
    4ffa:	5d 27       	eor	r21, r29
    4ffc:	36 df       	rcall	.-404    	; 0x4e6a <__addsf3x>
    4ffe:	df 91       	pop	r29
    5000:	66 c1       	rjmp	.+716    	; 0x52ce <__fp_round>

00005002 <__cmpsf2>:
    5002:	f4 d0       	rcall	.+488    	; 0x51ec <__fp_cmp>
    5004:	08 f4       	brcc	.+2      	; 0x5008 <__cmpsf2+0x6>
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	08 95       	ret

0000500a <__divsf3>:
    500a:	0c d0       	rcall	.+24     	; 0x5024 <__divsf3x>
    500c:	60 c1       	rjmp	.+704    	; 0x52ce <__fp_round>
    500e:	58 d1       	rcall	.+688    	; 0x52c0 <__fp_pscB>
    5010:	40 f0       	brcs	.+16     	; 0x5022 <__divsf3+0x18>
    5012:	4f d1       	rcall	.+670    	; 0x52b2 <__fp_pscA>
    5014:	30 f0       	brcs	.+12     	; 0x5022 <__divsf3+0x18>
    5016:	21 f4       	brne	.+8      	; 0x5020 <__divsf3+0x16>
    5018:	5f 3f       	cpi	r21, 0xFF	; 255
    501a:	19 f0       	breq	.+6      	; 0x5022 <__divsf3+0x18>
    501c:	0b c1       	rjmp	.+534    	; 0x5234 <__fp_inf>
    501e:	51 11       	cpse	r21, r1
    5020:	8a c1       	rjmp	.+788    	; 0x5336 <__fp_szero>
    5022:	0e c1       	rjmp	.+540    	; 0x5240 <__fp_nan>

00005024 <__divsf3x>:
    5024:	65 d1       	rcall	.+714    	; 0x52f0 <__fp_split3>
    5026:	98 f3       	brcs	.-26     	; 0x500e <__divsf3+0x4>

00005028 <__divsf3_pse>:
    5028:	99 23       	and	r25, r25
    502a:	c9 f3       	breq	.-14     	; 0x501e <__divsf3+0x14>
    502c:	55 23       	and	r21, r21
    502e:	b1 f3       	breq	.-20     	; 0x501c <__divsf3+0x12>
    5030:	95 1b       	sub	r25, r21
    5032:	55 0b       	sbc	r21, r21
    5034:	bb 27       	eor	r27, r27
    5036:	aa 27       	eor	r26, r26
    5038:	62 17       	cp	r22, r18
    503a:	73 07       	cpc	r23, r19
    503c:	84 07       	cpc	r24, r20
    503e:	38 f0       	brcs	.+14     	; 0x504e <__divsf3_pse+0x26>
    5040:	9f 5f       	subi	r25, 0xFF	; 255
    5042:	5f 4f       	sbci	r21, 0xFF	; 255
    5044:	22 0f       	add	r18, r18
    5046:	33 1f       	adc	r19, r19
    5048:	44 1f       	adc	r20, r20
    504a:	aa 1f       	adc	r26, r26
    504c:	a9 f3       	breq	.-22     	; 0x5038 <__divsf3_pse+0x10>
    504e:	33 d0       	rcall	.+102    	; 0x50b6 <__divsf3_pse+0x8e>
    5050:	0e 2e       	mov	r0, r30
    5052:	3a f0       	brmi	.+14     	; 0x5062 <__divsf3_pse+0x3a>
    5054:	e0 e8       	ldi	r30, 0x80	; 128
    5056:	30 d0       	rcall	.+96     	; 0x50b8 <__divsf3_pse+0x90>
    5058:	91 50       	subi	r25, 0x01	; 1
    505a:	50 40       	sbci	r21, 0x00	; 0
    505c:	e6 95       	lsr	r30
    505e:	00 1c       	adc	r0, r0
    5060:	ca f7       	brpl	.-14     	; 0x5054 <__divsf3_pse+0x2c>
    5062:	29 d0       	rcall	.+82     	; 0x50b6 <__divsf3_pse+0x8e>
    5064:	fe 2f       	mov	r31, r30
    5066:	27 d0       	rcall	.+78     	; 0x50b6 <__divsf3_pse+0x8e>
    5068:	66 0f       	add	r22, r22
    506a:	77 1f       	adc	r23, r23
    506c:	88 1f       	adc	r24, r24
    506e:	bb 1f       	adc	r27, r27
    5070:	26 17       	cp	r18, r22
    5072:	37 07       	cpc	r19, r23
    5074:	48 07       	cpc	r20, r24
    5076:	ab 07       	cpc	r26, r27
    5078:	b0 e8       	ldi	r27, 0x80	; 128
    507a:	09 f0       	breq	.+2      	; 0x507e <__divsf3_pse+0x56>
    507c:	bb 0b       	sbc	r27, r27
    507e:	80 2d       	mov	r24, r0
    5080:	bf 01       	movw	r22, r30
    5082:	ff 27       	eor	r31, r31
    5084:	93 58       	subi	r25, 0x83	; 131
    5086:	5f 4f       	sbci	r21, 0xFF	; 255
    5088:	2a f0       	brmi	.+10     	; 0x5094 <__divsf3_pse+0x6c>
    508a:	9e 3f       	cpi	r25, 0xFE	; 254
    508c:	51 05       	cpc	r21, r1
    508e:	68 f0       	brcs	.+26     	; 0x50aa <__divsf3_pse+0x82>
    5090:	d1 c0       	rjmp	.+418    	; 0x5234 <__fp_inf>
    5092:	51 c1       	rjmp	.+674    	; 0x5336 <__fp_szero>
    5094:	5f 3f       	cpi	r21, 0xFF	; 255
    5096:	ec f3       	brlt	.-6      	; 0x5092 <__divsf3_pse+0x6a>
    5098:	98 3e       	cpi	r25, 0xE8	; 232
    509a:	dc f3       	brlt	.-10     	; 0x5092 <__divsf3_pse+0x6a>
    509c:	86 95       	lsr	r24
    509e:	77 95       	ror	r23
    50a0:	67 95       	ror	r22
    50a2:	b7 95       	ror	r27
    50a4:	f7 95       	ror	r31
    50a6:	9f 5f       	subi	r25, 0xFF	; 255
    50a8:	c9 f7       	brne	.-14     	; 0x509c <__divsf3_pse+0x74>
    50aa:	88 0f       	add	r24, r24
    50ac:	91 1d       	adc	r25, r1
    50ae:	96 95       	lsr	r25
    50b0:	87 95       	ror	r24
    50b2:	97 f9       	bld	r25, 7
    50b4:	08 95       	ret
    50b6:	e1 e0       	ldi	r30, 0x01	; 1
    50b8:	66 0f       	add	r22, r22
    50ba:	77 1f       	adc	r23, r23
    50bc:	88 1f       	adc	r24, r24
    50be:	bb 1f       	adc	r27, r27
    50c0:	62 17       	cp	r22, r18
    50c2:	73 07       	cpc	r23, r19
    50c4:	84 07       	cpc	r24, r20
    50c6:	ba 07       	cpc	r27, r26
    50c8:	20 f0       	brcs	.+8      	; 0x50d2 <__divsf3_pse+0xaa>
    50ca:	62 1b       	sub	r22, r18
    50cc:	73 0b       	sbc	r23, r19
    50ce:	84 0b       	sbc	r24, r20
    50d0:	ba 0b       	sbc	r27, r26
    50d2:	ee 1f       	adc	r30, r30
    50d4:	88 f7       	brcc	.-30     	; 0x50b8 <__divsf3_pse+0x90>
    50d6:	e0 95       	com	r30
    50d8:	08 95       	ret

000050da <__fixsfsi>:
    50da:	04 d0       	rcall	.+8      	; 0x50e4 <__fixunssfsi>
    50dc:	68 94       	set
    50de:	b1 11       	cpse	r27, r1
    50e0:	2a c1       	rjmp	.+596    	; 0x5336 <__fp_szero>
    50e2:	08 95       	ret

000050e4 <__fixunssfsi>:
    50e4:	0d d1       	rcall	.+538    	; 0x5300 <__fp_splitA>
    50e6:	88 f0       	brcs	.+34     	; 0x510a <__fixunssfsi+0x26>
    50e8:	9f 57       	subi	r25, 0x7F	; 127
    50ea:	90 f0       	brcs	.+36     	; 0x5110 <__fixunssfsi+0x2c>
    50ec:	b9 2f       	mov	r27, r25
    50ee:	99 27       	eor	r25, r25
    50f0:	b7 51       	subi	r27, 0x17	; 23
    50f2:	a0 f0       	brcs	.+40     	; 0x511c <__fixunssfsi+0x38>
    50f4:	d1 f0       	breq	.+52     	; 0x512a <__fixunssfsi+0x46>
    50f6:	66 0f       	add	r22, r22
    50f8:	77 1f       	adc	r23, r23
    50fa:	88 1f       	adc	r24, r24
    50fc:	99 1f       	adc	r25, r25
    50fe:	1a f0       	brmi	.+6      	; 0x5106 <__fixunssfsi+0x22>
    5100:	ba 95       	dec	r27
    5102:	c9 f7       	brne	.-14     	; 0x50f6 <__fixunssfsi+0x12>
    5104:	12 c0       	rjmp	.+36     	; 0x512a <__fixunssfsi+0x46>
    5106:	b1 30       	cpi	r27, 0x01	; 1
    5108:	81 f0       	breq	.+32     	; 0x512a <__fixunssfsi+0x46>
    510a:	14 d1       	rcall	.+552    	; 0x5334 <__fp_zero>
    510c:	b1 e0       	ldi	r27, 0x01	; 1
    510e:	08 95       	ret
    5110:	11 c1       	rjmp	.+546    	; 0x5334 <__fp_zero>
    5112:	67 2f       	mov	r22, r23
    5114:	78 2f       	mov	r23, r24
    5116:	88 27       	eor	r24, r24
    5118:	b8 5f       	subi	r27, 0xF8	; 248
    511a:	39 f0       	breq	.+14     	; 0x512a <__fixunssfsi+0x46>
    511c:	b9 3f       	cpi	r27, 0xF9	; 249
    511e:	cc f3       	brlt	.-14     	; 0x5112 <__fixunssfsi+0x2e>
    5120:	86 95       	lsr	r24
    5122:	77 95       	ror	r23
    5124:	67 95       	ror	r22
    5126:	b3 95       	inc	r27
    5128:	d9 f7       	brne	.-10     	; 0x5120 <__fixunssfsi+0x3c>
    512a:	3e f4       	brtc	.+14     	; 0x513a <__fixunssfsi+0x56>
    512c:	90 95       	com	r25
    512e:	80 95       	com	r24
    5130:	70 95       	com	r23
    5132:	61 95       	neg	r22
    5134:	7f 4f       	sbci	r23, 0xFF	; 255
    5136:	8f 4f       	sbci	r24, 0xFF	; 255
    5138:	9f 4f       	sbci	r25, 0xFF	; 255
    513a:	08 95       	ret

0000513c <__floatunsisf>:
    513c:	e8 94       	clt
    513e:	09 c0       	rjmp	.+18     	; 0x5152 <__floatsisf+0x12>

00005140 <__floatsisf>:
    5140:	97 fb       	bst	r25, 7
    5142:	3e f4       	brtc	.+14     	; 0x5152 <__floatsisf+0x12>
    5144:	90 95       	com	r25
    5146:	80 95       	com	r24
    5148:	70 95       	com	r23
    514a:	61 95       	neg	r22
    514c:	7f 4f       	sbci	r23, 0xFF	; 255
    514e:	8f 4f       	sbci	r24, 0xFF	; 255
    5150:	9f 4f       	sbci	r25, 0xFF	; 255
    5152:	99 23       	and	r25, r25
    5154:	a9 f0       	breq	.+42     	; 0x5180 <__floatsisf+0x40>
    5156:	f9 2f       	mov	r31, r25
    5158:	96 e9       	ldi	r25, 0x96	; 150
    515a:	bb 27       	eor	r27, r27
    515c:	93 95       	inc	r25
    515e:	f6 95       	lsr	r31
    5160:	87 95       	ror	r24
    5162:	77 95       	ror	r23
    5164:	67 95       	ror	r22
    5166:	b7 95       	ror	r27
    5168:	f1 11       	cpse	r31, r1
    516a:	f8 cf       	rjmp	.-16     	; 0x515c <__floatsisf+0x1c>
    516c:	fa f4       	brpl	.+62     	; 0x51ac <__floatsisf+0x6c>
    516e:	bb 0f       	add	r27, r27
    5170:	11 f4       	brne	.+4      	; 0x5176 <__floatsisf+0x36>
    5172:	60 ff       	sbrs	r22, 0
    5174:	1b c0       	rjmp	.+54     	; 0x51ac <__floatsisf+0x6c>
    5176:	6f 5f       	subi	r22, 0xFF	; 255
    5178:	7f 4f       	sbci	r23, 0xFF	; 255
    517a:	8f 4f       	sbci	r24, 0xFF	; 255
    517c:	9f 4f       	sbci	r25, 0xFF	; 255
    517e:	16 c0       	rjmp	.+44     	; 0x51ac <__floatsisf+0x6c>
    5180:	88 23       	and	r24, r24
    5182:	11 f0       	breq	.+4      	; 0x5188 <__floatsisf+0x48>
    5184:	96 e9       	ldi	r25, 0x96	; 150
    5186:	11 c0       	rjmp	.+34     	; 0x51aa <__floatsisf+0x6a>
    5188:	77 23       	and	r23, r23
    518a:	21 f0       	breq	.+8      	; 0x5194 <__floatsisf+0x54>
    518c:	9e e8       	ldi	r25, 0x8E	; 142
    518e:	87 2f       	mov	r24, r23
    5190:	76 2f       	mov	r23, r22
    5192:	05 c0       	rjmp	.+10     	; 0x519e <__floatsisf+0x5e>
    5194:	66 23       	and	r22, r22
    5196:	71 f0       	breq	.+28     	; 0x51b4 <__floatsisf+0x74>
    5198:	96 e8       	ldi	r25, 0x86	; 134
    519a:	86 2f       	mov	r24, r22
    519c:	70 e0       	ldi	r23, 0x00	; 0
    519e:	60 e0       	ldi	r22, 0x00	; 0
    51a0:	2a f0       	brmi	.+10     	; 0x51ac <__floatsisf+0x6c>
    51a2:	9a 95       	dec	r25
    51a4:	66 0f       	add	r22, r22
    51a6:	77 1f       	adc	r23, r23
    51a8:	88 1f       	adc	r24, r24
    51aa:	da f7       	brpl	.-10     	; 0x51a2 <__floatsisf+0x62>
    51ac:	88 0f       	add	r24, r24
    51ae:	96 95       	lsr	r25
    51b0:	87 95       	ror	r24
    51b2:	97 f9       	bld	r25, 7
    51b4:	08 95       	ret

000051b6 <__fp_arccos>:
    51b6:	df 93       	push	r29
    51b8:	cf 93       	push	r28
    51ba:	1f 93       	push	r17
    51bc:	0f 93       	push	r16
    51be:	8b 01       	movw	r16, r22
    51c0:	ec 01       	movw	r28, r24
    51c2:	ed e3       	ldi	r30, 0x3D	; 61
    51c4:	f2 e0       	ldi	r31, 0x02	; 2
    51c6:	3f d0       	rcall	.+126    	; 0x5246 <__fp_powser>
    51c8:	82 d0       	rcall	.+260    	; 0x52ce <__fp_round>
    51ca:	98 01       	movw	r18, r16
    51cc:	ae 01       	movw	r20, r28
    51ce:	8b 01       	movw	r16, r22
    51d0:	ec 01       	movw	r28, r24
    51d2:	60 e0       	ldi	r22, 0x00	; 0
    51d4:	70 e0       	ldi	r23, 0x00	; 0
    51d6:	80 e8       	ldi	r24, 0x80	; 128
    51d8:	9f e3       	ldi	r25, 0x3F	; 63
    51da:	35 de       	rcall	.-918    	; 0x4e46 <__subsf3>
    51dc:	24 d1       	rcall	.+584    	; 0x5426 <sqrt>
    51de:	98 01       	movw	r18, r16
    51e0:	ae 01       	movw	r20, r28
    51e2:	0f 91       	pop	r16
    51e4:	1f 91       	pop	r17
    51e6:	cf 91       	pop	r28
    51e8:	df 91       	pop	r29
    51ea:	c2 c0       	rjmp	.+388    	; 0x5370 <__mulsf3x>

000051ec <__fp_cmp>:
    51ec:	99 0f       	add	r25, r25
    51ee:	00 08       	sbc	r0, r0
    51f0:	55 0f       	add	r21, r21
    51f2:	aa 0b       	sbc	r26, r26
    51f4:	e0 e8       	ldi	r30, 0x80	; 128
    51f6:	fe ef       	ldi	r31, 0xFE	; 254
    51f8:	16 16       	cp	r1, r22
    51fa:	17 06       	cpc	r1, r23
    51fc:	e8 07       	cpc	r30, r24
    51fe:	f9 07       	cpc	r31, r25
    5200:	c0 f0       	brcs	.+48     	; 0x5232 <__fp_cmp+0x46>
    5202:	12 16       	cp	r1, r18
    5204:	13 06       	cpc	r1, r19
    5206:	e4 07       	cpc	r30, r20
    5208:	f5 07       	cpc	r31, r21
    520a:	98 f0       	brcs	.+38     	; 0x5232 <__fp_cmp+0x46>
    520c:	62 1b       	sub	r22, r18
    520e:	73 0b       	sbc	r23, r19
    5210:	84 0b       	sbc	r24, r20
    5212:	95 0b       	sbc	r25, r21
    5214:	39 f4       	brne	.+14     	; 0x5224 <__fp_cmp+0x38>
    5216:	0a 26       	eor	r0, r26
    5218:	61 f0       	breq	.+24     	; 0x5232 <__fp_cmp+0x46>
    521a:	23 2b       	or	r18, r19
    521c:	24 2b       	or	r18, r20
    521e:	25 2b       	or	r18, r21
    5220:	21 f4       	brne	.+8      	; 0x522a <__fp_cmp+0x3e>
    5222:	08 95       	ret
    5224:	0a 26       	eor	r0, r26
    5226:	09 f4       	brne	.+2      	; 0x522a <__fp_cmp+0x3e>
    5228:	a1 40       	sbci	r26, 0x01	; 1
    522a:	a6 95       	lsr	r26
    522c:	8f ef       	ldi	r24, 0xFF	; 255
    522e:	81 1d       	adc	r24, r1
    5230:	81 1d       	adc	r24, r1
    5232:	08 95       	ret

00005234 <__fp_inf>:
    5234:	97 f9       	bld	r25, 7
    5236:	9f 67       	ori	r25, 0x7F	; 127
    5238:	80 e8       	ldi	r24, 0x80	; 128
    523a:	70 e0       	ldi	r23, 0x00	; 0
    523c:	60 e0       	ldi	r22, 0x00	; 0
    523e:	08 95       	ret

00005240 <__fp_nan>:
    5240:	9f ef       	ldi	r25, 0xFF	; 255
    5242:	80 ec       	ldi	r24, 0xC0	; 192
    5244:	08 95       	ret

00005246 <__fp_powser>:
    5246:	df 93       	push	r29
    5248:	cf 93       	push	r28
    524a:	1f 93       	push	r17
    524c:	0f 93       	push	r16
    524e:	ff 92       	push	r15
    5250:	ef 92       	push	r14
    5252:	df 92       	push	r13
    5254:	7b 01       	movw	r14, r22
    5256:	8c 01       	movw	r16, r24
    5258:	68 94       	set
    525a:	05 c0       	rjmp	.+10     	; 0x5266 <__fp_powser+0x20>
    525c:	da 2e       	mov	r13, r26
    525e:	ef 01       	movw	r28, r30
    5260:	87 d0       	rcall	.+270    	; 0x5370 <__mulsf3x>
    5262:	fe 01       	movw	r30, r28
    5264:	e8 94       	clt
    5266:	a5 91       	lpm	r26, Z+
    5268:	25 91       	lpm	r18, Z+
    526a:	35 91       	lpm	r19, Z+
    526c:	45 91       	lpm	r20, Z+
    526e:	55 91       	lpm	r21, Z+
    5270:	ae f3       	brts	.-22     	; 0x525c <__fp_powser+0x16>
    5272:	ef 01       	movw	r28, r30
    5274:	fa dd       	rcall	.-1036   	; 0x4e6a <__addsf3x>
    5276:	fe 01       	movw	r30, r28
    5278:	97 01       	movw	r18, r14
    527a:	a8 01       	movw	r20, r16
    527c:	da 94       	dec	r13
    527e:	79 f7       	brne	.-34     	; 0x525e <__fp_powser+0x18>
    5280:	df 90       	pop	r13
    5282:	ef 90       	pop	r14
    5284:	ff 90       	pop	r15
    5286:	0f 91       	pop	r16
    5288:	1f 91       	pop	r17
    528a:	cf 91       	pop	r28
    528c:	df 91       	pop	r29
    528e:	08 95       	ret

00005290 <__fp_powsodd>:
    5290:	9f 93       	push	r25
    5292:	8f 93       	push	r24
    5294:	7f 93       	push	r23
    5296:	6f 93       	push	r22
    5298:	ff 93       	push	r31
    529a:	ef 93       	push	r30
    529c:	9b 01       	movw	r18, r22
    529e:	ac 01       	movw	r20, r24
    52a0:	5b d0       	rcall	.+182    	; 0x5358 <__mulsf3>
    52a2:	ef 91       	pop	r30
    52a4:	ff 91       	pop	r31
    52a6:	cf df       	rcall	.-98     	; 0x5246 <__fp_powser>
    52a8:	2f 91       	pop	r18
    52aa:	3f 91       	pop	r19
    52ac:	4f 91       	pop	r20
    52ae:	5f 91       	pop	r21
    52b0:	53 c0       	rjmp	.+166    	; 0x5358 <__mulsf3>

000052b2 <__fp_pscA>:
    52b2:	00 24       	eor	r0, r0
    52b4:	0a 94       	dec	r0
    52b6:	16 16       	cp	r1, r22
    52b8:	17 06       	cpc	r1, r23
    52ba:	18 06       	cpc	r1, r24
    52bc:	09 06       	cpc	r0, r25
    52be:	08 95       	ret

000052c0 <__fp_pscB>:
    52c0:	00 24       	eor	r0, r0
    52c2:	0a 94       	dec	r0
    52c4:	12 16       	cp	r1, r18
    52c6:	13 06       	cpc	r1, r19
    52c8:	14 06       	cpc	r1, r20
    52ca:	05 06       	cpc	r0, r21
    52cc:	08 95       	ret

000052ce <__fp_round>:
    52ce:	09 2e       	mov	r0, r25
    52d0:	03 94       	inc	r0
    52d2:	00 0c       	add	r0, r0
    52d4:	11 f4       	brne	.+4      	; 0x52da <__fp_round+0xc>
    52d6:	88 23       	and	r24, r24
    52d8:	52 f0       	brmi	.+20     	; 0x52ee <__fp_round+0x20>
    52da:	bb 0f       	add	r27, r27
    52dc:	40 f4       	brcc	.+16     	; 0x52ee <__fp_round+0x20>
    52de:	bf 2b       	or	r27, r31
    52e0:	11 f4       	brne	.+4      	; 0x52e6 <__fp_round+0x18>
    52e2:	60 ff       	sbrs	r22, 0
    52e4:	04 c0       	rjmp	.+8      	; 0x52ee <__fp_round+0x20>
    52e6:	6f 5f       	subi	r22, 0xFF	; 255
    52e8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ea:	8f 4f       	sbci	r24, 0xFF	; 255
    52ec:	9f 4f       	sbci	r25, 0xFF	; 255
    52ee:	08 95       	ret

000052f0 <__fp_split3>:
    52f0:	57 fd       	sbrc	r21, 7
    52f2:	90 58       	subi	r25, 0x80	; 128
    52f4:	44 0f       	add	r20, r20
    52f6:	55 1f       	adc	r21, r21
    52f8:	59 f0       	breq	.+22     	; 0x5310 <__fp_splitA+0x10>
    52fa:	5f 3f       	cpi	r21, 0xFF	; 255
    52fc:	71 f0       	breq	.+28     	; 0x531a <__fp_splitA+0x1a>
    52fe:	47 95       	ror	r20

00005300 <__fp_splitA>:
    5300:	88 0f       	add	r24, r24
    5302:	97 fb       	bst	r25, 7
    5304:	99 1f       	adc	r25, r25
    5306:	61 f0       	breq	.+24     	; 0x5320 <__fp_splitA+0x20>
    5308:	9f 3f       	cpi	r25, 0xFF	; 255
    530a:	79 f0       	breq	.+30     	; 0x532a <__fp_splitA+0x2a>
    530c:	87 95       	ror	r24
    530e:	08 95       	ret
    5310:	12 16       	cp	r1, r18
    5312:	13 06       	cpc	r1, r19
    5314:	14 06       	cpc	r1, r20
    5316:	55 1f       	adc	r21, r21
    5318:	f2 cf       	rjmp	.-28     	; 0x52fe <__fp_split3+0xe>
    531a:	46 95       	lsr	r20
    531c:	f1 df       	rcall	.-30     	; 0x5300 <__fp_splitA>
    531e:	08 c0       	rjmp	.+16     	; 0x5330 <__fp_splitA+0x30>
    5320:	16 16       	cp	r1, r22
    5322:	17 06       	cpc	r1, r23
    5324:	18 06       	cpc	r1, r24
    5326:	99 1f       	adc	r25, r25
    5328:	f1 cf       	rjmp	.-30     	; 0x530c <__fp_splitA+0xc>
    532a:	86 95       	lsr	r24
    532c:	71 05       	cpc	r23, r1
    532e:	61 05       	cpc	r22, r1
    5330:	08 94       	sec
    5332:	08 95       	ret

00005334 <__fp_zero>:
    5334:	e8 94       	clt

00005336 <__fp_szero>:
    5336:	bb 27       	eor	r27, r27
    5338:	66 27       	eor	r22, r22
    533a:	77 27       	eor	r23, r23
    533c:	cb 01       	movw	r24, r22
    533e:	97 f9       	bld	r25, 7
    5340:	08 95       	ret

00005342 <__gesf2>:
    5342:	54 df       	rcall	.-344    	; 0x51ec <__fp_cmp>
    5344:	08 f4       	brcc	.+2      	; 0x5348 <__gesf2+0x6>
    5346:	8f ef       	ldi	r24, 0xFF	; 255
    5348:	08 95       	ret

0000534a <inverse>:
    534a:	9b 01       	movw	r18, r22
    534c:	ac 01       	movw	r20, r24
    534e:	60 e0       	ldi	r22, 0x00	; 0
    5350:	70 e0       	ldi	r23, 0x00	; 0
    5352:	80 e8       	ldi	r24, 0x80	; 128
    5354:	9f e3       	ldi	r25, 0x3F	; 63
    5356:	59 ce       	rjmp	.-846    	; 0x500a <__divsf3>

00005358 <__mulsf3>:
    5358:	0b d0       	rcall	.+22     	; 0x5370 <__mulsf3x>
    535a:	b9 cf       	rjmp	.-142    	; 0x52ce <__fp_round>
    535c:	aa df       	rcall	.-172    	; 0x52b2 <__fp_pscA>
    535e:	28 f0       	brcs	.+10     	; 0x536a <__mulsf3+0x12>
    5360:	af df       	rcall	.-162    	; 0x52c0 <__fp_pscB>
    5362:	18 f0       	brcs	.+6      	; 0x536a <__mulsf3+0x12>
    5364:	95 23       	and	r25, r21
    5366:	09 f0       	breq	.+2      	; 0x536a <__mulsf3+0x12>
    5368:	65 cf       	rjmp	.-310    	; 0x5234 <__fp_inf>
    536a:	6a cf       	rjmp	.-300    	; 0x5240 <__fp_nan>
    536c:	11 24       	eor	r1, r1
    536e:	e3 cf       	rjmp	.-58     	; 0x5336 <__fp_szero>

00005370 <__mulsf3x>:
    5370:	bf df       	rcall	.-130    	; 0x52f0 <__fp_split3>
    5372:	a0 f3       	brcs	.-24     	; 0x535c <__mulsf3+0x4>

00005374 <__mulsf3_pse>:
    5374:	95 9f       	mul	r25, r21
    5376:	d1 f3       	breq	.-12     	; 0x536c <__mulsf3+0x14>
    5378:	95 0f       	add	r25, r21
    537a:	50 e0       	ldi	r21, 0x00	; 0
    537c:	55 1f       	adc	r21, r21
    537e:	62 9f       	mul	r22, r18
    5380:	f0 01       	movw	r30, r0
    5382:	72 9f       	mul	r23, r18
    5384:	bb 27       	eor	r27, r27
    5386:	f0 0d       	add	r31, r0
    5388:	b1 1d       	adc	r27, r1
    538a:	63 9f       	mul	r22, r19
    538c:	aa 27       	eor	r26, r26
    538e:	f0 0d       	add	r31, r0
    5390:	b1 1d       	adc	r27, r1
    5392:	aa 1f       	adc	r26, r26
    5394:	64 9f       	mul	r22, r20
    5396:	66 27       	eor	r22, r22
    5398:	b0 0d       	add	r27, r0
    539a:	a1 1d       	adc	r26, r1
    539c:	66 1f       	adc	r22, r22
    539e:	82 9f       	mul	r24, r18
    53a0:	22 27       	eor	r18, r18
    53a2:	b0 0d       	add	r27, r0
    53a4:	a1 1d       	adc	r26, r1
    53a6:	62 1f       	adc	r22, r18
    53a8:	73 9f       	mul	r23, r19
    53aa:	b0 0d       	add	r27, r0
    53ac:	a1 1d       	adc	r26, r1
    53ae:	62 1f       	adc	r22, r18
    53b0:	83 9f       	mul	r24, r19
    53b2:	a0 0d       	add	r26, r0
    53b4:	61 1d       	adc	r22, r1
    53b6:	22 1f       	adc	r18, r18
    53b8:	74 9f       	mul	r23, r20
    53ba:	33 27       	eor	r19, r19
    53bc:	a0 0d       	add	r26, r0
    53be:	61 1d       	adc	r22, r1
    53c0:	23 1f       	adc	r18, r19
    53c2:	84 9f       	mul	r24, r20
    53c4:	60 0d       	add	r22, r0
    53c6:	21 1d       	adc	r18, r1
    53c8:	82 2f       	mov	r24, r18
    53ca:	76 2f       	mov	r23, r22
    53cc:	6a 2f       	mov	r22, r26
    53ce:	11 24       	eor	r1, r1
    53d0:	9f 57       	subi	r25, 0x7F	; 127
    53d2:	50 40       	sbci	r21, 0x00	; 0
    53d4:	8a f0       	brmi	.+34     	; 0x53f8 <__mulsf3_pse+0x84>
    53d6:	e1 f0       	breq	.+56     	; 0x5410 <__mulsf3_pse+0x9c>
    53d8:	88 23       	and	r24, r24
    53da:	4a f0       	brmi	.+18     	; 0x53ee <__mulsf3_pse+0x7a>
    53dc:	ee 0f       	add	r30, r30
    53de:	ff 1f       	adc	r31, r31
    53e0:	bb 1f       	adc	r27, r27
    53e2:	66 1f       	adc	r22, r22
    53e4:	77 1f       	adc	r23, r23
    53e6:	88 1f       	adc	r24, r24
    53e8:	91 50       	subi	r25, 0x01	; 1
    53ea:	50 40       	sbci	r21, 0x00	; 0
    53ec:	a9 f7       	brne	.-22     	; 0x53d8 <__mulsf3_pse+0x64>
    53ee:	9e 3f       	cpi	r25, 0xFE	; 254
    53f0:	51 05       	cpc	r21, r1
    53f2:	70 f0       	brcs	.+28     	; 0x5410 <__mulsf3_pse+0x9c>
    53f4:	1f cf       	rjmp	.-450    	; 0x5234 <__fp_inf>
    53f6:	9f cf       	rjmp	.-194    	; 0x5336 <__fp_szero>
    53f8:	5f 3f       	cpi	r21, 0xFF	; 255
    53fa:	ec f3       	brlt	.-6      	; 0x53f6 <__mulsf3_pse+0x82>
    53fc:	98 3e       	cpi	r25, 0xE8	; 232
    53fe:	dc f3       	brlt	.-10     	; 0x53f6 <__mulsf3_pse+0x82>
    5400:	86 95       	lsr	r24
    5402:	77 95       	ror	r23
    5404:	67 95       	ror	r22
    5406:	b7 95       	ror	r27
    5408:	f7 95       	ror	r31
    540a:	e7 95       	ror	r30
    540c:	9f 5f       	subi	r25, 0xFF	; 255
    540e:	c1 f7       	brne	.-16     	; 0x5400 <__mulsf3_pse+0x8c>
    5410:	fe 2b       	or	r31, r30
    5412:	88 0f       	add	r24, r24
    5414:	91 1d       	adc	r25, r1
    5416:	96 95       	lsr	r25
    5418:	87 95       	ror	r24
    541a:	97 f9       	bld	r25, 7
    541c:	08 95       	ret
    541e:	11 f4       	brne	.+4      	; 0x5424 <__mulsf3_pse+0xb0>
    5420:	0e f4       	brtc	.+2      	; 0x5424 <__mulsf3_pse+0xb0>
    5422:	0e cf       	rjmp	.-484    	; 0x5240 <__fp_nan>
    5424:	41 c0       	rjmp	.+130    	; 0x54a8 <__fp_mpack>

00005426 <sqrt>:
    5426:	6c df       	rcall	.-296    	; 0x5300 <__fp_splitA>
    5428:	d0 f3       	brcs	.-12     	; 0x541e <__mulsf3_pse+0xaa>
    542a:	99 23       	and	r25, r25
    542c:	d9 f3       	breq	.-10     	; 0x5424 <__mulsf3_pse+0xb0>
    542e:	ce f3       	brts	.-14     	; 0x5422 <__mulsf3_pse+0xae>
    5430:	9f 57       	subi	r25, 0x7F	; 127
    5432:	55 0b       	sbc	r21, r21
    5434:	87 ff       	sbrs	r24, 7
    5436:	46 d0       	rcall	.+140    	; 0x54c4 <__fp_norm2>
    5438:	00 24       	eor	r0, r0
    543a:	a0 e6       	ldi	r26, 0x60	; 96
    543c:	40 ea       	ldi	r20, 0xA0	; 160
    543e:	90 01       	movw	r18, r0
    5440:	80 58       	subi	r24, 0x80	; 128
    5442:	56 95       	lsr	r21
    5444:	97 95       	ror	r25
    5446:	28 f4       	brcc	.+10     	; 0x5452 <sqrt+0x2c>
    5448:	80 5c       	subi	r24, 0xC0	; 192
    544a:	66 0f       	add	r22, r22
    544c:	77 1f       	adc	r23, r23
    544e:	88 1f       	adc	r24, r24
    5450:	20 f0       	brcs	.+8      	; 0x545a <sqrt+0x34>
    5452:	26 17       	cp	r18, r22
    5454:	37 07       	cpc	r19, r23
    5456:	48 07       	cpc	r20, r24
    5458:	30 f4       	brcc	.+12     	; 0x5466 <sqrt+0x40>
    545a:	62 1b       	sub	r22, r18
    545c:	73 0b       	sbc	r23, r19
    545e:	84 0b       	sbc	r24, r20
    5460:	20 29       	or	r18, r0
    5462:	31 29       	or	r19, r1
    5464:	4a 2b       	or	r20, r26
    5466:	a6 95       	lsr	r26
    5468:	17 94       	ror	r1
    546a:	07 94       	ror	r0
    546c:	20 25       	eor	r18, r0
    546e:	31 25       	eor	r19, r1
    5470:	4a 27       	eor	r20, r26
    5472:	58 f7       	brcc	.-42     	; 0x544a <sqrt+0x24>
    5474:	66 0f       	add	r22, r22
    5476:	77 1f       	adc	r23, r23
    5478:	88 1f       	adc	r24, r24
    547a:	20 f0       	brcs	.+8      	; 0x5484 <sqrt+0x5e>
    547c:	26 17       	cp	r18, r22
    547e:	37 07       	cpc	r19, r23
    5480:	48 07       	cpc	r20, r24
    5482:	30 f4       	brcc	.+12     	; 0x5490 <sqrt+0x6a>
    5484:	62 0b       	sbc	r22, r18
    5486:	73 0b       	sbc	r23, r19
    5488:	84 0b       	sbc	r24, r20
    548a:	20 0d       	add	r18, r0
    548c:	31 1d       	adc	r19, r1
    548e:	41 1d       	adc	r20, r1
    5490:	a0 95       	com	r26
    5492:	81 f7       	brne	.-32     	; 0x5474 <sqrt+0x4e>
    5494:	b9 01       	movw	r22, r18
    5496:	84 2f       	mov	r24, r20
    5498:	91 58       	subi	r25, 0x81	; 129
    549a:	88 0f       	add	r24, r24
    549c:	96 95       	lsr	r25
    549e:	87 95       	ror	r24
    54a0:	08 95       	ret

000054a2 <square>:
    54a2:	9b 01       	movw	r18, r22
    54a4:	ac 01       	movw	r20, r24
    54a6:	58 cf       	rjmp	.-336    	; 0x5358 <__mulsf3>

000054a8 <__fp_mpack>:
    54a8:	9f 3f       	cpi	r25, 0xFF	; 255
    54aa:	31 f0       	breq	.+12     	; 0x54b8 <__fp_mpack_finite+0xc>

000054ac <__fp_mpack_finite>:
    54ac:	91 50       	subi	r25, 0x01	; 1
    54ae:	20 f4       	brcc	.+8      	; 0x54b8 <__fp_mpack_finite+0xc>
    54b0:	87 95       	ror	r24
    54b2:	77 95       	ror	r23
    54b4:	67 95       	ror	r22
    54b6:	b7 95       	ror	r27
    54b8:	88 0f       	add	r24, r24
    54ba:	91 1d       	adc	r25, r1
    54bc:	96 95       	lsr	r25
    54be:	87 95       	ror	r24
    54c0:	97 f9       	bld	r25, 7
    54c2:	08 95       	ret

000054c4 <__fp_norm2>:
    54c4:	91 50       	subi	r25, 0x01	; 1
    54c6:	50 40       	sbci	r21, 0x00	; 0
    54c8:	66 0f       	add	r22, r22
    54ca:	77 1f       	adc	r23, r23
    54cc:	88 1f       	adc	r24, r24
    54ce:	d2 f7       	brpl	.-12     	; 0x54c4 <__fp_norm2>
    54d0:	08 95       	ret

000054d2 <__udivmodhi4>:
    54d2:	aa 1b       	sub	r26, r26
    54d4:	bb 1b       	sub	r27, r27
    54d6:	51 e1       	ldi	r21, 0x11	; 17
    54d8:	07 c0       	rjmp	.+14     	; 0x54e8 <__udivmodhi4_ep>

000054da <__udivmodhi4_loop>:
    54da:	aa 1f       	adc	r26, r26
    54dc:	bb 1f       	adc	r27, r27
    54de:	a6 17       	cp	r26, r22
    54e0:	b7 07       	cpc	r27, r23
    54e2:	10 f0       	brcs	.+4      	; 0x54e8 <__udivmodhi4_ep>
    54e4:	a6 1b       	sub	r26, r22
    54e6:	b7 0b       	sbc	r27, r23

000054e8 <__udivmodhi4_ep>:
    54e8:	88 1f       	adc	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	5a 95       	dec	r21
    54ee:	a9 f7       	brne	.-22     	; 0x54da <__udivmodhi4_loop>
    54f0:	80 95       	com	r24
    54f2:	90 95       	com	r25
    54f4:	bc 01       	movw	r22, r24
    54f6:	cd 01       	movw	r24, r26
    54f8:	08 95       	ret

000054fa <__udivmodsi4>:
    54fa:	a1 e2       	ldi	r26, 0x21	; 33
    54fc:	1a 2e       	mov	r1, r26
    54fe:	aa 1b       	sub	r26, r26
    5500:	bb 1b       	sub	r27, r27
    5502:	fd 01       	movw	r30, r26
    5504:	0d c0       	rjmp	.+26     	; 0x5520 <__udivmodsi4_ep>

00005506 <__udivmodsi4_loop>:
    5506:	aa 1f       	adc	r26, r26
    5508:	bb 1f       	adc	r27, r27
    550a:	ee 1f       	adc	r30, r30
    550c:	ff 1f       	adc	r31, r31
    550e:	a2 17       	cp	r26, r18
    5510:	b3 07       	cpc	r27, r19
    5512:	e4 07       	cpc	r30, r20
    5514:	f5 07       	cpc	r31, r21
    5516:	20 f0       	brcs	.+8      	; 0x5520 <__udivmodsi4_ep>
    5518:	a2 1b       	sub	r26, r18
    551a:	b3 0b       	sbc	r27, r19
    551c:	e4 0b       	sbc	r30, r20
    551e:	f5 0b       	sbc	r31, r21

00005520 <__udivmodsi4_ep>:
    5520:	66 1f       	adc	r22, r22
    5522:	77 1f       	adc	r23, r23
    5524:	88 1f       	adc	r24, r24
    5526:	99 1f       	adc	r25, r25
    5528:	1a 94       	dec	r1
    552a:	69 f7       	brne	.-38     	; 0x5506 <__udivmodsi4_loop>
    552c:	60 95       	com	r22
    552e:	70 95       	com	r23
    5530:	80 95       	com	r24
    5532:	90 95       	com	r25
    5534:	9b 01       	movw	r18, r22
    5536:	ac 01       	movw	r20, r24
    5538:	bd 01       	movw	r22, r26
    553a:	cf 01       	movw	r24, r30
    553c:	08 95       	ret

0000553e <fdevopen>:
    553e:	0f 93       	push	r16
    5540:	1f 93       	push	r17
    5542:	cf 93       	push	r28
    5544:	df 93       	push	r29
    5546:	00 97       	sbiw	r24, 0x00	; 0
    5548:	31 f4       	brne	.+12     	; 0x5556 <fdevopen+0x18>
    554a:	61 15       	cp	r22, r1
    554c:	71 05       	cpc	r23, r1
    554e:	19 f4       	brne	.+6      	; 0x5556 <fdevopen+0x18>
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	39 c0       	rjmp	.+114    	; 0x55c8 <fdevopen+0x8a>
    5556:	8b 01       	movw	r16, r22
    5558:	ec 01       	movw	r28, r24
    555a:	6e e0       	ldi	r22, 0x0E	; 14
    555c:	70 e0       	ldi	r23, 0x00	; 0
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	51 d2       	rcall	.+1186   	; 0x5a06 <calloc>
    5564:	fc 01       	movw	r30, r24
    5566:	89 2b       	or	r24, r25
    5568:	99 f3       	breq	.-26     	; 0x5550 <fdevopen+0x12>
    556a:	80 e8       	ldi	r24, 0x80	; 128
    556c:	83 83       	std	Z+3, r24	; 0x03
    556e:	01 15       	cp	r16, r1
    5570:	11 05       	cpc	r17, r1
    5572:	71 f0       	breq	.+28     	; 0x5590 <fdevopen+0x52>
    5574:	02 87       	std	Z+10, r16	; 0x0a
    5576:	13 87       	std	Z+11, r17	; 0x0b
    5578:	81 e8       	ldi	r24, 0x81	; 129
    557a:	83 83       	std	Z+3, r24	; 0x03
    557c:	80 91 06 25 	lds	r24, 0x2506	; 0x802506 <__iob>
    5580:	90 91 07 25 	lds	r25, 0x2507	; 0x802507 <__iob+0x1>
    5584:	89 2b       	or	r24, r25
    5586:	21 f4       	brne	.+8      	; 0x5590 <fdevopen+0x52>
    5588:	e0 93 06 25 	sts	0x2506, r30	; 0x802506 <__iob>
    558c:	f0 93 07 25 	sts	0x2507, r31	; 0x802507 <__iob+0x1>
    5590:	20 97       	sbiw	r28, 0x00	; 0
    5592:	c9 f0       	breq	.+50     	; 0x55c6 <fdevopen+0x88>
    5594:	c0 87       	std	Z+8, r28	; 0x08
    5596:	d1 87       	std	Z+9, r29	; 0x09
    5598:	83 81       	ldd	r24, Z+3	; 0x03
    559a:	82 60       	ori	r24, 0x02	; 2
    559c:	83 83       	std	Z+3, r24	; 0x03
    559e:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <__iob+0x2>
    55a2:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <__iob+0x3>
    55a6:	89 2b       	or	r24, r25
    55a8:	71 f4       	brne	.+28     	; 0x55c6 <fdevopen+0x88>
    55aa:	e0 93 08 25 	sts	0x2508, r30	; 0x802508 <__iob+0x2>
    55ae:	f0 93 09 25 	sts	0x2509, r31	; 0x802509 <__iob+0x3>
    55b2:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <__iob+0x4>
    55b6:	90 91 0b 25 	lds	r25, 0x250B	; 0x80250b <__iob+0x5>
    55ba:	89 2b       	or	r24, r25
    55bc:	21 f4       	brne	.+8      	; 0x55c6 <fdevopen+0x88>
    55be:	e0 93 0a 25 	sts	0x250A, r30	; 0x80250a <__iob+0x4>
    55c2:	f0 93 0b 25 	sts	0x250B, r31	; 0x80250b <__iob+0x5>
    55c6:	cf 01       	movw	r24, r30
    55c8:	df 91       	pop	r29
    55ca:	cf 91       	pop	r28
    55cc:	1f 91       	pop	r17
    55ce:	0f 91       	pop	r16
    55d0:	08 95       	ret

000055d2 <printf>:
    55d2:	a0 e0       	ldi	r26, 0x00	; 0
    55d4:	b0 e0       	ldi	r27, 0x00	; 0
    55d6:	ee ee       	ldi	r30, 0xEE	; 238
    55d8:	fa e2       	ldi	r31, 0x2A	; 42
    55da:	17 c4       	rjmp	.+2094   	; 0x5e0a <__prologue_saves__+0x20>
    55dc:	ae 01       	movw	r20, r28
    55de:	4b 5f       	subi	r20, 0xFB	; 251
    55e0:	5f 4f       	sbci	r21, 0xFF	; 255
    55e2:	fa 01       	movw	r30, r20
    55e4:	61 91       	ld	r22, Z+
    55e6:	71 91       	ld	r23, Z+
    55e8:	af 01       	movw	r20, r30
    55ea:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <__iob+0x2>
    55ee:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <__iob+0x3>
    55f2:	37 d0       	rcall	.+110    	; 0x5662 <vfprintf>
    55f4:	e2 e0       	ldi	r30, 0x02	; 2
    55f6:	22 c4       	rjmp	.+2116   	; 0x5e3c <__epilogue_restores__+0x20>

000055f8 <putchar>:
    55f8:	60 91 08 25 	lds	r22, 0x2508	; 0x802508 <__iob+0x2>
    55fc:	70 91 09 25 	lds	r23, 0x2509	; 0x802509 <__iob+0x3>
    5600:	5a c3       	rjmp	.+1716   	; 0x5cb6 <fputc>

00005602 <puts>:
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	e0 91 08 25 	lds	r30, 0x2508	; 0x802508 <__iob+0x2>
    560e:	f0 91 09 25 	lds	r31, 0x2509	; 0x802509 <__iob+0x3>
    5612:	23 81       	ldd	r18, Z+3	; 0x03
    5614:	21 ff       	sbrs	r18, 1
    5616:	1b c0       	rjmp	.+54     	; 0x564e <puts+0x4c>
    5618:	8c 01       	movw	r16, r24
    561a:	d0 e0       	ldi	r29, 0x00	; 0
    561c:	c0 e0       	ldi	r28, 0x00	; 0
    561e:	f8 01       	movw	r30, r16
    5620:	81 91       	ld	r24, Z+
    5622:	8f 01       	movw	r16, r30
    5624:	60 91 08 25 	lds	r22, 0x2508	; 0x802508 <__iob+0x2>
    5628:	70 91 09 25 	lds	r23, 0x2509	; 0x802509 <__iob+0x3>
    562c:	db 01       	movw	r26, r22
    562e:	18 96       	adiw	r26, 0x08	; 8
    5630:	ed 91       	ld	r30, X+
    5632:	fc 91       	ld	r31, X
    5634:	19 97       	sbiw	r26, 0x09	; 9
    5636:	88 23       	and	r24, r24
    5638:	31 f0       	breq	.+12     	; 0x5646 <puts+0x44>
    563a:	09 95       	icall
    563c:	89 2b       	or	r24, r25
    563e:	79 f3       	breq	.-34     	; 0x561e <puts+0x1c>
    5640:	df ef       	ldi	r29, 0xFF	; 255
    5642:	cf ef       	ldi	r28, 0xFF	; 255
    5644:	ec cf       	rjmp	.-40     	; 0x561e <puts+0x1c>
    5646:	8a e0       	ldi	r24, 0x0A	; 10
    5648:	09 95       	icall
    564a:	89 2b       	or	r24, r25
    564c:	19 f0       	breq	.+6      	; 0x5654 <puts+0x52>
    564e:	8f ef       	ldi	r24, 0xFF	; 255
    5650:	9f ef       	ldi	r25, 0xFF	; 255
    5652:	02 c0       	rjmp	.+4      	; 0x5658 <puts+0x56>
    5654:	8d 2f       	mov	r24, r29
    5656:	9c 2f       	mov	r25, r28
    5658:	df 91       	pop	r29
    565a:	cf 91       	pop	r28
    565c:	1f 91       	pop	r17
    565e:	0f 91       	pop	r16
    5660:	08 95       	ret

00005662 <vfprintf>:
    5662:	ab e0       	ldi	r26, 0x0B	; 11
    5664:	b0 e0       	ldi	r27, 0x00	; 0
    5666:	e6 e3       	ldi	r30, 0x36	; 54
    5668:	fb e2       	ldi	r31, 0x2B	; 43
    566a:	bf c3       	rjmp	.+1918   	; 0x5dea <__prologue_saves__>
    566c:	6c 01       	movw	r12, r24
    566e:	7b 01       	movw	r14, r22
    5670:	8a 01       	movw	r16, r20
    5672:	fc 01       	movw	r30, r24
    5674:	16 82       	std	Z+6, r1	; 0x06
    5676:	17 82       	std	Z+7, r1	; 0x07
    5678:	83 81       	ldd	r24, Z+3	; 0x03
    567a:	81 ff       	sbrs	r24, 1
    567c:	bf c1       	rjmp	.+894    	; 0x59fc <vfprintf+0x39a>
    567e:	ce 01       	movw	r24, r28
    5680:	01 96       	adiw	r24, 0x01	; 1
    5682:	3c 01       	movw	r6, r24
    5684:	f6 01       	movw	r30, r12
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	f7 01       	movw	r30, r14
    568a:	93 fd       	sbrc	r25, 3
    568c:	85 91       	lpm	r24, Z+
    568e:	93 ff       	sbrs	r25, 3
    5690:	81 91       	ld	r24, Z+
    5692:	7f 01       	movw	r14, r30
    5694:	88 23       	and	r24, r24
    5696:	09 f4       	brne	.+2      	; 0x569a <vfprintf+0x38>
    5698:	ad c1       	rjmp	.+858    	; 0x59f4 <vfprintf+0x392>
    569a:	85 32       	cpi	r24, 0x25	; 37
    569c:	39 f4       	brne	.+14     	; 0x56ac <vfprintf+0x4a>
    569e:	93 fd       	sbrc	r25, 3
    56a0:	85 91       	lpm	r24, Z+
    56a2:	93 ff       	sbrs	r25, 3
    56a4:	81 91       	ld	r24, Z+
    56a6:	7f 01       	movw	r14, r30
    56a8:	85 32       	cpi	r24, 0x25	; 37
    56aa:	21 f4       	brne	.+8      	; 0x56b4 <vfprintf+0x52>
    56ac:	b6 01       	movw	r22, r12
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	02 d3       	rcall	.+1540   	; 0x5cb6 <fputc>
    56b2:	e8 cf       	rjmp	.-48     	; 0x5684 <vfprintf+0x22>
    56b4:	91 2c       	mov	r9, r1
    56b6:	21 2c       	mov	r2, r1
    56b8:	31 2c       	mov	r3, r1
    56ba:	ff e1       	ldi	r31, 0x1F	; 31
    56bc:	f3 15       	cp	r31, r3
    56be:	d8 f0       	brcs	.+54     	; 0x56f6 <vfprintf+0x94>
    56c0:	8b 32       	cpi	r24, 0x2B	; 43
    56c2:	79 f0       	breq	.+30     	; 0x56e2 <vfprintf+0x80>
    56c4:	38 f4       	brcc	.+14     	; 0x56d4 <vfprintf+0x72>
    56c6:	80 32       	cpi	r24, 0x20	; 32
    56c8:	79 f0       	breq	.+30     	; 0x56e8 <vfprintf+0x86>
    56ca:	83 32       	cpi	r24, 0x23	; 35
    56cc:	a1 f4       	brne	.+40     	; 0x56f6 <vfprintf+0x94>
    56ce:	23 2d       	mov	r18, r3
    56d0:	20 61       	ori	r18, 0x10	; 16
    56d2:	1d c0       	rjmp	.+58     	; 0x570e <vfprintf+0xac>
    56d4:	8d 32       	cpi	r24, 0x2D	; 45
    56d6:	61 f0       	breq	.+24     	; 0x56f0 <vfprintf+0x8e>
    56d8:	80 33       	cpi	r24, 0x30	; 48
    56da:	69 f4       	brne	.+26     	; 0x56f6 <vfprintf+0x94>
    56dc:	23 2d       	mov	r18, r3
    56de:	21 60       	ori	r18, 0x01	; 1
    56e0:	16 c0       	rjmp	.+44     	; 0x570e <vfprintf+0xac>
    56e2:	83 2d       	mov	r24, r3
    56e4:	82 60       	ori	r24, 0x02	; 2
    56e6:	38 2e       	mov	r3, r24
    56e8:	e3 2d       	mov	r30, r3
    56ea:	e4 60       	ori	r30, 0x04	; 4
    56ec:	3e 2e       	mov	r3, r30
    56ee:	2a c0       	rjmp	.+84     	; 0x5744 <vfprintf+0xe2>
    56f0:	f3 2d       	mov	r31, r3
    56f2:	f8 60       	ori	r31, 0x08	; 8
    56f4:	1d c0       	rjmp	.+58     	; 0x5730 <vfprintf+0xce>
    56f6:	37 fc       	sbrc	r3, 7
    56f8:	2d c0       	rjmp	.+90     	; 0x5754 <vfprintf+0xf2>
    56fa:	20 ed       	ldi	r18, 0xD0	; 208
    56fc:	28 0f       	add	r18, r24
    56fe:	2a 30       	cpi	r18, 0x0A	; 10
    5700:	40 f0       	brcs	.+16     	; 0x5712 <vfprintf+0xb0>
    5702:	8e 32       	cpi	r24, 0x2E	; 46
    5704:	b9 f4       	brne	.+46     	; 0x5734 <vfprintf+0xd2>
    5706:	36 fc       	sbrc	r3, 6
    5708:	75 c1       	rjmp	.+746    	; 0x59f4 <vfprintf+0x392>
    570a:	23 2d       	mov	r18, r3
    570c:	20 64       	ori	r18, 0x40	; 64
    570e:	32 2e       	mov	r3, r18
    5710:	19 c0       	rjmp	.+50     	; 0x5744 <vfprintf+0xe2>
    5712:	36 fe       	sbrs	r3, 6
    5714:	06 c0       	rjmp	.+12     	; 0x5722 <vfprintf+0xc0>
    5716:	8a e0       	ldi	r24, 0x0A	; 10
    5718:	98 9e       	mul	r9, r24
    571a:	20 0d       	add	r18, r0
    571c:	11 24       	eor	r1, r1
    571e:	92 2e       	mov	r9, r18
    5720:	11 c0       	rjmp	.+34     	; 0x5744 <vfprintf+0xe2>
    5722:	ea e0       	ldi	r30, 0x0A	; 10
    5724:	2e 9e       	mul	r2, r30
    5726:	20 0d       	add	r18, r0
    5728:	11 24       	eor	r1, r1
    572a:	22 2e       	mov	r2, r18
    572c:	f3 2d       	mov	r31, r3
    572e:	f0 62       	ori	r31, 0x20	; 32
    5730:	3f 2e       	mov	r3, r31
    5732:	08 c0       	rjmp	.+16     	; 0x5744 <vfprintf+0xe2>
    5734:	8c 36       	cpi	r24, 0x6C	; 108
    5736:	21 f4       	brne	.+8      	; 0x5740 <vfprintf+0xde>
    5738:	83 2d       	mov	r24, r3
    573a:	80 68       	ori	r24, 0x80	; 128
    573c:	38 2e       	mov	r3, r24
    573e:	02 c0       	rjmp	.+4      	; 0x5744 <vfprintf+0xe2>
    5740:	88 36       	cpi	r24, 0x68	; 104
    5742:	41 f4       	brne	.+16     	; 0x5754 <vfprintf+0xf2>
    5744:	f7 01       	movw	r30, r14
    5746:	93 fd       	sbrc	r25, 3
    5748:	85 91       	lpm	r24, Z+
    574a:	93 ff       	sbrs	r25, 3
    574c:	81 91       	ld	r24, Z+
    574e:	7f 01       	movw	r14, r30
    5750:	81 11       	cpse	r24, r1
    5752:	b3 cf       	rjmp	.-154    	; 0x56ba <vfprintf+0x58>
    5754:	98 2f       	mov	r25, r24
    5756:	9f 7d       	andi	r25, 0xDF	; 223
    5758:	95 54       	subi	r25, 0x45	; 69
    575a:	93 30       	cpi	r25, 0x03	; 3
    575c:	28 f4       	brcc	.+10     	; 0x5768 <vfprintf+0x106>
    575e:	0c 5f       	subi	r16, 0xFC	; 252
    5760:	1f 4f       	sbci	r17, 0xFF	; 255
    5762:	9f e3       	ldi	r25, 0x3F	; 63
    5764:	99 83       	std	Y+1, r25	; 0x01
    5766:	0d c0       	rjmp	.+26     	; 0x5782 <vfprintf+0x120>
    5768:	83 36       	cpi	r24, 0x63	; 99
    576a:	31 f0       	breq	.+12     	; 0x5778 <vfprintf+0x116>
    576c:	83 37       	cpi	r24, 0x73	; 115
    576e:	71 f0       	breq	.+28     	; 0x578c <vfprintf+0x12a>
    5770:	83 35       	cpi	r24, 0x53	; 83
    5772:	09 f0       	breq	.+2      	; 0x5776 <vfprintf+0x114>
    5774:	55 c0       	rjmp	.+170    	; 0x5820 <vfprintf+0x1be>
    5776:	20 c0       	rjmp	.+64     	; 0x57b8 <vfprintf+0x156>
    5778:	f8 01       	movw	r30, r16
    577a:	80 81       	ld	r24, Z
    577c:	89 83       	std	Y+1, r24	; 0x01
    577e:	0e 5f       	subi	r16, 0xFE	; 254
    5780:	1f 4f       	sbci	r17, 0xFF	; 255
    5782:	88 24       	eor	r8, r8
    5784:	83 94       	inc	r8
    5786:	91 2c       	mov	r9, r1
    5788:	53 01       	movw	r10, r6
    578a:	12 c0       	rjmp	.+36     	; 0x57b0 <vfprintf+0x14e>
    578c:	28 01       	movw	r4, r16
    578e:	f2 e0       	ldi	r31, 0x02	; 2
    5790:	4f 0e       	add	r4, r31
    5792:	51 1c       	adc	r5, r1
    5794:	f8 01       	movw	r30, r16
    5796:	a0 80       	ld	r10, Z
    5798:	b1 80       	ldd	r11, Z+1	; 0x01
    579a:	36 fe       	sbrs	r3, 6
    579c:	03 c0       	rjmp	.+6      	; 0x57a4 <vfprintf+0x142>
    579e:	69 2d       	mov	r22, r9
    57a0:	70 e0       	ldi	r23, 0x00	; 0
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <vfprintf+0x146>
    57a4:	6f ef       	ldi	r22, 0xFF	; 255
    57a6:	7f ef       	ldi	r23, 0xFF	; 255
    57a8:	c5 01       	movw	r24, r10
    57aa:	7a d2       	rcall	.+1268   	; 0x5ca0 <strnlen>
    57ac:	4c 01       	movw	r8, r24
    57ae:	82 01       	movw	r16, r4
    57b0:	f3 2d       	mov	r31, r3
    57b2:	ff 77       	andi	r31, 0x7F	; 127
    57b4:	3f 2e       	mov	r3, r31
    57b6:	15 c0       	rjmp	.+42     	; 0x57e2 <vfprintf+0x180>
    57b8:	28 01       	movw	r4, r16
    57ba:	22 e0       	ldi	r18, 0x02	; 2
    57bc:	42 0e       	add	r4, r18
    57be:	51 1c       	adc	r5, r1
    57c0:	f8 01       	movw	r30, r16
    57c2:	a0 80       	ld	r10, Z
    57c4:	b1 80       	ldd	r11, Z+1	; 0x01
    57c6:	36 fe       	sbrs	r3, 6
    57c8:	03 c0       	rjmp	.+6      	; 0x57d0 <vfprintf+0x16e>
    57ca:	69 2d       	mov	r22, r9
    57cc:	70 e0       	ldi	r23, 0x00	; 0
    57ce:	02 c0       	rjmp	.+4      	; 0x57d4 <vfprintf+0x172>
    57d0:	6f ef       	ldi	r22, 0xFF	; 255
    57d2:	7f ef       	ldi	r23, 0xFF	; 255
    57d4:	c5 01       	movw	r24, r10
    57d6:	52 d2       	rcall	.+1188   	; 0x5c7c <strnlen_P>
    57d8:	4c 01       	movw	r8, r24
    57da:	f3 2d       	mov	r31, r3
    57dc:	f0 68       	ori	r31, 0x80	; 128
    57de:	3f 2e       	mov	r3, r31
    57e0:	82 01       	movw	r16, r4
    57e2:	33 fc       	sbrc	r3, 3
    57e4:	19 c0       	rjmp	.+50     	; 0x5818 <vfprintf+0x1b6>
    57e6:	82 2d       	mov	r24, r2
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	88 16       	cp	r8, r24
    57ec:	99 06       	cpc	r9, r25
    57ee:	a0 f4       	brcc	.+40     	; 0x5818 <vfprintf+0x1b6>
    57f0:	b6 01       	movw	r22, r12
    57f2:	80 e2       	ldi	r24, 0x20	; 32
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	5f d2       	rcall	.+1214   	; 0x5cb6 <fputc>
    57f8:	2a 94       	dec	r2
    57fa:	f5 cf       	rjmp	.-22     	; 0x57e6 <vfprintf+0x184>
    57fc:	f5 01       	movw	r30, r10
    57fe:	37 fc       	sbrc	r3, 7
    5800:	85 91       	lpm	r24, Z+
    5802:	37 fe       	sbrs	r3, 7
    5804:	81 91       	ld	r24, Z+
    5806:	5f 01       	movw	r10, r30
    5808:	b6 01       	movw	r22, r12
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	54 d2       	rcall	.+1192   	; 0x5cb6 <fputc>
    580e:	21 10       	cpse	r2, r1
    5810:	2a 94       	dec	r2
    5812:	21 e0       	ldi	r18, 0x01	; 1
    5814:	82 1a       	sub	r8, r18
    5816:	91 08       	sbc	r9, r1
    5818:	81 14       	cp	r8, r1
    581a:	91 04       	cpc	r9, r1
    581c:	79 f7       	brne	.-34     	; 0x57fc <vfprintf+0x19a>
    581e:	e1 c0       	rjmp	.+450    	; 0x59e2 <vfprintf+0x380>
    5820:	84 36       	cpi	r24, 0x64	; 100
    5822:	11 f0       	breq	.+4      	; 0x5828 <vfprintf+0x1c6>
    5824:	89 36       	cpi	r24, 0x69	; 105
    5826:	39 f5       	brne	.+78     	; 0x5876 <vfprintf+0x214>
    5828:	f8 01       	movw	r30, r16
    582a:	37 fe       	sbrs	r3, 7
    582c:	07 c0       	rjmp	.+14     	; 0x583c <vfprintf+0x1da>
    582e:	60 81       	ld	r22, Z
    5830:	71 81       	ldd	r23, Z+1	; 0x01
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	93 81       	ldd	r25, Z+3	; 0x03
    5836:	0c 5f       	subi	r16, 0xFC	; 252
    5838:	1f 4f       	sbci	r17, 0xFF	; 255
    583a:	08 c0       	rjmp	.+16     	; 0x584c <vfprintf+0x1ea>
    583c:	60 81       	ld	r22, Z
    583e:	71 81       	ldd	r23, Z+1	; 0x01
    5840:	07 2e       	mov	r0, r23
    5842:	00 0c       	add	r0, r0
    5844:	88 0b       	sbc	r24, r24
    5846:	99 0b       	sbc	r25, r25
    5848:	0e 5f       	subi	r16, 0xFE	; 254
    584a:	1f 4f       	sbci	r17, 0xFF	; 255
    584c:	f3 2d       	mov	r31, r3
    584e:	ff 76       	andi	r31, 0x6F	; 111
    5850:	3f 2e       	mov	r3, r31
    5852:	97 ff       	sbrs	r25, 7
    5854:	09 c0       	rjmp	.+18     	; 0x5868 <vfprintf+0x206>
    5856:	90 95       	com	r25
    5858:	80 95       	com	r24
    585a:	70 95       	com	r23
    585c:	61 95       	neg	r22
    585e:	7f 4f       	sbci	r23, 0xFF	; 255
    5860:	8f 4f       	sbci	r24, 0xFF	; 255
    5862:	9f 4f       	sbci	r25, 0xFF	; 255
    5864:	f0 68       	ori	r31, 0x80	; 128
    5866:	3f 2e       	mov	r3, r31
    5868:	2a e0       	ldi	r18, 0x0A	; 10
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	a3 01       	movw	r20, r6
    586e:	5f d2       	rcall	.+1214   	; 0x5d2e <__ultoa_invert>
    5870:	88 2e       	mov	r8, r24
    5872:	86 18       	sub	r8, r6
    5874:	44 c0       	rjmp	.+136    	; 0x58fe <vfprintf+0x29c>
    5876:	85 37       	cpi	r24, 0x75	; 117
    5878:	31 f4       	brne	.+12     	; 0x5886 <vfprintf+0x224>
    587a:	23 2d       	mov	r18, r3
    587c:	2f 7e       	andi	r18, 0xEF	; 239
    587e:	b2 2e       	mov	r11, r18
    5880:	2a e0       	ldi	r18, 0x0A	; 10
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	25 c0       	rjmp	.+74     	; 0x58d0 <vfprintf+0x26e>
    5886:	93 2d       	mov	r25, r3
    5888:	99 7f       	andi	r25, 0xF9	; 249
    588a:	b9 2e       	mov	r11, r25
    588c:	8f 36       	cpi	r24, 0x6F	; 111
    588e:	c1 f0       	breq	.+48     	; 0x58c0 <vfprintf+0x25e>
    5890:	18 f4       	brcc	.+6      	; 0x5898 <vfprintf+0x236>
    5892:	88 35       	cpi	r24, 0x58	; 88
    5894:	79 f0       	breq	.+30     	; 0x58b4 <vfprintf+0x252>
    5896:	ae c0       	rjmp	.+348    	; 0x59f4 <vfprintf+0x392>
    5898:	80 37       	cpi	r24, 0x70	; 112
    589a:	19 f0       	breq	.+6      	; 0x58a2 <vfprintf+0x240>
    589c:	88 37       	cpi	r24, 0x78	; 120
    589e:	21 f0       	breq	.+8      	; 0x58a8 <vfprintf+0x246>
    58a0:	a9 c0       	rjmp	.+338    	; 0x59f4 <vfprintf+0x392>
    58a2:	e9 2f       	mov	r30, r25
    58a4:	e0 61       	ori	r30, 0x10	; 16
    58a6:	be 2e       	mov	r11, r30
    58a8:	b4 fe       	sbrs	r11, 4
    58aa:	0d c0       	rjmp	.+26     	; 0x58c6 <vfprintf+0x264>
    58ac:	fb 2d       	mov	r31, r11
    58ae:	f4 60       	ori	r31, 0x04	; 4
    58b0:	bf 2e       	mov	r11, r31
    58b2:	09 c0       	rjmp	.+18     	; 0x58c6 <vfprintf+0x264>
    58b4:	34 fe       	sbrs	r3, 4
    58b6:	0a c0       	rjmp	.+20     	; 0x58cc <vfprintf+0x26a>
    58b8:	29 2f       	mov	r18, r25
    58ba:	26 60       	ori	r18, 0x06	; 6
    58bc:	b2 2e       	mov	r11, r18
    58be:	06 c0       	rjmp	.+12     	; 0x58cc <vfprintf+0x26a>
    58c0:	28 e0       	ldi	r18, 0x08	; 8
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	05 c0       	rjmp	.+10     	; 0x58d0 <vfprintf+0x26e>
    58c6:	20 e1       	ldi	r18, 0x10	; 16
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	02 c0       	rjmp	.+4      	; 0x58d0 <vfprintf+0x26e>
    58cc:	20 e1       	ldi	r18, 0x10	; 16
    58ce:	32 e0       	ldi	r19, 0x02	; 2
    58d0:	f8 01       	movw	r30, r16
    58d2:	b7 fe       	sbrs	r11, 7
    58d4:	07 c0       	rjmp	.+14     	; 0x58e4 <vfprintf+0x282>
    58d6:	60 81       	ld	r22, Z
    58d8:	71 81       	ldd	r23, Z+1	; 0x01
    58da:	82 81       	ldd	r24, Z+2	; 0x02
    58dc:	93 81       	ldd	r25, Z+3	; 0x03
    58de:	0c 5f       	subi	r16, 0xFC	; 252
    58e0:	1f 4f       	sbci	r17, 0xFF	; 255
    58e2:	06 c0       	rjmp	.+12     	; 0x58f0 <vfprintf+0x28e>
    58e4:	60 81       	ld	r22, Z
    58e6:	71 81       	ldd	r23, Z+1	; 0x01
    58e8:	80 e0       	ldi	r24, 0x00	; 0
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	0e 5f       	subi	r16, 0xFE	; 254
    58ee:	1f 4f       	sbci	r17, 0xFF	; 255
    58f0:	a3 01       	movw	r20, r6
    58f2:	1d d2       	rcall	.+1082   	; 0x5d2e <__ultoa_invert>
    58f4:	88 2e       	mov	r8, r24
    58f6:	86 18       	sub	r8, r6
    58f8:	fb 2d       	mov	r31, r11
    58fa:	ff 77       	andi	r31, 0x7F	; 127
    58fc:	3f 2e       	mov	r3, r31
    58fe:	36 fe       	sbrs	r3, 6
    5900:	0d c0       	rjmp	.+26     	; 0x591c <vfprintf+0x2ba>
    5902:	23 2d       	mov	r18, r3
    5904:	2e 7f       	andi	r18, 0xFE	; 254
    5906:	a2 2e       	mov	r10, r18
    5908:	89 14       	cp	r8, r9
    590a:	58 f4       	brcc	.+22     	; 0x5922 <vfprintf+0x2c0>
    590c:	34 fe       	sbrs	r3, 4
    590e:	0b c0       	rjmp	.+22     	; 0x5926 <vfprintf+0x2c4>
    5910:	32 fc       	sbrc	r3, 2
    5912:	09 c0       	rjmp	.+18     	; 0x5926 <vfprintf+0x2c4>
    5914:	83 2d       	mov	r24, r3
    5916:	8e 7e       	andi	r24, 0xEE	; 238
    5918:	a8 2e       	mov	r10, r24
    591a:	05 c0       	rjmp	.+10     	; 0x5926 <vfprintf+0x2c4>
    591c:	b8 2c       	mov	r11, r8
    591e:	a3 2c       	mov	r10, r3
    5920:	03 c0       	rjmp	.+6      	; 0x5928 <vfprintf+0x2c6>
    5922:	b8 2c       	mov	r11, r8
    5924:	01 c0       	rjmp	.+2      	; 0x5928 <vfprintf+0x2c6>
    5926:	b9 2c       	mov	r11, r9
    5928:	a4 fe       	sbrs	r10, 4
    592a:	0f c0       	rjmp	.+30     	; 0x594a <vfprintf+0x2e8>
    592c:	fe 01       	movw	r30, r28
    592e:	e8 0d       	add	r30, r8
    5930:	f1 1d       	adc	r31, r1
    5932:	80 81       	ld	r24, Z
    5934:	80 33       	cpi	r24, 0x30	; 48
    5936:	21 f4       	brne	.+8      	; 0x5940 <vfprintf+0x2de>
    5938:	9a 2d       	mov	r25, r10
    593a:	99 7e       	andi	r25, 0xE9	; 233
    593c:	a9 2e       	mov	r10, r25
    593e:	09 c0       	rjmp	.+18     	; 0x5952 <vfprintf+0x2f0>
    5940:	a2 fe       	sbrs	r10, 2
    5942:	06 c0       	rjmp	.+12     	; 0x5950 <vfprintf+0x2ee>
    5944:	b3 94       	inc	r11
    5946:	b3 94       	inc	r11
    5948:	04 c0       	rjmp	.+8      	; 0x5952 <vfprintf+0x2f0>
    594a:	8a 2d       	mov	r24, r10
    594c:	86 78       	andi	r24, 0x86	; 134
    594e:	09 f0       	breq	.+2      	; 0x5952 <vfprintf+0x2f0>
    5950:	b3 94       	inc	r11
    5952:	a3 fc       	sbrc	r10, 3
    5954:	10 c0       	rjmp	.+32     	; 0x5976 <vfprintf+0x314>
    5956:	a0 fe       	sbrs	r10, 0
    5958:	06 c0       	rjmp	.+12     	; 0x5966 <vfprintf+0x304>
    595a:	b2 14       	cp	r11, r2
    595c:	80 f4       	brcc	.+32     	; 0x597e <vfprintf+0x31c>
    595e:	28 0c       	add	r2, r8
    5960:	92 2c       	mov	r9, r2
    5962:	9b 18       	sub	r9, r11
    5964:	0d c0       	rjmp	.+26     	; 0x5980 <vfprintf+0x31e>
    5966:	b2 14       	cp	r11, r2
    5968:	58 f4       	brcc	.+22     	; 0x5980 <vfprintf+0x31e>
    596a:	b6 01       	movw	r22, r12
    596c:	80 e2       	ldi	r24, 0x20	; 32
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	a2 d1       	rcall	.+836    	; 0x5cb6 <fputc>
    5972:	b3 94       	inc	r11
    5974:	f8 cf       	rjmp	.-16     	; 0x5966 <vfprintf+0x304>
    5976:	b2 14       	cp	r11, r2
    5978:	18 f4       	brcc	.+6      	; 0x5980 <vfprintf+0x31e>
    597a:	2b 18       	sub	r2, r11
    597c:	02 c0       	rjmp	.+4      	; 0x5982 <vfprintf+0x320>
    597e:	98 2c       	mov	r9, r8
    5980:	21 2c       	mov	r2, r1
    5982:	a4 fe       	sbrs	r10, 4
    5984:	0f c0       	rjmp	.+30     	; 0x59a4 <vfprintf+0x342>
    5986:	b6 01       	movw	r22, r12
    5988:	80 e3       	ldi	r24, 0x30	; 48
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	94 d1       	rcall	.+808    	; 0x5cb6 <fputc>
    598e:	a2 fe       	sbrs	r10, 2
    5990:	16 c0       	rjmp	.+44     	; 0x59be <vfprintf+0x35c>
    5992:	a1 fc       	sbrc	r10, 1
    5994:	03 c0       	rjmp	.+6      	; 0x599c <vfprintf+0x33a>
    5996:	88 e7       	ldi	r24, 0x78	; 120
    5998:	90 e0       	ldi	r25, 0x00	; 0
    599a:	02 c0       	rjmp	.+4      	; 0x59a0 <vfprintf+0x33e>
    599c:	88 e5       	ldi	r24, 0x58	; 88
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	b6 01       	movw	r22, r12
    59a2:	0c c0       	rjmp	.+24     	; 0x59bc <vfprintf+0x35a>
    59a4:	8a 2d       	mov	r24, r10
    59a6:	86 78       	andi	r24, 0x86	; 134
    59a8:	51 f0       	breq	.+20     	; 0x59be <vfprintf+0x35c>
    59aa:	a1 fe       	sbrs	r10, 1
    59ac:	02 c0       	rjmp	.+4      	; 0x59b2 <vfprintf+0x350>
    59ae:	8b e2       	ldi	r24, 0x2B	; 43
    59b0:	01 c0       	rjmp	.+2      	; 0x59b4 <vfprintf+0x352>
    59b2:	80 e2       	ldi	r24, 0x20	; 32
    59b4:	a7 fc       	sbrc	r10, 7
    59b6:	8d e2       	ldi	r24, 0x2D	; 45
    59b8:	b6 01       	movw	r22, r12
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	7c d1       	rcall	.+760    	; 0x5cb6 <fputc>
    59be:	89 14       	cp	r8, r9
    59c0:	30 f4       	brcc	.+12     	; 0x59ce <vfprintf+0x36c>
    59c2:	b6 01       	movw	r22, r12
    59c4:	80 e3       	ldi	r24, 0x30	; 48
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	76 d1       	rcall	.+748    	; 0x5cb6 <fputc>
    59ca:	9a 94       	dec	r9
    59cc:	f8 cf       	rjmp	.-16     	; 0x59be <vfprintf+0x35c>
    59ce:	8a 94       	dec	r8
    59d0:	f3 01       	movw	r30, r6
    59d2:	e8 0d       	add	r30, r8
    59d4:	f1 1d       	adc	r31, r1
    59d6:	80 81       	ld	r24, Z
    59d8:	b6 01       	movw	r22, r12
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	6c d1       	rcall	.+728    	; 0x5cb6 <fputc>
    59de:	81 10       	cpse	r8, r1
    59e0:	f6 cf       	rjmp	.-20     	; 0x59ce <vfprintf+0x36c>
    59e2:	22 20       	and	r2, r2
    59e4:	09 f4       	brne	.+2      	; 0x59e8 <vfprintf+0x386>
    59e6:	4e ce       	rjmp	.-868    	; 0x5684 <vfprintf+0x22>
    59e8:	b6 01       	movw	r22, r12
    59ea:	80 e2       	ldi	r24, 0x20	; 32
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	63 d1       	rcall	.+710    	; 0x5cb6 <fputc>
    59f0:	2a 94       	dec	r2
    59f2:	f7 cf       	rjmp	.-18     	; 0x59e2 <vfprintf+0x380>
    59f4:	f6 01       	movw	r30, r12
    59f6:	86 81       	ldd	r24, Z+6	; 0x06
    59f8:	97 81       	ldd	r25, Z+7	; 0x07
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <vfprintf+0x39e>
    59fc:	8f ef       	ldi	r24, 0xFF	; 255
    59fe:	9f ef       	ldi	r25, 0xFF	; 255
    5a00:	2b 96       	adiw	r28, 0x0b	; 11
    5a02:	e2 e1       	ldi	r30, 0x12	; 18
    5a04:	0b c2       	rjmp	.+1046   	; 0x5e1c <__epilogue_restores__>

00005a06 <calloc>:
    5a06:	0f 93       	push	r16
    5a08:	1f 93       	push	r17
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	86 9f       	mul	r24, r22
    5a10:	80 01       	movw	r16, r0
    5a12:	87 9f       	mul	r24, r23
    5a14:	10 0d       	add	r17, r0
    5a16:	96 9f       	mul	r25, r22
    5a18:	10 0d       	add	r17, r0
    5a1a:	11 24       	eor	r1, r1
    5a1c:	c8 01       	movw	r24, r16
    5a1e:	0d d0       	rcall	.+26     	; 0x5a3a <malloc>
    5a20:	ec 01       	movw	r28, r24
    5a22:	00 97       	sbiw	r24, 0x00	; 0
    5a24:	21 f0       	breq	.+8      	; 0x5a2e <calloc+0x28>
    5a26:	a8 01       	movw	r20, r16
    5a28:	60 e0       	ldi	r22, 0x00	; 0
    5a2a:	70 e0       	ldi	r23, 0x00	; 0
    5a2c:	32 d1       	rcall	.+612    	; 0x5c92 <memset>
    5a2e:	ce 01       	movw	r24, r28
    5a30:	df 91       	pop	r29
    5a32:	cf 91       	pop	r28
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	08 95       	ret

00005a3a <malloc>:
    5a3a:	0f 93       	push	r16
    5a3c:	1f 93       	push	r17
    5a3e:	cf 93       	push	r28
    5a40:	df 93       	push	r29
    5a42:	82 30       	cpi	r24, 0x02	; 2
    5a44:	91 05       	cpc	r25, r1
    5a46:	10 f4       	brcc	.+4      	; 0x5a4c <malloc+0x12>
    5a48:	82 e0       	ldi	r24, 0x02	; 2
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	e0 91 0e 25 	lds	r30, 0x250E	; 0x80250e <__flp>
    5a50:	f0 91 0f 25 	lds	r31, 0x250F	; 0x80250f <__flp+0x1>
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	a0 e0       	ldi	r26, 0x00	; 0
    5a5a:	b0 e0       	ldi	r27, 0x00	; 0
    5a5c:	30 97       	sbiw	r30, 0x00	; 0
    5a5e:	19 f1       	breq	.+70     	; 0x5aa6 <malloc+0x6c>
    5a60:	40 81       	ld	r20, Z
    5a62:	51 81       	ldd	r21, Z+1	; 0x01
    5a64:	02 81       	ldd	r16, Z+2	; 0x02
    5a66:	13 81       	ldd	r17, Z+3	; 0x03
    5a68:	48 17       	cp	r20, r24
    5a6a:	59 07       	cpc	r21, r25
    5a6c:	c8 f0       	brcs	.+50     	; 0x5aa0 <malloc+0x66>
    5a6e:	84 17       	cp	r24, r20
    5a70:	95 07       	cpc	r25, r21
    5a72:	69 f4       	brne	.+26     	; 0x5a8e <malloc+0x54>
    5a74:	10 97       	sbiw	r26, 0x00	; 0
    5a76:	31 f0       	breq	.+12     	; 0x5a84 <malloc+0x4a>
    5a78:	12 96       	adiw	r26, 0x02	; 2
    5a7a:	0c 93       	st	X, r16
    5a7c:	12 97       	sbiw	r26, 0x02	; 2
    5a7e:	13 96       	adiw	r26, 0x03	; 3
    5a80:	1c 93       	st	X, r17
    5a82:	27 c0       	rjmp	.+78     	; 0x5ad2 <malloc+0x98>
    5a84:	00 93 0e 25 	sts	0x250E, r16	; 0x80250e <__flp>
    5a88:	10 93 0f 25 	sts	0x250F, r17	; 0x80250f <__flp+0x1>
    5a8c:	22 c0       	rjmp	.+68     	; 0x5ad2 <malloc+0x98>
    5a8e:	21 15       	cp	r18, r1
    5a90:	31 05       	cpc	r19, r1
    5a92:	19 f0       	breq	.+6      	; 0x5a9a <malloc+0x60>
    5a94:	42 17       	cp	r20, r18
    5a96:	53 07       	cpc	r21, r19
    5a98:	18 f4       	brcc	.+6      	; 0x5aa0 <malloc+0x66>
    5a9a:	9a 01       	movw	r18, r20
    5a9c:	bd 01       	movw	r22, r26
    5a9e:	ef 01       	movw	r28, r30
    5aa0:	df 01       	movw	r26, r30
    5aa2:	f8 01       	movw	r30, r16
    5aa4:	db cf       	rjmp	.-74     	; 0x5a5c <malloc+0x22>
    5aa6:	21 15       	cp	r18, r1
    5aa8:	31 05       	cpc	r19, r1
    5aaa:	f9 f0       	breq	.+62     	; 0x5aea <malloc+0xb0>
    5aac:	28 1b       	sub	r18, r24
    5aae:	39 0b       	sbc	r19, r25
    5ab0:	24 30       	cpi	r18, 0x04	; 4
    5ab2:	31 05       	cpc	r19, r1
    5ab4:	80 f4       	brcc	.+32     	; 0x5ad6 <malloc+0x9c>
    5ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    5aba:	61 15       	cp	r22, r1
    5abc:	71 05       	cpc	r23, r1
    5abe:	21 f0       	breq	.+8      	; 0x5ac8 <malloc+0x8e>
    5ac0:	fb 01       	movw	r30, r22
    5ac2:	82 83       	std	Z+2, r24	; 0x02
    5ac4:	93 83       	std	Z+3, r25	; 0x03
    5ac6:	04 c0       	rjmp	.+8      	; 0x5ad0 <malloc+0x96>
    5ac8:	80 93 0e 25 	sts	0x250E, r24	; 0x80250e <__flp>
    5acc:	90 93 0f 25 	sts	0x250F, r25	; 0x80250f <__flp+0x1>
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	32 96       	adiw	r30, 0x02	; 2
    5ad4:	44 c0       	rjmp	.+136    	; 0x5b5e <malloc+0x124>
    5ad6:	fe 01       	movw	r30, r28
    5ad8:	e2 0f       	add	r30, r18
    5ada:	f3 1f       	adc	r31, r19
    5adc:	81 93       	st	Z+, r24
    5ade:	91 93       	st	Z+, r25
    5ae0:	22 50       	subi	r18, 0x02	; 2
    5ae2:	31 09       	sbc	r19, r1
    5ae4:	28 83       	st	Y, r18
    5ae6:	39 83       	std	Y+1, r19	; 0x01
    5ae8:	3a c0       	rjmp	.+116    	; 0x5b5e <malloc+0x124>
    5aea:	20 91 0c 25 	lds	r18, 0x250C	; 0x80250c <__brkval>
    5aee:	30 91 0d 25 	lds	r19, 0x250D	; 0x80250d <__brkval+0x1>
    5af2:	23 2b       	or	r18, r19
    5af4:	41 f4       	brne	.+16     	; 0x5b06 <malloc+0xcc>
    5af6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5afa:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5afe:	20 93 0c 25 	sts	0x250C, r18	; 0x80250c <__brkval>
    5b02:	30 93 0d 25 	sts	0x250D, r19	; 0x80250d <__brkval+0x1>
    5b06:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    5b0a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5b0e:	21 15       	cp	r18, r1
    5b10:	31 05       	cpc	r19, r1
    5b12:	41 f4       	brne	.+16     	; 0x5b24 <malloc+0xea>
    5b14:	2d b7       	in	r18, 0x3d	; 61
    5b16:	3e b7       	in	r19, 0x3e	; 62
    5b18:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5b1c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5b20:	24 1b       	sub	r18, r20
    5b22:	35 0b       	sbc	r19, r21
    5b24:	e0 91 0c 25 	lds	r30, 0x250C	; 0x80250c <__brkval>
    5b28:	f0 91 0d 25 	lds	r31, 0x250D	; 0x80250d <__brkval+0x1>
    5b2c:	e2 17       	cp	r30, r18
    5b2e:	f3 07       	cpc	r31, r19
    5b30:	a0 f4       	brcc	.+40     	; 0x5b5a <malloc+0x120>
    5b32:	2e 1b       	sub	r18, r30
    5b34:	3f 0b       	sbc	r19, r31
    5b36:	28 17       	cp	r18, r24
    5b38:	39 07       	cpc	r19, r25
    5b3a:	78 f0       	brcs	.+30     	; 0x5b5a <malloc+0x120>
    5b3c:	ac 01       	movw	r20, r24
    5b3e:	4e 5f       	subi	r20, 0xFE	; 254
    5b40:	5f 4f       	sbci	r21, 0xFF	; 255
    5b42:	24 17       	cp	r18, r20
    5b44:	35 07       	cpc	r19, r21
    5b46:	48 f0       	brcs	.+18     	; 0x5b5a <malloc+0x120>
    5b48:	4e 0f       	add	r20, r30
    5b4a:	5f 1f       	adc	r21, r31
    5b4c:	40 93 0c 25 	sts	0x250C, r20	; 0x80250c <__brkval>
    5b50:	50 93 0d 25 	sts	0x250D, r21	; 0x80250d <__brkval+0x1>
    5b54:	81 93       	st	Z+, r24
    5b56:	91 93       	st	Z+, r25
    5b58:	02 c0       	rjmp	.+4      	; 0x5b5e <malloc+0x124>
    5b5a:	e0 e0       	ldi	r30, 0x00	; 0
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	cf 01       	movw	r24, r30
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	1f 91       	pop	r17
    5b66:	0f 91       	pop	r16
    5b68:	08 95       	ret

00005b6a <free>:
    5b6a:	cf 93       	push	r28
    5b6c:	df 93       	push	r29
    5b6e:	00 97       	sbiw	r24, 0x00	; 0
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <free+0xa>
    5b72:	81 c0       	rjmp	.+258    	; 0x5c76 <free+0x10c>
    5b74:	fc 01       	movw	r30, r24
    5b76:	32 97       	sbiw	r30, 0x02	; 2
    5b78:	12 82       	std	Z+2, r1	; 0x02
    5b7a:	13 82       	std	Z+3, r1	; 0x03
    5b7c:	a0 91 0e 25 	lds	r26, 0x250E	; 0x80250e <__flp>
    5b80:	b0 91 0f 25 	lds	r27, 0x250F	; 0x80250f <__flp+0x1>
    5b84:	10 97       	sbiw	r26, 0x00	; 0
    5b86:	81 f4       	brne	.+32     	; 0x5ba8 <free+0x3e>
    5b88:	20 81       	ld	r18, Z
    5b8a:	31 81       	ldd	r19, Z+1	; 0x01
    5b8c:	82 0f       	add	r24, r18
    5b8e:	93 1f       	adc	r25, r19
    5b90:	20 91 0c 25 	lds	r18, 0x250C	; 0x80250c <__brkval>
    5b94:	30 91 0d 25 	lds	r19, 0x250D	; 0x80250d <__brkval+0x1>
    5b98:	28 17       	cp	r18, r24
    5b9a:	39 07       	cpc	r19, r25
    5b9c:	51 f5       	brne	.+84     	; 0x5bf2 <free+0x88>
    5b9e:	e0 93 0c 25 	sts	0x250C, r30	; 0x80250c <__brkval>
    5ba2:	f0 93 0d 25 	sts	0x250D, r31	; 0x80250d <__brkval+0x1>
    5ba6:	67 c0       	rjmp	.+206    	; 0x5c76 <free+0x10c>
    5ba8:	ed 01       	movw	r28, r26
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	ce 17       	cp	r28, r30
    5bb0:	df 07       	cpc	r29, r31
    5bb2:	40 f4       	brcc	.+16     	; 0x5bc4 <free+0x5a>
    5bb4:	4a 81       	ldd	r20, Y+2	; 0x02
    5bb6:	5b 81       	ldd	r21, Y+3	; 0x03
    5bb8:	9e 01       	movw	r18, r28
    5bba:	41 15       	cp	r20, r1
    5bbc:	51 05       	cpc	r21, r1
    5bbe:	f1 f0       	breq	.+60     	; 0x5bfc <free+0x92>
    5bc0:	ea 01       	movw	r28, r20
    5bc2:	f5 cf       	rjmp	.-22     	; 0x5bae <free+0x44>
    5bc4:	c2 83       	std	Z+2, r28	; 0x02
    5bc6:	d3 83       	std	Z+3, r29	; 0x03
    5bc8:	40 81       	ld	r20, Z
    5bca:	51 81       	ldd	r21, Z+1	; 0x01
    5bcc:	84 0f       	add	r24, r20
    5bce:	95 1f       	adc	r25, r21
    5bd0:	c8 17       	cp	r28, r24
    5bd2:	d9 07       	cpc	r29, r25
    5bd4:	59 f4       	brne	.+22     	; 0x5bec <free+0x82>
    5bd6:	88 81       	ld	r24, Y
    5bd8:	99 81       	ldd	r25, Y+1	; 0x01
    5bda:	84 0f       	add	r24, r20
    5bdc:	95 1f       	adc	r25, r21
    5bde:	02 96       	adiw	r24, 0x02	; 2
    5be0:	80 83       	st	Z, r24
    5be2:	91 83       	std	Z+1, r25	; 0x01
    5be4:	8a 81       	ldd	r24, Y+2	; 0x02
    5be6:	9b 81       	ldd	r25, Y+3	; 0x03
    5be8:	82 83       	std	Z+2, r24	; 0x02
    5bea:	93 83       	std	Z+3, r25	; 0x03
    5bec:	21 15       	cp	r18, r1
    5bee:	31 05       	cpc	r19, r1
    5bf0:	29 f4       	brne	.+10     	; 0x5bfc <free+0x92>
    5bf2:	e0 93 0e 25 	sts	0x250E, r30	; 0x80250e <__flp>
    5bf6:	f0 93 0f 25 	sts	0x250F, r31	; 0x80250f <__flp+0x1>
    5bfa:	3d c0       	rjmp	.+122    	; 0x5c76 <free+0x10c>
    5bfc:	e9 01       	movw	r28, r18
    5bfe:	ea 83       	std	Y+2, r30	; 0x02
    5c00:	fb 83       	std	Y+3, r31	; 0x03
    5c02:	49 91       	ld	r20, Y+
    5c04:	59 91       	ld	r21, Y+
    5c06:	c4 0f       	add	r28, r20
    5c08:	d5 1f       	adc	r29, r21
    5c0a:	ec 17       	cp	r30, r28
    5c0c:	fd 07       	cpc	r31, r29
    5c0e:	61 f4       	brne	.+24     	; 0x5c28 <free+0xbe>
    5c10:	80 81       	ld	r24, Z
    5c12:	91 81       	ldd	r25, Z+1	; 0x01
    5c14:	84 0f       	add	r24, r20
    5c16:	95 1f       	adc	r25, r21
    5c18:	02 96       	adiw	r24, 0x02	; 2
    5c1a:	e9 01       	movw	r28, r18
    5c1c:	88 83       	st	Y, r24
    5c1e:	99 83       	std	Y+1, r25	; 0x01
    5c20:	82 81       	ldd	r24, Z+2	; 0x02
    5c22:	93 81       	ldd	r25, Z+3	; 0x03
    5c24:	8a 83       	std	Y+2, r24	; 0x02
    5c26:	9b 83       	std	Y+3, r25	; 0x03
    5c28:	e0 e0       	ldi	r30, 0x00	; 0
    5c2a:	f0 e0       	ldi	r31, 0x00	; 0
    5c2c:	12 96       	adiw	r26, 0x02	; 2
    5c2e:	8d 91       	ld	r24, X+
    5c30:	9c 91       	ld	r25, X
    5c32:	13 97       	sbiw	r26, 0x03	; 3
    5c34:	00 97       	sbiw	r24, 0x00	; 0
    5c36:	19 f0       	breq	.+6      	; 0x5c3e <free+0xd4>
    5c38:	fd 01       	movw	r30, r26
    5c3a:	dc 01       	movw	r26, r24
    5c3c:	f7 cf       	rjmp	.-18     	; 0x5c2c <free+0xc2>
    5c3e:	8d 91       	ld	r24, X+
    5c40:	9c 91       	ld	r25, X
    5c42:	11 97       	sbiw	r26, 0x01	; 1
    5c44:	9d 01       	movw	r18, r26
    5c46:	2e 5f       	subi	r18, 0xFE	; 254
    5c48:	3f 4f       	sbci	r19, 0xFF	; 255
    5c4a:	82 0f       	add	r24, r18
    5c4c:	93 1f       	adc	r25, r19
    5c4e:	20 91 0c 25 	lds	r18, 0x250C	; 0x80250c <__brkval>
    5c52:	30 91 0d 25 	lds	r19, 0x250D	; 0x80250d <__brkval+0x1>
    5c56:	28 17       	cp	r18, r24
    5c58:	39 07       	cpc	r19, r25
    5c5a:	69 f4       	brne	.+26     	; 0x5c76 <free+0x10c>
    5c5c:	30 97       	sbiw	r30, 0x00	; 0
    5c5e:	29 f4       	brne	.+10     	; 0x5c6a <free+0x100>
    5c60:	10 92 0e 25 	sts	0x250E, r1	; 0x80250e <__flp>
    5c64:	10 92 0f 25 	sts	0x250F, r1	; 0x80250f <__flp+0x1>
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <free+0x104>
    5c6a:	12 82       	std	Z+2, r1	; 0x02
    5c6c:	13 82       	std	Z+3, r1	; 0x03
    5c6e:	a0 93 0c 25 	sts	0x250C, r26	; 0x80250c <__brkval>
    5c72:	b0 93 0d 25 	sts	0x250D, r27	; 0x80250d <__brkval+0x1>
    5c76:	df 91       	pop	r29
    5c78:	cf 91       	pop	r28
    5c7a:	08 95       	ret

00005c7c <strnlen_P>:
    5c7c:	fc 01       	movw	r30, r24
    5c7e:	05 90       	lpm	r0, Z+
    5c80:	61 50       	subi	r22, 0x01	; 1
    5c82:	70 40       	sbci	r23, 0x00	; 0
    5c84:	01 10       	cpse	r0, r1
    5c86:	d8 f7       	brcc	.-10     	; 0x5c7e <strnlen_P+0x2>
    5c88:	80 95       	com	r24
    5c8a:	90 95       	com	r25
    5c8c:	8e 0f       	add	r24, r30
    5c8e:	9f 1f       	adc	r25, r31
    5c90:	08 95       	ret

00005c92 <memset>:
    5c92:	dc 01       	movw	r26, r24
    5c94:	01 c0       	rjmp	.+2      	; 0x5c98 <memset+0x6>
    5c96:	6d 93       	st	X+, r22
    5c98:	41 50       	subi	r20, 0x01	; 1
    5c9a:	50 40       	sbci	r21, 0x00	; 0
    5c9c:	e0 f7       	brcc	.-8      	; 0x5c96 <memset+0x4>
    5c9e:	08 95       	ret

00005ca0 <strnlen>:
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	61 50       	subi	r22, 0x01	; 1
    5ca4:	70 40       	sbci	r23, 0x00	; 0
    5ca6:	01 90       	ld	r0, Z+
    5ca8:	01 10       	cpse	r0, r1
    5caa:	d8 f7       	brcc	.-10     	; 0x5ca2 <strnlen+0x2>
    5cac:	80 95       	com	r24
    5cae:	90 95       	com	r25
    5cb0:	8e 0f       	add	r24, r30
    5cb2:	9f 1f       	adc	r25, r31
    5cb4:	08 95       	ret

00005cb6 <fputc>:
    5cb6:	0f 93       	push	r16
    5cb8:	1f 93       	push	r17
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29
    5cbe:	fb 01       	movw	r30, r22
    5cc0:	23 81       	ldd	r18, Z+3	; 0x03
    5cc2:	21 fd       	sbrc	r18, 1
    5cc4:	03 c0       	rjmp	.+6      	; 0x5ccc <fputc+0x16>
    5cc6:	8f ef       	ldi	r24, 0xFF	; 255
    5cc8:	9f ef       	ldi	r25, 0xFF	; 255
    5cca:	2c c0       	rjmp	.+88     	; 0x5d24 <fputc+0x6e>
    5ccc:	22 ff       	sbrs	r18, 2
    5cce:	16 c0       	rjmp	.+44     	; 0x5cfc <fputc+0x46>
    5cd0:	46 81       	ldd	r20, Z+6	; 0x06
    5cd2:	57 81       	ldd	r21, Z+7	; 0x07
    5cd4:	24 81       	ldd	r18, Z+4	; 0x04
    5cd6:	35 81       	ldd	r19, Z+5	; 0x05
    5cd8:	42 17       	cp	r20, r18
    5cda:	53 07       	cpc	r21, r19
    5cdc:	44 f4       	brge	.+16     	; 0x5cee <fputc+0x38>
    5cde:	a0 81       	ld	r26, Z
    5ce0:	b1 81       	ldd	r27, Z+1	; 0x01
    5ce2:	9d 01       	movw	r18, r26
    5ce4:	2f 5f       	subi	r18, 0xFF	; 255
    5ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce8:	20 83       	st	Z, r18
    5cea:	31 83       	std	Z+1, r19	; 0x01
    5cec:	8c 93       	st	X, r24
    5cee:	26 81       	ldd	r18, Z+6	; 0x06
    5cf0:	37 81       	ldd	r19, Z+7	; 0x07
    5cf2:	2f 5f       	subi	r18, 0xFF	; 255
    5cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf6:	26 83       	std	Z+6, r18	; 0x06
    5cf8:	37 83       	std	Z+7, r19	; 0x07
    5cfa:	14 c0       	rjmp	.+40     	; 0x5d24 <fputc+0x6e>
    5cfc:	8b 01       	movw	r16, r22
    5cfe:	ec 01       	movw	r28, r24
    5d00:	fb 01       	movw	r30, r22
    5d02:	00 84       	ldd	r0, Z+8	; 0x08
    5d04:	f1 85       	ldd	r31, Z+9	; 0x09
    5d06:	e0 2d       	mov	r30, r0
    5d08:	09 95       	icall
    5d0a:	89 2b       	or	r24, r25
    5d0c:	e1 f6       	brne	.-72     	; 0x5cc6 <fputc+0x10>
    5d0e:	d8 01       	movw	r26, r16
    5d10:	16 96       	adiw	r26, 0x06	; 6
    5d12:	8d 91       	ld	r24, X+
    5d14:	9c 91       	ld	r25, X
    5d16:	17 97       	sbiw	r26, 0x07	; 7
    5d18:	01 96       	adiw	r24, 0x01	; 1
    5d1a:	16 96       	adiw	r26, 0x06	; 6
    5d1c:	8d 93       	st	X+, r24
    5d1e:	9c 93       	st	X, r25
    5d20:	17 97       	sbiw	r26, 0x07	; 7
    5d22:	ce 01       	movw	r24, r28
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	08 95       	ret

00005d2e <__ultoa_invert>:
    5d2e:	fa 01       	movw	r30, r20
    5d30:	aa 27       	eor	r26, r26
    5d32:	28 30       	cpi	r18, 0x08	; 8
    5d34:	51 f1       	breq	.+84     	; 0x5d8a <__ultoa_invert+0x5c>
    5d36:	20 31       	cpi	r18, 0x10	; 16
    5d38:	81 f1       	breq	.+96     	; 0x5d9a <__ultoa_invert+0x6c>
    5d3a:	e8 94       	clt
    5d3c:	6f 93       	push	r22
    5d3e:	6e 7f       	andi	r22, 0xFE	; 254
    5d40:	6e 5f       	subi	r22, 0xFE	; 254
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8f 4f       	sbci	r24, 0xFF	; 255
    5d46:	9f 4f       	sbci	r25, 0xFF	; 255
    5d48:	af 4f       	sbci	r26, 0xFF	; 255
    5d4a:	b1 e0       	ldi	r27, 0x01	; 1
    5d4c:	3e d0       	rcall	.+124    	; 0x5dca <__ultoa_invert+0x9c>
    5d4e:	b4 e0       	ldi	r27, 0x04	; 4
    5d50:	3c d0       	rcall	.+120    	; 0x5dca <__ultoa_invert+0x9c>
    5d52:	67 0f       	add	r22, r23
    5d54:	78 1f       	adc	r23, r24
    5d56:	89 1f       	adc	r24, r25
    5d58:	9a 1f       	adc	r25, r26
    5d5a:	a1 1d       	adc	r26, r1
    5d5c:	68 0f       	add	r22, r24
    5d5e:	79 1f       	adc	r23, r25
    5d60:	8a 1f       	adc	r24, r26
    5d62:	91 1d       	adc	r25, r1
    5d64:	a1 1d       	adc	r26, r1
    5d66:	6a 0f       	add	r22, r26
    5d68:	71 1d       	adc	r23, r1
    5d6a:	81 1d       	adc	r24, r1
    5d6c:	91 1d       	adc	r25, r1
    5d6e:	a1 1d       	adc	r26, r1
    5d70:	20 d0       	rcall	.+64     	; 0x5db2 <__ultoa_invert+0x84>
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <__ultoa_invert+0x48>
    5d74:	68 94       	set
    5d76:	3f 91       	pop	r19
    5d78:	2a e0       	ldi	r18, 0x0A	; 10
    5d7a:	26 9f       	mul	r18, r22
    5d7c:	11 24       	eor	r1, r1
    5d7e:	30 19       	sub	r19, r0
    5d80:	30 5d       	subi	r19, 0xD0	; 208
    5d82:	31 93       	st	Z+, r19
    5d84:	de f6       	brtc	.-74     	; 0x5d3c <__ultoa_invert+0xe>
    5d86:	cf 01       	movw	r24, r30
    5d88:	08 95       	ret
    5d8a:	46 2f       	mov	r20, r22
    5d8c:	47 70       	andi	r20, 0x07	; 7
    5d8e:	40 5d       	subi	r20, 0xD0	; 208
    5d90:	41 93       	st	Z+, r20
    5d92:	b3 e0       	ldi	r27, 0x03	; 3
    5d94:	0f d0       	rcall	.+30     	; 0x5db4 <__ultoa_invert+0x86>
    5d96:	c9 f7       	brne	.-14     	; 0x5d8a <__ultoa_invert+0x5c>
    5d98:	f6 cf       	rjmp	.-20     	; 0x5d86 <__ultoa_invert+0x58>
    5d9a:	46 2f       	mov	r20, r22
    5d9c:	4f 70       	andi	r20, 0x0F	; 15
    5d9e:	40 5d       	subi	r20, 0xD0	; 208
    5da0:	4a 33       	cpi	r20, 0x3A	; 58
    5da2:	18 f0       	brcs	.+6      	; 0x5daa <__ultoa_invert+0x7c>
    5da4:	49 5d       	subi	r20, 0xD9	; 217
    5da6:	31 fd       	sbrc	r19, 1
    5da8:	40 52       	subi	r20, 0x20	; 32
    5daa:	41 93       	st	Z+, r20
    5dac:	02 d0       	rcall	.+4      	; 0x5db2 <__ultoa_invert+0x84>
    5dae:	a9 f7       	brne	.-22     	; 0x5d9a <__ultoa_invert+0x6c>
    5db0:	ea cf       	rjmp	.-44     	; 0x5d86 <__ultoa_invert+0x58>
    5db2:	b4 e0       	ldi	r27, 0x04	; 4
    5db4:	a6 95       	lsr	r26
    5db6:	97 95       	ror	r25
    5db8:	87 95       	ror	r24
    5dba:	77 95       	ror	r23
    5dbc:	67 95       	ror	r22
    5dbe:	ba 95       	dec	r27
    5dc0:	c9 f7       	brne	.-14     	; 0x5db4 <__ultoa_invert+0x86>
    5dc2:	00 97       	sbiw	r24, 0x00	; 0
    5dc4:	61 05       	cpc	r22, r1
    5dc6:	71 05       	cpc	r23, r1
    5dc8:	08 95       	ret
    5dca:	9b 01       	movw	r18, r22
    5dcc:	ac 01       	movw	r20, r24
    5dce:	0a 2e       	mov	r0, r26
    5dd0:	06 94       	lsr	r0
    5dd2:	57 95       	ror	r21
    5dd4:	47 95       	ror	r20
    5dd6:	37 95       	ror	r19
    5dd8:	27 95       	ror	r18
    5dda:	ba 95       	dec	r27
    5ddc:	c9 f7       	brne	.-14     	; 0x5dd0 <__ultoa_invert+0xa2>
    5dde:	62 0f       	add	r22, r18
    5de0:	73 1f       	adc	r23, r19
    5de2:	84 1f       	adc	r24, r20
    5de4:	95 1f       	adc	r25, r21
    5de6:	a0 1d       	adc	r26, r0
    5de8:	08 95       	ret

00005dea <__prologue_saves__>:
    5dea:	2f 92       	push	r2
    5dec:	3f 92       	push	r3
    5dee:	4f 92       	push	r4
    5df0:	5f 92       	push	r5
    5df2:	6f 92       	push	r6
    5df4:	7f 92       	push	r7
    5df6:	8f 92       	push	r8
    5df8:	9f 92       	push	r9
    5dfa:	af 92       	push	r10
    5dfc:	bf 92       	push	r11
    5dfe:	cf 92       	push	r12
    5e00:	df 92       	push	r13
    5e02:	ef 92       	push	r14
    5e04:	ff 92       	push	r15
    5e06:	0f 93       	push	r16
    5e08:	1f 93       	push	r17
    5e0a:	cf 93       	push	r28
    5e0c:	df 93       	push	r29
    5e0e:	cd b7       	in	r28, 0x3d	; 61
    5e10:	de b7       	in	r29, 0x3e	; 62
    5e12:	ca 1b       	sub	r28, r26
    5e14:	db 0b       	sbc	r29, r27
    5e16:	cd bf       	out	0x3d, r28	; 61
    5e18:	de bf       	out	0x3e, r29	; 62
    5e1a:	09 94       	ijmp

00005e1c <__epilogue_restores__>:
    5e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e1e:	39 88       	ldd	r3, Y+17	; 0x11
    5e20:	48 88       	ldd	r4, Y+16	; 0x10
    5e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e30:	c8 84       	ldd	r12, Y+8	; 0x08
    5e32:	df 80       	ldd	r13, Y+7	; 0x07
    5e34:	ee 80       	ldd	r14, Y+6	; 0x06
    5e36:	fd 80       	ldd	r15, Y+5	; 0x05
    5e38:	0c 81       	ldd	r16, Y+4	; 0x04
    5e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    5e40:	ce 0f       	add	r28, r30
    5e42:	d1 1d       	adc	r29, r1
    5e44:	cd bf       	out	0x3d, r28	; 61
    5e46:	de bf       	out	0x3e, r29	; 62
    5e48:	ed 01       	movw	r28, r26
    5e4a:	08 95       	ret

00005e4c <_exit>:
    5e4c:	f8 94       	cli

00005e4e <__stop_program>:
    5e4e:	ff cf       	rjmp	.-2      	; 0x5e4e <__stop_program>
