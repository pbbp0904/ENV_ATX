
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00802000  00005e80  00005f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b04  008021b0  008021b0  000060c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  00006160  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012303  00000000  00000000  00006668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b11  00000000  00000000  0001896b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009474  00000000  00000000  0001d47c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017f8  00000000  00000000  000268f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ec05  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007175  00000000  00000000  00056ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  0005de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000be7e  00000000  00000000  0005e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	00 00       	nop
       4:	4d c1       	rjmp	.+666    	; 0x2a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c1       	rjmp	.+662    	; 0x2a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c1       	rjmp	.+658    	; 0x2a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c1       	rjmp	.+654    	; 0x2a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c1       	rjmp	.+650    	; 0x2a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c1       	rjmp	.+646    	; 0x2a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c1       	rjmp	.+642    	; 0x2a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c1       	rjmp	.+638    	; 0x2a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c1       	rjmp	.+634    	; 0x2a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c1       	rjmp	.+630    	; 0x2a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c1       	rjmp	.+626    	; 0x2a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c1       	rjmp	.+622    	; 0x2a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c7       	rjmp	.+3606   	; 0xe4c <__vector_13>
      36:	00 00       	nop
      38:	48 c2       	rjmp	.+1168   	; 0x4ca <__vector_14>
      3a:	00 00       	nop
      3c:	6f c2       	rjmp	.+1246   	; 0x51c <__vector_15>
      3e:	00 00       	nop
      40:	96 c2       	rjmp	.+1324   	; 0x56e <__vector_16>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__vector_17>
      46:	00 00       	nop
      48:	e4 c2       	rjmp	.+1480   	; 0x612 <__vector_18>
      4a:	00 00       	nop
      4c:	0b c3       	rjmp	.+1558   	; 0x664 <__vector_19>
      4e:	00 00       	nop
      50:	32 c3       	rjmp	.+1636   	; 0x6b6 <__vector_20>
      52:	00 00       	nop
      54:	59 c3       	rjmp	.+1714   	; 0x708 <__vector_21>
      56:	00 00       	nop
      58:	80 c3       	rjmp	.+1792   	; 0x75a <__vector_22>
      5a:	00 00       	nop
      5c:	a7 c3       	rjmp	.+1870   	; 0x7ac <__vector_23>
      5e:	00 00       	nop
      60:	1f c1       	rjmp	.+574    	; 0x2a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__vector_25>
      68:	1b c1       	rjmp	.+566    	; 0x2a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	19 c1       	rjmp	.+562    	; 0x2a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	17 c1       	rjmp	.+558    	; 0x2a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c1       	rjmp	.+554    	; 0x2a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	13 c1       	rjmp	.+550    	; 0x2a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	11 c1       	rjmp	.+546    	; 0x2a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c1       	rjmp	.+542    	; 0x2a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	0d c1       	rjmp	.+538    	; 0x2a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0b c1       	rjmp	.+534    	; 0x2a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	09 c1       	rjmp	.+530    	; 0x2a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	07 c1       	rjmp	.+526    	; 0x2a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	05 c1       	rjmp	.+522    	; 0x2a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	03 c1       	rjmp	.+518    	; 0x2a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	01 c1       	rjmp	.+514    	; 0x2a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ff c0       	rjmp	.+510    	; 0x2a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fd c0       	rjmp	.+506    	; 0x2a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fb c0       	rjmp	.+502    	; 0x2a0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f9 c0       	rjmp	.+498    	; 0x2a0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f7 c0       	rjmp	.+494    	; 0x2a0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f5 c0       	rjmp	.+490    	; 0x2a0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ec c6       	rjmp	.+3544   	; 0xe92 <__vector_46>
      ba:	00 00       	nop
      bc:	3a c5       	rjmp	.+2676   	; 0xb32 <__vector_47>
      be:	00 00       	nop
      c0:	61 c5       	rjmp	.+2754   	; 0xb84 <__vector_48>
      c2:	00 00       	nop
      c4:	88 c5       	rjmp	.+2832   	; 0xbd6 <__vector_49>
      c6:	00 00       	nop
      c8:	af c5       	rjmp	.+2910   	; 0xc28 <__vector_50>
      ca:	00 00       	nop
      cc:	d6 c5       	rjmp	.+2988   	; 0xc7a <__vector_51>
      ce:	00 00       	nop
      d0:	fd c5       	rjmp	.+3066   	; 0xccc <__vector_52>
      d2:	00 00       	nop
      d4:	e5 c0       	rjmp	.+458    	; 0x2a0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e3 c0       	rjmp	.+454    	; 0x2a0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e1 c0       	rjmp	.+450    	; 0x2a0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	df c0       	rjmp	.+446    	; 0x2a0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd c0       	rjmp	.+442    	; 0x2a0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	db c0       	rjmp	.+438    	; 0x2a0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d9 c0       	rjmp	.+434    	; 0x2a0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d7 c0       	rjmp	.+430    	; 0x2a0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d5 c0       	rjmp	.+426    	; 0x2a0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d3 c0       	rjmp	.+422    	; 0x2a0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d1 c0       	rjmp	.+418    	; 0x2a0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 dd 20 	jmp	0x41ba	; 0x41ba <__vector_64>
     104:	cd c0       	rjmp	.+410    	; 0x2a0 <__bad_interrupt>
     106:	00 00       	nop
     108:	cb c0       	rjmp	.+406    	; 0x2a0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c9 c0       	rjmp	.+402    	; 0x2a0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c7 c0       	rjmp	.+398    	; 0x2a0 <__bad_interrupt>
     112:	00 00       	nop
     114:	c5 c0       	rjmp	.+394    	; 0x2a0 <__bad_interrupt>
     116:	00 00       	nop
     118:	c3 c0       	rjmp	.+390    	; 0x2a0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	14 c1       	rjmp	.+552    	; 0x346 <__vector_71>
     11e:	00 00       	nop
     120:	40 c1       	rjmp	.+640    	; 0x3a2 <__vector_72>
     122:	00 00       	nop
     124:	6c c1       	rjmp	.+728    	; 0x3fe <__vector_73>
     126:	00 00       	nop
     128:	98 c1       	rjmp	.+816    	; 0x45a <__vector_74>
     12a:	00 00       	nop
     12c:	b9 c0       	rjmp	.+370    	; 0x2a0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b7 c0       	rjmp	.+366    	; 0x2a0 <__bad_interrupt>
     132:	00 00       	nop
     134:	64 c3       	rjmp	.+1736   	; 0x7fe <__vector_77>
     136:	00 00       	nop
     138:	8b c3       	rjmp	.+1814   	; 0x850 <__vector_78>
     13a:	00 00       	nop
     13c:	b2 c3       	rjmp	.+1892   	; 0x8a2 <__vector_79>
     13e:	00 00       	nop
     140:	d9 c3       	rjmp	.+1970   	; 0x8f4 <__vector_80>
     142:	00 00       	nop
     144:	00 c4       	rjmp	.+2048   	; 0x946 <__vector_81>
     146:	00 00       	nop
     148:	27 c4       	rjmp	.+2126   	; 0x998 <__vector_82>
     14a:	00 00       	nop
     14c:	4e c4       	rjmp	.+2204   	; 0x9ea <__vector_83>
     14e:	00 00       	nop
     150:	75 c4       	rjmp	.+2282   	; 0xa3c <__vector_84>
     152:	00 00       	nop
     154:	9c c4       	rjmp	.+2360   	; 0xa8e <__vector_85>
     156:	00 00       	nop
     158:	c3 c4       	rjmp	.+2438   	; 0xae0 <__vector_86>
     15a:	00 00       	nop
     15c:	a1 c0       	rjmp	.+322    	; 0x2a0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	9f c0       	rjmp	.+318    	; 0x2a0 <__bad_interrupt>
     162:	00 00       	nop
     164:	9d c0       	rjmp	.+314    	; 0x2a0 <__bad_interrupt>
     166:	00 00       	nop
     168:	9b c0       	rjmp	.+310    	; 0x2a0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	99 c0       	rjmp	.+306    	; 0x2a0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	97 c0       	rjmp	.+302    	; 0x2a0 <__bad_interrupt>
     172:	00 00       	nop
     174:	95 c0       	rjmp	.+298    	; 0x2a0 <__bad_interrupt>
     176:	00 00       	nop
     178:	93 c0       	rjmp	.+294    	; 0x2a0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	91 c0       	rjmp	.+290    	; 0x2a0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	8f c0       	rjmp	.+286    	; 0x2a0 <__bad_interrupt>
     182:	00 00       	nop
     184:	8d c0       	rjmp	.+282    	; 0x2a0 <__bad_interrupt>
     186:	00 00       	nop
     188:	8b c0       	rjmp	.+278    	; 0x2a0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	89 c0       	rjmp	.+274    	; 0x2a0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	87 c0       	rjmp	.+270    	; 0x2a0 <__bad_interrupt>
     192:	00 00       	nop
     194:	85 c0       	rjmp	.+266    	; 0x2a0 <__bad_interrupt>
     196:	00 00       	nop
     198:	83 c0       	rjmp	.+262    	; 0x2a0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	81 c0       	rjmp	.+258    	; 0x2a0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7f c0       	rjmp	.+254    	; 0x2a0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7d c0       	rjmp	.+250    	; 0x2a0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7b c0       	rjmp	.+246    	; 0x2a0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	79 c0       	rjmp	.+242    	; 0x2a0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	77 c0       	rjmp	.+238    	; 0x2a0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	75 c0       	rjmp	.+234    	; 0x2a0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	73 c0       	rjmp	.+230    	; 0x2a0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	71 c0       	rjmp	.+226    	; 0x2a0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6f c0       	rjmp	.+222    	; 0x2a0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6d c0       	rjmp	.+218    	; 0x2a0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6b c0       	rjmp	.+214    	; 0x2a0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	69 c0       	rjmp	.+210    	; 0x2a0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	67 c0       	rjmp	.+206    	; 0x2a0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	65 c0       	rjmp	.+202    	; 0x2a0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	63 c0       	rjmp	.+198    	; 0x2a0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	61 c0       	rjmp	.+194    	; 0x2a0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5f c0       	rjmp	.+190    	; 0x2a0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5d c0       	rjmp	.+186    	; 0x2a0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5b c0       	rjmp	.+182    	; 0x2a0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	59 c0       	rjmp	.+178    	; 0x2a0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	57 c0       	rjmp	.+174    	; 0x2a0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	53 c0       	rjmp	.+166    	; 0x2a0 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <__vector_52+0x50>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 00       	.word	0x003f	; ????

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e2       	ldi	r29, 0x2F	; 47
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_copy_data>:
     272:	11 e2       	ldi	r17, 0x21	; 33
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b0 e2       	ldi	r27, 0x20	; 32
     278:	e0 e8       	ldi	r30, 0x80	; 128
     27a:	fe e5       	ldi	r31, 0x5E	; 94
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a0 3b       	cpi	r26, 0xB0	; 176
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	2c e2       	ldi	r18, 0x2C	; 44
     28a:	a0 eb       	ldi	r26, 0xB0	; 176
     28c:	b1 e2       	ldi	r27, 0x21	; 33
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a4 3b       	cpi	r26, 0xB4	; 180
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	0e 94 65 23 	call	0x46ca	; 0x46ca <main>
     29c:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <_exit>

000002a0 <__bad_interrupt>:
     2a0:	af ce       	rjmp	.-674    	; 0x0 <__vectors>

000002a2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     2a2:	08 95       	ret

000002a4 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     2aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     2ae:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     2b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     2b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     2ba:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     2be:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     2c2:	08 95       	ret

000002c4 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     2ce:	9f b7       	in	r25, 0x3f	; 63
     2d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     2d2:	f8 94       	cli
	return flags;
     2d4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     2d6:	e8 2f       	mov	r30, r24
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	e0 59       	subi	r30, 0x90	; 144
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	60 95       	com	r22
     2e0:	80 81       	ld	r24, Z
     2e2:	68 23       	and	r22, r24
     2e4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2e6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	1f 92       	push	r1
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2fa:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <stdio_base>
     2fe:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <stdio_base+0x1>
     302:	e0 91 21 23 	lds	r30, 0x2321	; 0x802321 <ptr_get>
     306:	f0 91 22 23 	lds	r31, 0x2322	; 0x802322 <ptr_get+0x1>
     30a:	be 01       	movw	r22, r28
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	09 95       	icall
	return c;
     312:	89 81       	ldd	r24, Y+1	; 0x01
}
     314:	08 2e       	mov	r0, r24
     316:	00 0c       	add	r0, r0
     318:	99 0b       	sbc	r25, r25
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     322:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     324:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <stdio_base>
     328:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <stdio_base+0x1>
     32c:	e0 91 23 23 	lds	r30, 0x2323	; 0x802323 <ptr_put>
     330:	f0 91 24 23 	lds	r31, 0x2324	; 0x802324 <ptr_put+0x1>
     334:	09 95       	icall
     336:	99 23       	and	r25, r25
     338:	1c f0       	brlt	.+6      	; 0x340 <_write+0x1e>
		return -1;
	}
	return 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     344:	08 95       	ret

00000346 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     368:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     36c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     370:	e0 91 27 23 	lds	r30, 0x2327	; 0x802327 <adca_callback>
     374:	f0 91 28 23 	lds	r31, 0x2328	; 0x802328 <adca_callback+0x1>
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	09 95       	icall
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3c4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3c8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3cc:	e0 91 27 23 	lds	r30, 0x2327	; 0x802327 <adca_callback>
     3d0:	f0 91 28 23 	lds	r31, 0x2328	; 0x802328 <adca_callback+0x1>
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	09 95       	icall
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	2f 93       	push	r18
     40a:	3f 93       	push	r19
     40c:	4f 93       	push	r20
     40e:	5f 93       	push	r21
     410:	6f 93       	push	r22
     412:	7f 93       	push	r23
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
     418:	af 93       	push	r26
     41a:	bf 93       	push	r27
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     420:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     424:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     428:	e0 91 27 23 	lds	r30, 0x2327	; 0x802327 <adca_callback>
     42c:	f0 91 28 23 	lds	r31, 0x2328	; 0x802328 <adca_callback+0x1>
     430:	64 e0       	ldi	r22, 0x04	; 4
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	09 95       	icall
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	6f 93       	push	r22
     46e:	7f 93       	push	r23
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	af 93       	push	r26
     476:	bf 93       	push	r27
     478:	ef 93       	push	r30
     47a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     47c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     480:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     484:	e0 91 27 23 	lds	r30, 0x2327	; 0x802327 <adca_callback>
     488:	f0 91 28 23 	lds	r31, 0x2328	; 0x802328 <adca_callback+0x1>
     48c:	68 e0       	ldi	r22, 0x08	; 8
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	09 95       	icall
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     4b6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     4ba:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     4bc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     4be:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     4c2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     4c4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     4c8:	08 95       	ret

000004ca <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     4ec:	e0 91 e2 21 	lds	r30, 0x21E2	; 0x8021e2 <tc_tcc0_ovf_callback>
     4f0:	f0 91 e3 21 	lds	r31, 0x21E3	; 0x8021e3 <tc_tcc0_ovf_callback+0x1>
     4f4:	30 97       	sbiw	r30, 0x00	; 0
     4f6:	09 f0       	breq	.+2      	; 0x4fa <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     4f8:	09 95       	icall
	}
}
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	bf 91       	pop	r27
     500:	af 91       	pop	r26
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	7f 91       	pop	r23
     508:	6f 91       	pop	r22
     50a:	5f 91       	pop	r21
     50c:	4f 91       	pop	r20
     50e:	3f 91       	pop	r19
     510:	2f 91       	pop	r18
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     53e:	e0 91 e0 21 	lds	r30, 0x21E0	; 0x8021e0 <tc_tcc0_err_callback>
     542:	f0 91 e1 21 	lds	r31, 0x21E1	; 0x8021e1 <tc_tcc0_err_callback+0x1>
     546:	30 97       	sbiw	r30, 0x00	; 0
     548:	09 f0       	breq	.+2      	; 0x54c <__vector_15+0x30>
		tc_tcc0_err_callback();
     54a:	09 95       	icall
	}
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     590:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <tc_tcc0_cca_callback>
     594:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <tc_tcc0_cca_callback+0x1>
     598:	30 97       	sbiw	r30, 0x00	; 0
     59a:	09 f0       	breq	.+2      	; 0x59e <__vector_16+0x30>
		tc_tcc0_cca_callback();
     59c:	09 95       	icall
	}
}
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	bf 91       	pop	r27
     5a4:	af 91       	pop	r26
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	7f 91       	pop	r23
     5ac:	6f 91       	pop	r22
     5ae:	5f 91       	pop	r21
     5b0:	4f 91       	pop	r20
     5b2:	3f 91       	pop	r19
     5b4:	2f 91       	pop	r18
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     5e2:	e0 91 dc 21 	lds	r30, 0x21DC	; 0x8021dc <tc_tcc0_ccb_callback>
     5e6:	f0 91 dd 21 	lds	r31, 0x21DD	; 0x8021dd <tc_tcc0_ccb_callback+0x1>
     5ea:	30 97       	sbiw	r30, 0x00	; 0
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     5ee:	09 95       	icall
	}
}
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     634:	e0 91 da 21 	lds	r30, 0x21DA	; 0x8021da <tc_tcc0_ccc_callback>
     638:	f0 91 db 21 	lds	r31, 0x21DB	; 0x8021db <tc_tcc0_ccc_callback+0x1>
     63c:	30 97       	sbiw	r30, 0x00	; 0
     63e:	09 f0       	breq	.+2      	; 0x642 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     640:	09 95       	icall
	}
}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	0f 90       	pop	r0
     660:	1f 90       	pop	r1
     662:	18 95       	reti

00000664 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     664:	1f 92       	push	r1
     666:	0f 92       	push	r0
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	0f 92       	push	r0
     66c:	11 24       	eor	r1, r1
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     686:	e0 91 d8 21 	lds	r30, 0x21D8	; 0x8021d8 <tc_tcc0_ccd_callback>
     68a:	f0 91 d9 21 	lds	r31, 0x21D9	; 0x8021d9 <tc_tcc0_ccd_callback+0x1>
     68e:	30 97       	sbiw	r30, 0x00	; 0
     690:	09 f0       	breq	.+2      	; 0x694 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     692:	09 95       	icall
	}
}
     694:	ff 91       	pop	r31
     696:	ef 91       	pop	r30
     698:	bf 91       	pop	r27
     69a:	af 91       	pop	r26
     69c:	9f 91       	pop	r25
     69e:	8f 91       	pop	r24
     6a0:	7f 91       	pop	r23
     6a2:	6f 91       	pop	r22
     6a4:	5f 91       	pop	r21
     6a6:	4f 91       	pop	r20
     6a8:	3f 91       	pop	r19
     6aa:	2f 91       	pop	r18
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	2f 93       	push	r18
     6c2:	3f 93       	push	r19
     6c4:	4f 93       	push	r20
     6c6:	5f 93       	push	r21
     6c8:	6f 93       	push	r22
     6ca:	7f 93       	push	r23
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
     6d0:	af 93       	push	r26
     6d2:	bf 93       	push	r27
     6d4:	ef 93       	push	r30
     6d6:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     6d8:	e0 91 d6 21 	lds	r30, 0x21D6	; 0x8021d6 <tc_tcc1_ovf_callback>
     6dc:	f0 91 d7 21 	lds	r31, 0x21D7	; 0x8021d7 <tc_tcc1_ovf_callback+0x1>
     6e0:	30 97       	sbiw	r30, 0x00	; 0
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     6e4:	09 95       	icall
	}
}
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     72a:	e0 91 d4 21 	lds	r30, 0x21D4	; 0x8021d4 <tc_tcc1_err_callback>
     72e:	f0 91 d5 21 	lds	r31, 0x21D5	; 0x8021d5 <tc_tcc1_err_callback+0x1>
     732:	30 97       	sbiw	r30, 0x00	; 0
     734:	09 f0       	breq	.+2      	; 0x738 <__vector_21+0x30>
		tc_tcc1_err_callback();
     736:	09 95       	icall
	}
}
     738:	ff 91       	pop	r31
     73a:	ef 91       	pop	r30
     73c:	bf 91       	pop	r27
     73e:	af 91       	pop	r26
     740:	9f 91       	pop	r25
     742:	8f 91       	pop	r24
     744:	7f 91       	pop	r23
     746:	6f 91       	pop	r22
     748:	5f 91       	pop	r21
     74a:	4f 91       	pop	r20
     74c:	3f 91       	pop	r19
     74e:	2f 91       	pop	r18
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     77c:	e0 91 d2 21 	lds	r30, 0x21D2	; 0x8021d2 <tc_tcc1_cca_callback>
     780:	f0 91 d3 21 	lds	r31, 0x21D3	; 0x8021d3 <tc_tcc1_cca_callback+0x1>
     784:	30 97       	sbiw	r30, 0x00	; 0
     786:	09 f0       	breq	.+2      	; 0x78a <__vector_22+0x30>
		tc_tcc1_cca_callback();
     788:	09 95       	icall
	}
}
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	7f 91       	pop	r23
     798:	6f 91       	pop	r22
     79a:	5f 91       	pop	r21
     79c:	4f 91       	pop	r20
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	3f 93       	push	r19
     7ba:	4f 93       	push	r20
     7bc:	5f 93       	push	r21
     7be:	6f 93       	push	r22
     7c0:	7f 93       	push	r23
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	af 93       	push	r26
     7c8:	bf 93       	push	r27
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     7ce:	e0 91 d0 21 	lds	r30, 0x21D0	; 0x8021d0 <tc_tcc1_ccb_callback>
     7d2:	f0 91 d1 21 	lds	r31, 0x21D1	; 0x8021d1 <tc_tcc1_ccb_callback+0x1>
     7d6:	30 97       	sbiw	r30, 0x00	; 0
     7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     7da:	09 95       	icall
	}
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     820:	e0 91 ce 21 	lds	r30, 0x21CE	; 0x8021ce <tc_tcd0_ovf_callback>
     824:	f0 91 cf 21 	lds	r31, 0x21CF	; 0x8021cf <tc_tcd0_ovf_callback+0x1>
     828:	30 97       	sbiw	r30, 0x00	; 0
     82a:	09 f0       	breq	.+2      	; 0x82e <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     82c:	09 95       	icall
	}
}
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     872:	e0 91 cc 21 	lds	r30, 0x21CC	; 0x8021cc <tc_tcd0_err_callback>
     876:	f0 91 cd 21 	lds	r31, 0x21CD	; 0x8021cd <tc_tcd0_err_callback+0x1>
     87a:	30 97       	sbiw	r30, 0x00	; 0
     87c:	09 f0       	breq	.+2      	; 0x880 <__vector_78+0x30>
		tc_tcd0_err_callback();
     87e:	09 95       	icall
	}
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     8c4:	e0 91 ca 21 	lds	r30, 0x21CA	; 0x8021ca <tc_tcd0_cca_callback>
     8c8:	f0 91 cb 21 	lds	r31, 0x21CB	; 0x8021cb <tc_tcd0_cca_callback+0x1>
     8cc:	30 97       	sbiw	r30, 0x00	; 0
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     8d0:	09 95       	icall
	}
}
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	bf 91       	pop	r27
     8d8:	af 91       	pop	r26
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	7f 91       	pop	r23
     8e0:	6f 91       	pop	r22
     8e2:	5f 91       	pop	r21
     8e4:	4f 91       	pop	r20
     8e6:	3f 91       	pop	r19
     8e8:	2f 91       	pop	r18
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti

000008f4 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     916:	e0 91 c8 21 	lds	r30, 0x21C8	; 0x8021c8 <tc_tcd0_ccb_callback>
     91a:	f0 91 c9 21 	lds	r31, 0x21C9	; 0x8021c9 <tc_tcd0_ccb_callback+0x1>
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	09 f0       	breq	.+2      	; 0x924 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     922:	09 95       	icall
	}
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     968:	e0 91 c6 21 	lds	r30, 0x21C6	; 0x8021c6 <tc_tcd0_ccc_callback>
     96c:	f0 91 c7 21 	lds	r31, 0x21C7	; 0x8021c7 <tc_tcd0_ccc_callback+0x1>
     970:	30 97       	sbiw	r30, 0x00	; 0
     972:	09 f0       	breq	.+2      	; 0x976 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     974:	09 95       	icall
	}
}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	7f 91       	pop	r23
     984:	6f 91       	pop	r22
     986:	5f 91       	pop	r21
     988:	4f 91       	pop	r20
     98a:	3f 91       	pop	r19
     98c:	2f 91       	pop	r18
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	2f 93       	push	r18
     9a4:	3f 93       	push	r19
     9a6:	4f 93       	push	r20
     9a8:	5f 93       	push	r21
     9aa:	6f 93       	push	r22
     9ac:	7f 93       	push	r23
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
     9b2:	af 93       	push	r26
     9b4:	bf 93       	push	r27
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     9ba:	e0 91 c4 21 	lds	r30, 0x21C4	; 0x8021c4 <tc_tcd0_ccd_callback>
     9be:	f0 91 c5 21 	lds	r31, 0x21C5	; 0x8021c5 <tc_tcd0_ccd_callback+0x1>
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     9c6:	09 95       	icall
	}
}
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	bf 91       	pop	r27
     9ce:	af 91       	pop	r26
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	7f 91       	pop	r23
     9d6:	6f 91       	pop	r22
     9d8:	5f 91       	pop	r21
     9da:	4f 91       	pop	r20
     9dc:	3f 91       	pop	r19
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	2f 93       	push	r18
     9f6:	3f 93       	push	r19
     9f8:	4f 93       	push	r20
     9fa:	5f 93       	push	r21
     9fc:	6f 93       	push	r22
     9fe:	7f 93       	push	r23
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	ef 93       	push	r30
     a0a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     a0c:	e0 91 c2 21 	lds	r30, 0x21C2	; 0x8021c2 <tc_tcd1_ovf_callback>
     a10:	f0 91 c3 21 	lds	r31, 0x21C3	; 0x8021c3 <tc_tcd1_ovf_callback+0x1>
     a14:	30 97       	sbiw	r30, 0x00	; 0
     a16:	09 f0       	breq	.+2      	; 0xa1a <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     a18:	09 95       	icall
	}
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	ef 93       	push	r30
     a5c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     a5e:	e0 91 c0 21 	lds	r30, 0x21C0	; 0x8021c0 <tc_tcd1_err_callback>
     a62:	f0 91 c1 21 	lds	r31, 0x21C1	; 0x8021c1 <tc_tcd1_err_callback+0x1>
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	09 f0       	breq	.+2      	; 0xa6c <__vector_84+0x30>
		tc_tcd1_err_callback();
     a6a:	09 95       	icall
	}
}
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     ab0:	e0 91 be 21 	lds	r30, 0x21BE	; 0x8021be <tc_tcd1_cca_callback>
     ab4:	f0 91 bf 21 	lds	r31, 0x21BF	; 0x8021bf <tc_tcd1_cca_callback+0x1>
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	09 f0       	breq	.+2      	; 0xabe <__vector_85+0x30>
		tc_tcd1_cca_callback();
     abc:	09 95       	icall
	}
}
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     b02:	e0 91 bc 21 	lds	r30, 0x21BC	; 0x8021bc <tc_tcd1_ccb_callback>
     b06:	f0 91 bd 21 	lds	r31, 0x21BD	; 0x8021bd <tc_tcd1_ccb_callback+0x1>
     b0a:	30 97       	sbiw	r30, 0x00	; 0
     b0c:	09 f0       	breq	.+2      	; 0xb10 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     b0e:	09 95       	icall
	}
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     b54:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <tc_tce0_ovf_callback>
     b58:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <tc_tce0_ovf_callback+0x1>
     b5c:	30 97       	sbiw	r30, 0x00	; 0
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__vector_47+0x30>
		tc_tce0_ovf_callback();
     b60:	09 95       	icall
	}
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     ba6:	e0 91 b8 21 	lds	r30, 0x21B8	; 0x8021b8 <tc_tce0_err_callback>
     baa:	f0 91 b9 21 	lds	r31, 0x21B9	; 0x8021b9 <tc_tce0_err_callback+0x1>
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_48+0x30>
		tc_tce0_err_callback();
     bb2:	09 95       	icall
	}
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	11 24       	eor	r1, r1
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     bf8:	e0 91 b6 21 	lds	r30, 0x21B6	; 0x8021b6 <tc_tce0_cca_callback>
     bfc:	f0 91 b7 21 	lds	r31, 0x21B7	; 0x8021b7 <tc_tce0_cca_callback+0x1>
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	09 f0       	breq	.+2      	; 0xc06 <__vector_49+0x30>
		tc_tce0_cca_callback();
     c04:	09 95       	icall
	}
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     c4a:	e0 91 b4 21 	lds	r30, 0x21B4	; 0x8021b4 <tc_tce0_ccb_callback>
     c4e:	f0 91 b5 21 	lds	r31, 0x21B5	; 0x8021b5 <tc_tce0_ccb_callback+0x1>
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_50+0x30>
		tc_tce0_ccb_callback();
     c56:	09 95       	icall
	}
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     c9c:	e0 91 b2 21 	lds	r30, 0x21B2	; 0x8021b2 <tc_tce0_ccc_callback>
     ca0:	f0 91 b3 21 	lds	r31, 0x21B3	; 0x8021b3 <tc_tce0_ccc_callback+0x1>
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	09 f0       	breq	.+2      	; 0xcaa <__vector_51+0x30>
		tc_tce0_ccc_callback();
     ca8:	09 95       	icall
	}
}
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     cee:	e0 91 b0 21 	lds	r30, 0x21B0	; 0x8021b0 <__data_end>
     cf2:	f0 91 b1 21 	lds	r31, 0x21B1	; 0x8021b1 <__data_end+0x1>
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__vector_52+0x30>
		tc_tce0_ccd_callback();
     cfa:	09 95       	icall
	}
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     d22:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <transfer>
     d26:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <transfer+0x1>
     d2a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     d2c:	83 ff       	sbrs	r24, 3
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     d30:	88 60       	ori	r24, 0x08	; 8
     d32:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     d38:	86 ef       	ldi	r24, 0xF6	; 246
     d3a:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <transfer+0xa>
     d3e:	83 c0       	rjmp	.+262    	; 0xe46 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     d40:	98 2f       	mov	r25, r24
     d42:	94 71       	andi	r25, 0x14	; 20
     d44:	31 f0       	breq	.+12     	; 0xd52 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <transfer+0xa>
     d50:	7a c0       	rjmp	.+244    	; 0xe46 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     d52:	86 ff       	sbrs	r24, 6
     d54:	43 c0       	rjmp	.+134    	; 0xddc <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     d56:	c4 ee       	ldi	r28, 0xE4	; 228
     d58:	d1 e2       	ldi	r29, 0x21	; 33
     d5a:	aa 81       	ldd	r26, Y+2	; 0x02
     d5c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	14 96       	adiw	r26, 0x04	; 4
     d64:	2d 91       	ld	r18, X+
     d66:	3c 91       	ld	r19, X
     d68:	15 97       	sbiw	r26, 0x05	; 5
     d6a:	82 17       	cp	r24, r18
     d6c:	93 07       	cpc	r25, r19
     d6e:	6c f4       	brge	.+26     	; 0xd8a <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     d70:	9c 01       	movw	r18, r24
     d72:	2f 5f       	subi	r18, 0xFF	; 255
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	20 93 e8 21 	sts	0x21E8, r18	; 0x8021e8 <transfer+0x4>
     d7a:	30 93 e9 21 	sts	0x21E9, r19	; 0x8021e9 <transfer+0x5>
     d7e:	a8 0f       	add	r26, r24
     d80:	b9 1f       	adc	r27, r25
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	8c 91       	ld	r24, X
     d86:	87 83       	std	Z+7, r24	; 0x07
     d88:	5e c0       	rjmp	.+188    	; 0xe46 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     d8a:	80 91 ea 21 	lds	r24, 0x21EA	; 0x8021ea <transfer+0x6>
     d8e:	90 91 eb 21 	lds	r25, 0x21EB	; 0x8021eb <transfer+0x7>
     d92:	18 96       	adiw	r26, 0x08	; 8
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	19 97       	sbiw	r26, 0x09	; 9
     d9a:	82 17       	cp	r24, r18
     d9c:	93 07       	cpc	r25, r19
     d9e:	c8 f4       	brcc	.+50     	; 0xdd2 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     da0:	20 91 ec 21 	lds	r18, 0x21EC	; 0x8021ec <transfer+0x8>
     da4:	22 23       	and	r18, r18
     da6:	21 f0       	breq	.+8      	; 0xdb0 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     da8:	86 81       	ldd	r24, Z+6	; 0x06
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	86 83       	std	Z+6, r24	; 0x06
     dae:	4b c0       	rjmp	.+150    	; 0xe46 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     db0:	16 96       	adiw	r26, 0x06	; 6
     db2:	2d 91       	ld	r18, X+
     db4:	3c 91       	ld	r19, X
     db6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     db8:	ac 01       	movw	r20, r24
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	40 93 ea 21 	sts	0x21EA, r20	; 0x8021ea <transfer+0x6>
     dc2:	50 93 eb 21 	sts	0x21EB, r21	; 0x8021eb <transfer+0x7>
     dc6:	d9 01       	movw	r26, r18
     dc8:	a8 0f       	add	r26, r24
     dca:	b9 1f       	adc	r27, r25
     dcc:	8c 91       	ld	r24, X
     dce:	87 83       	std	Z+7, r24	; 0x07
     dd0:	3a c0       	rjmp	.+116    	; 0xe46 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     dd6:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <transfer+0xa>
     dda:	35 c0       	rjmp	.+106    	; 0xe46 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     ddc:	88 23       	and	r24, r24
     dde:	84 f5       	brge	.+96     	; 0xe40 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     de0:	a4 ee       	ldi	r26, 0xE4	; 228
     de2:	b1 e2       	ldi	r27, 0x21	; 33
     de4:	12 96       	adiw	r26, 0x02	; 2
     de6:	cd 91       	ld	r28, X+
     de8:	dc 91       	ld	r29, X
     dea:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     dec:	16 96       	adiw	r26, 0x06	; 6
     dee:	8d 91       	ld	r24, X+
     df0:	9c 91       	ld	r25, X
     df2:	17 97       	sbiw	r26, 0x07	; 7
     df4:	28 85       	ldd	r18, Y+8	; 0x08
     df6:	39 85       	ldd	r19, Y+9	; 0x09
     df8:	82 17       	cp	r24, r18
     dfa:	93 07       	cpc	r25, r19
     dfc:	d8 f4       	brcc	.+54     	; 0xe34 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     dfe:	6e 81       	ldd	r22, Y+6	; 0x06
     e00:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     e02:	9c 01       	movw	r18, r24
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	20 93 ea 21 	sts	0x21EA, r18	; 0x8021ea <transfer+0x6>
     e0c:	30 93 eb 21 	sts	0x21EB, r19	; 0x8021eb <transfer+0x7>
     e10:	47 81       	ldd	r20, Z+7	; 0x07
     e12:	db 01       	movw	r26, r22
     e14:	a8 0f       	add	r26, r24
     e16:	b9 1f       	adc	r27, r25
     e18:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     e1a:	88 85       	ldd	r24, Y+8	; 0x08
     e1c:	99 85       	ldd	r25, Y+9	; 0x09
     e1e:	28 17       	cp	r18, r24
     e20:	39 07       	cpc	r19, r25
     e22:	18 f4       	brcc	.+6      	; 0xe2a <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	83 83       	std	Z+3, r24	; 0x03
     e28:	0e c0       	rjmp	.+28     	; 0xe46 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     e2a:	87 e0       	ldi	r24, 0x07	; 7
     e2c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     e2e:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <transfer+0xa>
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     e38:	89 ef       	ldi	r24, 0xF9	; 249
     e3a:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <transfer+0xa>
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     e40:	8b ef       	ldi	r24, 0xFB	; 251
     e42:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <transfer+0xa>
	}
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
     e6e:	57 df       	rcall	.-338    	; 0xd1e <twim_interrupt_handler>
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	34 df       	rcall	.-408    	; 0xd1e <twim_interrupt_handler>
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     ed8:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     eda:	db 01       	movw	r26, r22
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	8c 91       	ld	r24, X
     ee0:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     ee2:	88 eb       	ldi	r24, 0xB8	; 184
     ee4:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     eea:	e4 ee       	ldi	r30, 0xE4	; 228
     eec:	f1 e2       	ldi	r31, 0x21	; 33
     eee:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     ef0:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     ef2:	e0 ea       	ldi	r30, 0xA0	; 160
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     efc:	78 94       	sei

	return STATUS_OK;
}
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret

00000f02 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	1f 92       	push	r1
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9c 01       	movw	r18, r24
     f0e:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     f10:	89 2b       	or	r24, r25
     f12:	09 f4       	brne	.+2      	; 0xf16 <twi_master_transfer+0x14>
     f14:	51 c0       	rjmp	.+162    	; 0xfb8 <twi_master_transfer+0xb6>
     f16:	30 97       	sbiw	r30, 0x00	; 0
     f18:	09 f4       	brne	.+2      	; 0xf1c <twi_master_transfer+0x1a>
     f1a:	50 c0       	rjmp	.+160    	; 0xfbc <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     f1c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     f1e:	80 91 ed 21 	lds	r24, 0x21ED	; 0x8021ed <transfer+0x9>
     f22:	88 23       	and	r24, r24
     f24:	19 f0       	breq	.+6      	; 0xf2c <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     f26:	99 23       	and	r25, r25
     f28:	f1 f3       	breq	.-4      	; 0xf26 <twi_master_transfer+0x24>
     f2a:	4a c0       	rjmp	.+148    	; 0xfc0 <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f2c:	8f b7       	in	r24, 0x3f	; 63
     f2e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f30:	f8 94       	cli
	return flags;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     f34:	a4 ee       	ldi	r26, 0xE4	; 228
     f36:	b1 e2       	ldi	r27, 0x21	; 33
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	19 96       	adiw	r26, 0x09	; 9
     f3c:	9c 93       	st	X, r25
     f3e:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     f40:	90 e8       	ldi	r25, 0x80	; 128
     f42:	1a 96       	adiw	r26, 0x0a	; 10
     f44:	9c 93       	st	X, r25
     f46:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f48:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     f4a:	2d 93       	st	X+, r18
     f4c:	3c 93       	st	X, r19
     f4e:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	6d 93       	st	X+, r22
     f54:	7c 93       	st	X, r23
     f56:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     f58:	14 96       	adiw	r26, 0x04	; 4
     f5a:	1d 92       	st	X+, r1
     f5c:	1c 92       	st	X, r1
     f5e:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     f60:	16 96       	adiw	r26, 0x06	; 6
     f62:	1d 92       	st	X+, r1
     f64:	1c 92       	st	X, r1
     f66:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     f68:	18 96       	adiw	r26, 0x08	; 8
     f6a:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     f6c:	80 81       	ld	r24, Z
     f6e:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     f70:	64 81       	ldd	r22, Z+4	; 0x04
     f72:	75 81       	ldd	r23, Z+5	; 0x05
     f74:	67 2b       	or	r22, r23
     f76:	11 f4       	brne	.+4      	; 0xf7c <twi_master_transfer+0x7a>
     f78:	41 11       	cpse	r20, r1
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     f7c:	f9 01       	movw	r30, r18
     f7e:	86 83       	std	Z+6, r24	; 0x06
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	f9 01       	movw	r30, r18
     f86:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     f88:	e4 ee       	ldi	r30, 0xE4	; 228
     f8a:	f1 e2       	ldi	r31, 0x21	; 33
     f8c:	92 85       	ldd	r25, Z+10	; 0x0a
     f8e:	90 38       	cpi	r25, 0x80	; 128
     f90:	e9 f3       	breq	.-6      	; 0xf8c <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     f92:	f9 01       	movw	r30, r18
     f94:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     f96:	83 70       	andi	r24, 0x03	; 3
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	49 f0       	breq	.+18     	; 0xfae <twi_master_transfer+0xac>
     f9c:	a4 ee       	ldi	r26, 0xE4	; 228
     f9e:	b1 e2       	ldi	r27, 0x21	; 33
     fa0:	ed 91       	ld	r30, X+
     fa2:	fc 91       	ld	r31, X
     fa4:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     fa8:	83 70       	andi	r24, 0x03	; 3
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	c9 f7       	brne	.-14     	; 0xfa0 <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     fae:	e4 ee       	ldi	r30, 0xE4	; 228
     fb0:	f1 e2       	ldi	r31, 0x21	; 33
     fb2:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     fb4:	11 86       	std	Z+9, r1	; 0x09
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     fb8:	88 ef       	ldi	r24, 0xF8	; 248
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <twi_master_transfer+0xc0>
     fbc:	88 ef       	ldi	r24, 0xF8	; 248
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     fc0:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     fca:	fc 01       	movw	r30, r24
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	95 ff       	sbrs	r25, 5
     fd0:	fd cf       	rjmp	.-6      	; 0xfcc <usart_putchar+0x2>
     fd2:	60 83       	st	Z, r22
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	08 95       	ret

00000fda <usart_getchar>:
     fda:	fc 01       	movw	r30, r24
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	99 23       	and	r25, r25
     fe0:	ec f7       	brge	.-6      	; 0xfdc <usart_getchar+0x2>
     fe2:	80 81       	ld	r24, Z
     fe4:	08 95       	ret

00000fe6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     fe6:	4f 92       	push	r4
     fe8:	5f 92       	push	r5
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	7c 01       	movw	r14, r24
    1002:	4a 01       	movw	r8, r20
    1004:	5b 01       	movw	r10, r22
    1006:	28 01       	movw	r4, r16
    1008:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    100a:	fc 01       	movw	r30, r24
    100c:	84 81       	ldd	r24, Z+4	; 0x04
    100e:	82 ff       	sbrs	r24, 2
    1010:	16 c0       	rjmp	.+44     	; 0x103e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1012:	d9 01       	movw	r26, r18
    1014:	c8 01       	movw	r24, r16
    1016:	68 94       	set
    1018:	12 f8       	bld	r1, 2
    101a:	b6 95       	lsr	r27
    101c:	a7 95       	ror	r26
    101e:	97 95       	ror	r25
    1020:	87 95       	ror	r24
    1022:	16 94       	lsr	r1
    1024:	d1 f7       	brne	.-12     	; 0x101a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1026:	b9 01       	movw	r22, r18
    1028:	a8 01       	movw	r20, r16
    102a:	03 2e       	mov	r0, r19
    102c:	36 e1       	ldi	r19, 0x16	; 22
    102e:	76 95       	lsr	r23
    1030:	67 95       	ror	r22
    1032:	57 95       	ror	r21
    1034:	47 95       	ror	r20
    1036:	3a 95       	dec	r19
    1038:	d1 f7       	brne	.-12     	; 0x102e <usart_set_baudrate+0x48>
    103a:	30 2d       	mov	r19, r0
    103c:	15 c0       	rjmp	.+42     	; 0x1068 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    103e:	d9 01       	movw	r26, r18
    1040:	c8 01       	movw	r24, r16
    1042:	68 94       	set
    1044:	13 f8       	bld	r1, 3
    1046:	b6 95       	lsr	r27
    1048:	a7 95       	ror	r26
    104a:	97 95       	ror	r25
    104c:	87 95       	ror	r24
    104e:	16 94       	lsr	r1
    1050:	d1 f7       	brne	.-12     	; 0x1046 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1052:	b9 01       	movw	r22, r18
    1054:	a8 01       	movw	r20, r16
    1056:	03 2e       	mov	r0, r19
    1058:	37 e1       	ldi	r19, 0x17	; 23
    105a:	76 95       	lsr	r23
    105c:	67 95       	ror	r22
    105e:	57 95       	ror	r21
    1060:	47 95       	ror	r20
    1062:	3a 95       	dec	r19
    1064:	d1 f7       	brne	.-12     	; 0x105a <usart_set_baudrate+0x74>
    1066:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1068:	88 15       	cp	r24, r8
    106a:	99 05       	cpc	r25, r9
    106c:	aa 05       	cpc	r26, r10
    106e:	bb 05       	cpc	r27, r11
    1070:	08 f4       	brcc	.+2      	; 0x1074 <usart_set_baudrate+0x8e>
    1072:	a6 c0       	rjmp	.+332    	; 0x11c0 <usart_set_baudrate+0x1da>
    1074:	84 16       	cp	r8, r20
    1076:	95 06       	cpc	r9, r21
    1078:	a6 06       	cpc	r10, r22
    107a:	b7 06       	cpc	r11, r23
    107c:	08 f4       	brcc	.+2      	; 0x1080 <usart_set_baudrate+0x9a>
    107e:	a2 c0       	rjmp	.+324    	; 0x11c4 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1080:	f7 01       	movw	r30, r14
    1082:	84 81       	ldd	r24, Z+4	; 0x04
    1084:	82 fd       	sbrc	r24, 2
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <usart_set_baudrate+0xaa>
		baud *= 2;
    1088:	88 0c       	add	r8, r8
    108a:	99 1c       	adc	r9, r9
    108c:	aa 1c       	adc	r10, r10
    108e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1090:	c3 01       	movw	r24, r6
    1092:	b2 01       	movw	r22, r4
    1094:	a5 01       	movw	r20, r10
    1096:	94 01       	movw	r18, r8
    1098:	0e 94 95 2a 	call	0x552a	; 0x552a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    109c:	2f 3f       	cpi	r18, 0xFF	; 255
    109e:	31 05       	cpc	r19, r1
    10a0:	41 05       	cpc	r20, r1
    10a2:	51 05       	cpc	r21, r1
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <usart_set_baudrate+0xc2>
    10a6:	90 c0       	rjmp	.+288    	; 0x11c8 <usart_set_baudrate+0x1e2>
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	c9 ef       	ldi	r28, 0xF9	; 249
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <usart_set_baudrate+0xd8>
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	4a 07       	cpc	r20, r26
    10ba:	5b 07       	cpc	r21, r27
    10bc:	58 f0       	brcs	.+22     	; 0x10d4 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	aa 1f       	adc	r26, r26
    10c4:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    10c6:	cd 3f       	cpi	r28, 0xFD	; 253
    10c8:	0c f4       	brge	.+2      	; 0x10cc <usart_set_baudrate+0xe6>
			limit |= 1;
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    10ce:	c7 30       	cpi	r28, 0x07	; 7
    10d0:	89 f7       	brne	.-30     	; 0x10b4 <usart_set_baudrate+0xce>
    10d2:	4f c0       	rjmp	.+158    	; 0x1172 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    10d4:	cc 23       	and	r28, r28
    10d6:	0c f0       	brlt	.+2      	; 0x10da <usart_set_baudrate+0xf4>
    10d8:	4c c0       	rjmp	.+152    	; 0x1172 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    10da:	d5 01       	movw	r26, r10
    10dc:	c4 01       	movw	r24, r8
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	aa 1f       	adc	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	aa 1f       	adc	r26, r26
    10ec:	bb 1f       	adc	r27, r27
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	aa 1f       	adc	r26, r26
    10f4:	bb 1f       	adc	r27, r27
    10f6:	48 1a       	sub	r4, r24
    10f8:	59 0a       	sbc	r5, r25
    10fa:	6a 0a       	sbc	r6, r26
    10fc:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    10fe:	ce 3f       	cpi	r28, 0xFE	; 254
    1100:	f4 f4       	brge	.+60     	; 0x113e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1102:	8d ef       	ldi	r24, 0xFD	; 253
    1104:	9f ef       	ldi	r25, 0xFF	; 255
    1106:	8c 1b       	sub	r24, r28
    1108:	91 09       	sbc	r25, r1
    110a:	c7 fd       	sbrc	r28, 7
    110c:	93 95       	inc	r25
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <usart_set_baudrate+0x132>
    1110:	44 0c       	add	r4, r4
    1112:	55 1c       	adc	r5, r5
    1114:	66 1c       	adc	r6, r6
    1116:	77 1c       	adc	r7, r7
    1118:	8a 95       	dec	r24
    111a:	d2 f7       	brpl	.-12     	; 0x1110 <usart_set_baudrate+0x12a>
    111c:	d5 01       	movw	r26, r10
    111e:	c4 01       	movw	r24, r8
    1120:	b6 95       	lsr	r27
    1122:	a7 95       	ror	r26
    1124:	97 95       	ror	r25
    1126:	87 95       	ror	r24
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	64 0d       	add	r22, r4
    112e:	75 1d       	adc	r23, r5
    1130:	86 1d       	adc	r24, r6
    1132:	97 1d       	adc	r25, r7
    1134:	a5 01       	movw	r20, r10
    1136:	94 01       	movw	r18, r8
    1138:	0e 94 95 2a 	call	0x552a	; 0x552a <__udivmodsi4>
    113c:	37 c0       	rjmp	.+110    	; 0x11ac <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	8c 0f       	add	r24, r28
    1142:	a5 01       	movw	r20, r10
    1144:	94 01       	movw	r18, r8
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <usart_set_baudrate+0x16a>
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	8a 95       	dec	r24
    1152:	d2 f7       	brpl	.-12     	; 0x1148 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1154:	da 01       	movw	r26, r20
    1156:	c9 01       	movw	r24, r18
    1158:	b6 95       	lsr	r27
    115a:	a7 95       	ror	r26
    115c:	97 95       	ror	r25
    115e:	87 95       	ror	r24
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	64 0d       	add	r22, r4
    1166:	75 1d       	adc	r23, r5
    1168:	86 1d       	adc	r24, r6
    116a:	97 1d       	adc	r25, r7
    116c:	0e 94 95 2a 	call	0x552a	; 0x552a <__udivmodsi4>
    1170:	1d c0       	rjmp	.+58     	; 0x11ac <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	8c 0f       	add	r24, r28
    1176:	a5 01       	movw	r20, r10
    1178:	94 01       	movw	r18, r8
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <usart_set_baudrate+0x19e>
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	44 1f       	adc	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	8a 95       	dec	r24
    1186:	d2 f7       	brpl	.-12     	; 0x117c <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1188:	da 01       	movw	r26, r20
    118a:	c9 01       	movw	r24, r18
    118c:	b6 95       	lsr	r27
    118e:	a7 95       	ror	r26
    1190:	97 95       	ror	r25
    1192:	87 95       	ror	r24
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	64 0d       	add	r22, r4
    119a:	75 1d       	adc	r23, r5
    119c:	86 1d       	adc	r24, r6
    119e:	97 1d       	adc	r25, r7
    11a0:	0e 94 95 2a 	call	0x552a	; 0x552a <__udivmodsi4>
    11a4:	21 50       	subi	r18, 0x01	; 1
    11a6:	31 09       	sbc	r19, r1
    11a8:	41 09       	sbc	r20, r1
    11aa:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11ac:	83 2f       	mov	r24, r19
    11ae:	8f 70       	andi	r24, 0x0F	; 15
    11b0:	c2 95       	swap	r28
    11b2:	c0 7f       	andi	r28, 0xF0	; 240
    11b4:	c8 2b       	or	r28, r24
    11b6:	f7 01       	movw	r30, r14
    11b8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    11ba:	26 83       	std	Z+6, r18	; 0x06

	return true;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	18 c0       	rjmp	.+48     	; 0x11f0 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <usart_set_baudrate+0x20a>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    11c8:	d5 01       	movw	r26, r10
    11ca:	c4 01       	movw	r24, r8
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	aa 1f       	adc	r26, r26
    11da:	bb 1f       	adc	r27, r27
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	aa 1f       	adc	r26, r26
    11e2:	bb 1f       	adc	r27, r27
    11e4:	48 1a       	sub	r4, r24
    11e6:	59 0a       	sbc	r5, r25
    11e8:	6a 0a       	sbc	r6, r26
    11ea:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    11ec:	c9 ef       	ldi	r28, 0xF9	; 249
    11ee:	89 cf       	rjmp	.-238    	; 0x1102 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	9f 90       	pop	r9
    1200:	8f 90       	pop	r8
    1202:	7f 90       	pop	r7
    1204:	6f 90       	pop	r6
    1206:	5f 90       	pop	r5
    1208:	4f 90       	pop	r4
    120a:	08 95       	ret

0000120c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	09 f4       	brne	.+2      	; 0x121e <usart_init_rs232+0x12>
    121c:	cc c0       	rjmp	.+408    	; 0x13b6 <usart_init_rs232+0x1aa>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    121e:	80 3c       	cpi	r24, 0xC0	; 192
    1220:	91 05       	cpc	r25, r1
    1222:	21 f4       	brne	.+8      	; 0x122c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1224:	60 e1       	ldi	r22, 0x10	; 16
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	4d d8       	rcall	.-3942   	; 0x2c4 <sysclk_enable_module>
    122a:	c5 c0       	rjmp	.+394    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    122c:	c1 15       	cp	r28, r1
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	d8 07       	cpc	r29, r24
    1232:	21 f4       	brne	.+8      	; 0x123c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1234:	64 e0       	ldi	r22, 0x04	; 4
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	45 d8       	rcall	.-3958   	; 0x2c4 <sysclk_enable_module>
    123a:	bd c0       	rjmp	.+378    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    123c:	c0 38       	cpi	r28, 0x80	; 128
    123e:	e1 e0       	ldi	r30, 0x01	; 1
    1240:	de 07       	cpc	r29, r30
    1242:	21 f4       	brne	.+8      	; 0x124c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1244:	62 e0       	ldi	r22, 0x02	; 2
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	3d d8       	rcall	.-3974   	; 0x2c4 <sysclk_enable_module>
    124a:	b5 c0       	rjmp	.+362    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    124c:	c1 15       	cp	r28, r1
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1252:	21 f4       	brne	.+8      	; 0x125c <usart_init_rs232+0x50>
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	35 d8       	rcall	.-3990   	; 0x2c4 <sysclk_enable_module>
    125a:	ad c0       	rjmp	.+346    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    125c:	c0 38       	cpi	r28, 0x80	; 128
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1262:	21 f4       	brne	.+8      	; 0x126c <usart_init_rs232+0x60>
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	2d d8       	rcall	.-4006   	; 0x2c4 <sysclk_enable_module>
    126a:	a5 c0       	rjmp	.+330    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    126c:	c1 15       	cp	r28, r1
    126e:	e2 e0       	ldi	r30, 0x02	; 2
    1270:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1272:	21 f4       	brne	.+8      	; 0x127c <usart_init_rs232+0x70>
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	25 d8       	rcall	.-4022   	; 0x2c4 <sysclk_enable_module>
    127a:	9d c0       	rjmp	.+314    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    127c:	c0 32       	cpi	r28, 0x20	; 32
    127e:	f3 e0       	ldi	r31, 0x03	; 3
    1280:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1282:	21 f4       	brne	.+8      	; 0x128c <usart_init_rs232+0x80>
    1284:	64 e0       	ldi	r22, 0x04	; 4
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	1d d8       	rcall	.-4038   	; 0x2c4 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    128a:	95 c0       	rjmp	.+298    	; 0x13b6 <usart_init_rs232+0x1aa>
    128c:	c1 15       	cp	r28, r1
    128e:	88 e0       	ldi	r24, 0x08	; 8
    1290:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1292:	21 f4       	brne	.+8      	; 0x129c <usart_init_rs232+0x90>
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	15 d8       	rcall	.-4054   	; 0x2c4 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    129a:	8d c0       	rjmp	.+282    	; 0x13b6 <usart_init_rs232+0x1aa>
    129c:	c1 15       	cp	r28, r1
    129e:	e9 e0       	ldi	r30, 0x09	; 9
    12a0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    12a2:	21 f4       	brne	.+8      	; 0x12ac <usart_init_rs232+0xa0>
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	0d d8       	rcall	.-4070   	; 0x2c4 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    12aa:	85 c0       	rjmp	.+266    	; 0x13b6 <usart_init_rs232+0x1aa>
    12ac:	c1 15       	cp	r28, r1
    12ae:	fa e0       	ldi	r31, 0x0A	; 10
    12b0:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    12b2:	21 f4       	brne	.+8      	; 0x12bc <usart_init_rs232+0xb0>
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	85 e0       	ldi	r24, 0x05	; 5
    12b8:	05 d8       	rcall	.-4086   	; 0x2c4 <sysclk_enable_module>
    12ba:	7d c0       	rjmp	.+250    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    12bc:	c0 34       	cpi	r28, 0x40	; 64
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	d8 07       	cpc	r29, r24
    12c2:	29 f4       	brne	.+10     	; 0x12ce <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12cc:	74 c0       	rjmp	.+232    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    12ce:	c0 34       	cpi	r28, 0x40	; 64
    12d0:	e9 e0       	ldi	r30, 0x09	; 9
    12d2:	de 07       	cpc	r29, r30
    12d4:	29 f4       	brne	.+10     	; 0x12e0 <usart_init_rs232+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    12d6:	62 e0       	ldi	r22, 0x02	; 2
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12de:	6b c0       	rjmp	.+214    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    12e0:	c0 39       	cpi	r28, 0x90	; 144
    12e2:	f8 e0       	ldi	r31, 0x08	; 8
    12e4:	df 07       	cpc	r29, r31
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <usart_init_rs232+0xe6>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    12e8:	64 e0       	ldi	r22, 0x04	; 4
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    12f0:	62 c0       	rjmp	.+196    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    12f2:	c0 39       	cpi	r28, 0x90	; 144
    12f4:	89 e0       	ldi	r24, 0x09	; 9
    12f6:	d8 07       	cpc	r29, r24
    12f8:	29 f4       	brne	.+10     	; 0x1304 <usart_init_rs232+0xf8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    12fa:	64 e0       	ldi	r22, 0x04	; 4
    12fc:	84 e0       	ldi	r24, 0x04	; 4
    12fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1302:	59 c0       	rjmp	.+178    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1304:	c0 39       	cpi	r28, 0x90	; 144
    1306:	ea e0       	ldi	r30, 0x0A	; 10
    1308:	de 07       	cpc	r29, r30
    130a:	29 f4       	brne	.+10     	; 0x1316 <usart_init_rs232+0x10a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	85 e0       	ldi	r24, 0x05	; 5
    1310:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1314:	50 c0       	rjmp	.+160    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1316:	c0 3c       	cpi	r28, 0xC0	; 192
    1318:	f8 e0       	ldi	r31, 0x08	; 8
    131a:	df 07       	cpc	r29, r31
    131c:	29 f4       	brne	.+10     	; 0x1328 <usart_init_rs232+0x11c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    131e:	68 e0       	ldi	r22, 0x08	; 8
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1326:	47 c0       	rjmp	.+142    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1328:	c0 3c       	cpi	r28, 0xC0	; 192
    132a:	89 e0       	ldi	r24, 0x09	; 9
    132c:	d8 07       	cpc	r29, r24
    132e:	29 f4       	brne	.+10     	; 0x133a <usart_init_rs232+0x12e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1330:	68 e0       	ldi	r22, 0x08	; 8
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1338:	3e c0       	rjmp	.+124    	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    133a:	c0 3a       	cpi	r28, 0xA0	; 160
    133c:	e8 e0       	ldi	r30, 0x08	; 8
    133e:	de 07       	cpc	r29, r30
    1340:	29 f4       	brne	.+10     	; 0x134c <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1342:	60 e1       	ldi	r22, 0x10	; 16
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    134a:	35 c0       	rjmp	.+106    	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    134c:	c0 3a       	cpi	r28, 0xA0	; 160
    134e:	f9 e0       	ldi	r31, 0x09	; 9
    1350:	df 07       	cpc	r29, r31
    1352:	29 f4       	brne	.+10     	; 0x135e <usart_init_rs232+0x152>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1354:	60 e1       	ldi	r22, 0x10	; 16
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    135c:	2c c0       	rjmp	.+88     	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    135e:	c0 3a       	cpi	r28, 0xA0	; 160
    1360:	8a e0       	ldi	r24, 0x0A	; 10
    1362:	d8 07       	cpc	r29, r24
    1364:	29 f4       	brne	.+10     	; 0x1370 <usart_init_rs232+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1366:	60 e1       	ldi	r22, 0x10	; 16
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    136e:	23 c0       	rjmp	.+70     	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1370:	c0 3b       	cpi	r28, 0xB0	; 176
    1372:	e8 e0       	ldi	r30, 0x08	; 8
    1374:	de 07       	cpc	r29, r30
    1376:	29 f4       	brne	.+10     	; 0x1382 <usart_init_rs232+0x176>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1378:	60 e2       	ldi	r22, 0x20	; 32
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1380:	1a c0       	rjmp	.+52     	; 0x13b6 <usart_init_rs232+0x1aa>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1382:	c0 3b       	cpi	r28, 0xB0	; 176
    1384:	f9 e0       	ldi	r31, 0x09	; 9
    1386:	df 07       	cpc	r29, r31
    1388:	29 f4       	brne	.+10     	; 0x1394 <usart_init_rs232+0x188>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    138a:	60 e2       	ldi	r22, 0x20	; 32
    138c:	84 e0       	ldi	r24, 0x04	; 4
    138e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1394:	c0 38       	cpi	r28, 0x80	; 128
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	d8 07       	cpc	r29, r24
    139a:	29 f4       	brne	.+10     	; 0x13a6 <usart_init_rs232+0x19a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    139c:	60 e4       	ldi	r22, 0x40	; 64
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <usart_init_rs232+0x1aa>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    13a6:	c0 3a       	cpi	r28, 0xA0	; 160
    13a8:	e4 e0       	ldi	r30, 0x04	; 4
    13aa:	de 07       	cpc	r29, r30
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <usart_init_rs232+0x1aa>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    13ae:	60 e4       	ldi	r22, 0x40	; 64
    13b0:	85 e0       	ldi	r24, 0x05	; 5
    13b2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	8f 73       	andi	r24, 0x3F	; 63
    13ba:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    13bc:	f8 01       	movw	r30, r16
    13be:	95 81       	ldd	r25, Z+5	; 0x05
    13c0:	84 81       	ldd	r24, Z+4	; 0x04
    13c2:	89 2b       	or	r24, r25
    13c4:	96 81       	ldd	r25, Z+6	; 0x06
    13c6:	91 11       	cpse	r25, r1
    13c8:	98 e0       	ldi	r25, 0x08	; 8
    13ca:	89 2b       	or	r24, r25
    13cc:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    13ce:	f8 01       	movw	r30, r16
    13d0:	40 81       	ld	r20, Z
    13d2:	51 81       	ldd	r21, Z+1	; 0x01
    13d4:	62 81       	ldd	r22, Z+2	; 0x02
    13d6:	73 81       	ldd	r23, Z+3	; 0x03
    13d8:	00 e8       	ldi	r16, 0x80	; 128
    13da:	14 e8       	ldi	r17, 0x84	; 132
    13dc:	2e e1       	ldi	r18, 0x1E	; 30
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	ce 01       	movw	r24, r28
    13e2:	01 de       	rcall	.-1022   	; 0xfe6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	98 60       	ori	r25, 0x08	; 8
    13e8:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	90 61       	ori	r25, 0x10	; 16
    13ee:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret

000013fa <adc_init>:

#include <asf.h>
#include "adc.h"

void adc_init(void)
{
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
	ADCA.CTRLA = 0x01; // enable the ADC
    1404:	c0 e0       	ldi	r28, 0x00	; 0
    1406:	d2 e0       	ldi	r29, 0x02	; 2
    1408:	ff 24       	eor	r15, r15
    140a:	f3 94       	inc	r15
    140c:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;; // signed 12 bit mode
    140e:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
    1410:	80 e1       	ldi	r24, 0x10	; 16
    1412:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0x05; // prescaler of DIV128 on the clock
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1418:	61 e2       	ldi	r22, 0x21	; 33
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	4b d8       	rcall	.-3946   	; 0x4b6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1420:	08 2f       	mov	r16, r24
    1422:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1424:	10 2f       	mov	r17, r16
    1426:	00 27       	eor	r16, r16
    1428:	60 e2       	ldi	r22, 0x20	; 32
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	43 d8       	rcall	.-3962   	; 0x4b6 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    1430:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
    1432:	0c 87       	std	Y+12, r16	; 0x0c
    1434:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0x01; // single ended input
    1436:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00001000; // pin 1
    1438:	88 e0       	ldi	r24, 0x08	; 8
    143a:	89 a3       	std	Y+33, r24	; 0x21
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	08 95       	ret

00001448 <adc_set_pin>:

void adc_set_pin(uint8_t pin)
{
	if (pin==1){
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	21 f4       	brne	.+8      	; 0x1454 <adc_set_pin+0xc>
		ADCA.CH0.MUXCTRL = 0b00001000; // pin 1
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    1452:	08 95       	ret
	}else if(pin==2){
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	21 f4       	brne	.+8      	; 0x1460 <adc_set_pin+0x18>
		ADCA.CH0.MUXCTRL = 0b00010000; // pin 2
    1458:	80 e1       	ldi	r24, 0x10	; 16
    145a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    145e:	08 95       	ret
	}else if(pin==3){
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	21 f4       	brne	.+8      	; 0x146c <adc_set_pin+0x24>
		ADCA.CH0.MUXCTRL = 0b00011000; // pin 3
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    146a:	08 95       	ret
	}else{
		ADCA.CH0.MUXCTRL = 0b00100000; // pin 4
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    1472:	08 95       	ret

00001474 <adc_read>:
	}
}

int16_t adc_read(void)
{
	ADCA.CH0.CTRL |= 0x80; // start the conversion
    1474:	e0 e0       	ldi	r30, 0x00	; 0
    1476:	f2 e0       	ldi	r31, 0x02	; 2
    1478:	80 a1       	ldd	r24, Z+32	; 0x20
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS)); // wait until the conversion is done
    147e:	83 a1       	ldd	r24, Z+35	; 0x23
    1480:	88 23       	and	r24, r24
    1482:	e9 f3       	breq	.-6      	; 0x147e <adc_read+0xa>
	ADCA.CH0.INTFLAGS = 0; // Set the flag back to false
    1484:	e0 e0       	ldi	r30, 0x00	; 0
    1486:	f2 e0       	ldi	r31, 0x02	; 2
    1488:	13 a2       	std	Z+35, r1	; 0x23
	return ADCA.CH0.RES; // return the 12-bit result as a uint16_t
    148a:	84 a1       	ldd	r24, Z+36	; 0x24
    148c:	95 a1       	ldd	r25, Z+37	; 0x25
    148e:	08 95       	ret

00001490 <init_imu>:
}

bool imu_is_data_ready(void) //true or false: is data ready
{
	return (bool)is_data_rdy(); //returns true or false off of 0 or 1 checking if IMU data is ready based on the function is_data_ready
}
    1490:	44 e6       	ldi	r20, 0x64	; 100
    1492:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <init_mpu9250>
    1496:	08 95       	ret

00001498 <imu_update>:

imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
    1498:	2f 92       	push	r2
    149a:	3f 92       	push	r3
    149c:	4f 92       	push	r4
    149e:	5f 92       	push	r5
    14a0:	6f 92       	push	r6
    14a2:	7f 92       	push	r7
    14a4:	8f 92       	push	r8
    14a6:	9f 92       	push	r9
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	c1 54       	subi	r28, 0x41	; 65
    14c2:	d1 09       	sbc	r29, r1
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	1c 01       	movw	r2, r24
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <read_mpu9250>
    14d2:	85 e1       	ldi	r24, 0x15	; 21
    14d4:	fe 01       	movw	r30, r28
    14d6:	31 96       	adiw	r30, 0x01	; 1
    14d8:	a9 e2       	ldi	r26, 0x29	; 41
    14da:	b3 e2       	ldi	r27, 0x23	; 35
    14dc:	01 90       	ld	r0, Z+
    14de:	0d 92       	st	X+, r0
    14e0:	8a 95       	dec	r24
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <imu_update+0x44>
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
						mapdouble((double)data.gyro_y+(GYR_Y_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						mapdouble((double)data.gyro_z+(GYR_Z_OFF), -32768.0, 32767.0, -2000.0, 2000.0),
						(double)data.acc_x+(ACC_X_OFF), (double)data.acc_y+(ACC_Y_OFF), (double)data.acc_z+(ACC_Z_OFF),
    14e4:	09 e2       	ldi	r16, 0x29	; 41
    14e6:	13 e2       	ldi	r17, 0x23	; 35
imu_data_t imu_update(mpu9250_t imu) //returns an imu data box based on the update. IMU data box is neater
{
	data = read_mpu9250(imu); //tells the mcu to read the mpu thats located on the pins defined in the imu box and put that data into the box with a ton of little boxes
	
	//filters data
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
    14e8:	f8 01       	movw	r30, r16
    14ea:	61 81       	ldd	r22, Z+1	; 0x01
    14ec:	72 81       	ldd	r23, Z+2	; 0x02
    14ee:	07 2e       	mov	r0, r23
    14f0:	00 0c       	add	r0, r0
    14f2:	88 0b       	sbc	r24, r24
    14f4:	99 0b       	sbc	r25, r25
    14f6:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    14fa:	6b 01       	movw	r12, r22
    14fc:	7c 01       	movw	r14, r24
    14fe:	60 91 0c 20 	lds	r22, 0x200C	; 0x80200c <ACC_X_OFF>
    1502:	70 91 0d 20 	lds	r23, 0x200D	; 0x80200d <ACC_X_OFF+0x1>
    1506:	07 2e       	mov	r0, r23
    1508:	00 0c       	add	r0, r0
    150a:	88 0b       	sbc	r24, r24
    150c:	99 0b       	sbc	r25, r25
    150e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    151e:	5b 01       	movw	r10, r22
    1520:	6c 01       	movw	r12, r24
    1522:	f8 01       	movw	r30, r16
    1524:	65 85       	ldd	r22, Z+13	; 0x0d
    1526:	76 85       	ldd	r23, Z+14	; 0x0e
    1528:	07 2e       	mov	r0, r23
    152a:	00 0c       	add	r0, r0
    152c:	88 0b       	sbc	r24, r24
    152e:	99 0b       	sbc	r25, r25
    1530:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1534:	2b 01       	movw	r4, r22
    1536:	3c 01       	movw	r6, r24
    1538:	60 91 ef 21 	lds	r22, 0x21EF	; 0x8021ef <GYR_Z_OFF>
    153c:	70 91 f0 21 	lds	r23, 0x21F0	; 0x8021f0 <GYR_Z_OFF+0x1>
    1540:	07 2e       	mov	r0, r23
    1542:	00 0c       	add	r0, r0
    1544:	88 0b       	sbc	r24, r24
    1546:	99 0b       	sbc	r25, r25
    1548:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	c3 01       	movw	r24, r6
    1552:	b2 01       	movw	r22, r4
    1554:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a e7       	ldi	r20, 0x7A	; 122
    156a:	55 e4       	ldi	r21, 0x45	; 69
    156c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a ef       	ldi	r20, 0xFA	; 250
    1582:	54 e4       	ldi	r21, 0x44	; 68
    1584:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1588:	6a 8f       	std	Y+26, r22	; 0x1a
    158a:	7b 8f       	std	Y+27, r23	; 0x1b
    158c:	8c 8f       	std	Y+28, r24	; 0x1c
    158e:	9d 8f       	std	Y+29, r25	; 0x1d
    1590:	f8 01       	movw	r30, r16
    1592:	63 85       	ldd	r22, Z+11	; 0x0b
    1594:	74 85       	ldd	r23, Z+12	; 0x0c
    1596:	07 2e       	mov	r0, r23
    1598:	00 0c       	add	r0, r0
    159a:	88 0b       	sbc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    15a2:	2b 01       	movw	r4, r22
    15a4:	3c 01       	movw	r6, r24
    15a6:	60 91 f1 21 	lds	r22, 0x21F1	; 0x8021f1 <GYR_Y_OFF>
    15aa:	70 91 f2 21 	lds	r23, 0x21F2	; 0x8021f2 <GYR_Y_OFF+0x1>
    15ae:	07 2e       	mov	r0, r23
    15b0:	00 0c       	add	r0, r0
    15b2:	88 0b       	sbc	r24, r24
    15b4:	99 0b       	sbc	r25, r25
    15b6:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    15ba:	9b 01       	movw	r18, r22
    15bc:	ac 01       	movw	r20, r24
    15be:	c3 01       	movw	r24, r6
    15c0:	b2 01       	movw	r22, r4
    15c2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a e7       	ldi	r20, 0x7A	; 122
    15d8:	55 e4       	ldi	r21, 0x45	; 69
    15da:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a ef       	ldi	r20, 0xFA	; 250
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    15f6:	6e 8f       	std	Y+30, r22	; 0x1e
    15f8:	7f 8f       	std	Y+31, r23	; 0x1f
    15fa:	88 a3       	std	Y+32, r24	; 0x20
    15fc:	99 a3       	std	Y+33, r25	; 0x21
    15fe:	f8 01       	movw	r30, r16
    1600:	61 85       	ldd	r22, Z+9	; 0x09
    1602:	72 85       	ldd	r23, Z+10	; 0x0a
    1604:	07 2e       	mov	r0, r23
    1606:	00 0c       	add	r0, r0
    1608:	88 0b       	sbc	r24, r24
    160a:	99 0b       	sbc	r25, r25
    160c:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1610:	2b 01       	movw	r4, r22
    1612:	3c 01       	movw	r6, r24
    1614:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <GYR_X_OFF>
    1618:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <GYR_X_OFF+0x1>
    161c:	07 2e       	mov	r0, r23
    161e:	00 0c       	add	r0, r0
    1620:	88 0b       	sbc	r24, r24
    1622:	99 0b       	sbc	r25, r25
    1624:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	c3 01       	movw	r24, r6
    162e:	b2 01       	movw	r22, r4
    1630:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a e7       	ldi	r20, 0x7A	; 122
    1646:	55 e4       	ldi	r21, 0x45	; 69
    1648:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a ef       	ldi	r20, 0xFA	; 250
    165e:	54 e4       	ldi	r21, 0x44	; 68
    1660:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1664:	2b 01       	movw	r4, r22
    1666:	3c 01       	movw	r6, r24
    1668:	f8 01       	movw	r30, r16
    166a:	63 89       	ldd	r22, Z+19	; 0x13
    166c:	74 89       	ldd	r23, Z+20	; 0x14
    166e:	07 2e       	mov	r0, r23
    1670:	00 0c       	add	r0, r0
    1672:	88 0b       	sbc	r24, r24
    1674:	99 0b       	sbc	r25, r25
    1676:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    167a:	6e 8b       	std	Y+22, r22	; 0x16
    167c:	7f 8b       	std	Y+23, r23	; 0x17
    167e:	88 8f       	std	Y+24, r24	; 0x18
    1680:	99 8f       	std	Y+25, r25	; 0x19
    1682:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <MAG_Z_OFF>
    1686:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <MAG_Z_OFF+0x1>
    168a:	07 2e       	mov	r0, r23
    168c:	00 0c       	add	r0, r0
    168e:	88 0b       	sbc	r24, r24
    1690:	99 0b       	sbc	r25, r25
    1692:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24
    169a:	6e 89       	ldd	r22, Y+22	; 0x16
    169c:	7f 89       	ldd	r23, Y+23	; 0x17
    169e:	88 8d       	ldd	r24, Y+24	; 0x18
    16a0:	99 8d       	ldd	r25, Y+25	; 0x19
    16a2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	b0 58       	subi	r27, 0x80	; 128
    16ac:	bf 93       	push	r27
    16ae:	af 93       	push	r26
    16b0:	9f 93       	push	r25
    16b2:	8f 93       	push	r24
    16b4:	f8 01       	movw	r30, r16
    16b6:	67 85       	ldd	r22, Z+15	; 0x0f
    16b8:	70 89       	ldd	r23, Z+16	; 0x10
    16ba:	07 2e       	mov	r0, r23
    16bc:	00 0c       	add	r0, r0
    16be:	88 0b       	sbc	r24, r24
    16c0:	99 0b       	sbc	r25, r25
    16c2:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    16c6:	6e 8b       	std	Y+22, r22	; 0x16
    16c8:	7f 8b       	std	Y+23, r23	; 0x17
    16ca:	88 8f       	std	Y+24, r24	; 0x18
    16cc:	99 8f       	std	Y+25, r25	; 0x19
    16ce:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <MAG_X_OFF>
    16d2:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <MAG_X_OFF+0x1>
    16d6:	07 2e       	mov	r0, r23
    16d8:	00 0c       	add	r0, r0
    16da:	88 0b       	sbc	r24, r24
    16dc:	99 0b       	sbc	r25, r25
    16de:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	6e 89       	ldd	r22, Y+22	; 0x16
    16e8:	7f 89       	ldd	r23, Y+23	; 0x17
    16ea:	88 8d       	ldd	r24, Y+24	; 0x18
    16ec:	99 8d       	ldd	r25, Y+25	; 0x19
    16ee:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    16f2:	9f 93       	push	r25
    16f4:	8f 93       	push	r24
    16f6:	7f 93       	push	r23
    16f8:	6f 93       	push	r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	61 89       	ldd	r22, Z+17	; 0x11
    16fe:	72 89       	ldd	r23, Z+18	; 0x12
    1700:	07 2e       	mov	r0, r23
    1702:	00 0c       	add	r0, r0
    1704:	88 0b       	sbc	r24, r24
    1706:	99 0b       	sbc	r25, r25
    1708:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    170c:	6e 8b       	std	Y+22, r22	; 0x16
    170e:	7f 8b       	std	Y+23, r23	; 0x17
    1710:	88 8f       	std	Y+24, r24	; 0x18
    1712:	99 8f       	std	Y+25, r25	; 0x19
    1714:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <MAG_Y_OFF>
    1718:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <MAG_Y_OFF+0x1>
    171c:	07 2e       	mov	r0, r23
    171e:	00 0c       	add	r0, r0
    1720:	88 0b       	sbc	r24, r24
    1722:	99 0b       	sbc	r25, r25
    1724:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1728:	9b 01       	movw	r18, r22
    172a:	ac 01       	movw	r20, r24
    172c:	6e 89       	ldd	r22, Y+22	; 0x16
    172e:	7f 89       	ldd	r23, Y+23	; 0x17
    1730:	88 8d       	ldd	r24, Y+24	; 0x18
    1732:	99 8d       	ldd	r25, Y+25	; 0x19
    1734:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1738:	9f 93       	push	r25
    173a:	8f 93       	push	r24
    173c:	7f 93       	push	r23
    173e:	6f 93       	push	r22
    1740:	f8 01       	movw	r30, r16
    1742:	65 81       	ldd	r22, Z+5	; 0x05
    1744:	76 81       	ldd	r23, Z+6	; 0x06
    1746:	07 2e       	mov	r0, r23
    1748:	00 0c       	add	r0, r0
    174a:	88 0b       	sbc	r24, r24
    174c:	99 0b       	sbc	r25, r25
    174e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1752:	6e 8b       	std	Y+22, r22	; 0x16
    1754:	7f 8b       	std	Y+23, r23	; 0x17
    1756:	88 8f       	std	Y+24, r24	; 0x18
    1758:	99 8f       	std	Y+25, r25	; 0x19
    175a:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <ACC_Z_OFF>
    175e:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <ACC_Z_OFF+0x1>
    1762:	07 2e       	mov	r0, r23
    1764:	00 0c       	add	r0, r0
    1766:	88 0b       	sbc	r24, r24
    1768:	99 0b       	sbc	r25, r25
    176a:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	6e 89       	ldd	r22, Y+22	; 0x16
    1774:	7f 89       	ldd	r23, Y+23	; 0x17
    1776:	88 8d       	ldd	r24, Y+24	; 0x18
    1778:	99 8d       	ldd	r25, Y+25	; 0x19
    177a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    177e:	9f 93       	push	r25
    1780:	8f 93       	push	r24
    1782:	7f 93       	push	r23
    1784:	6f 93       	push	r22
    1786:	f8 01       	movw	r30, r16
    1788:	63 81       	ldd	r22, Z+3	; 0x03
    178a:	74 81       	ldd	r23, Z+4	; 0x04
    178c:	07 2e       	mov	r0, r23
    178e:	00 0c       	add	r0, r0
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    1798:	6e 8b       	std	Y+22, r22	; 0x16
    179a:	7f 8b       	std	Y+23, r23	; 0x17
    179c:	88 8f       	std	Y+24, r24	; 0x18
    179e:	99 8f       	std	Y+25, r25	; 0x19
    17a0:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <ACC_Y_OFF>
    17a4:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <ACC_Y_OFF+0x1>
    17a8:	07 2e       	mov	r0, r23
    17aa:	00 0c       	add	r0, r0
    17ac:	88 0b       	sbc	r24, r24
    17ae:	99 0b       	sbc	r25, r25
    17b0:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	6e 89       	ldd	r22, Y+22	; 0x16
    17ba:	7f 89       	ldd	r23, Y+23	; 0x17
    17bc:	88 8d       	ldd	r24, Y+24	; 0x18
    17be:	99 8d       	ldd	r25, Y+25	; 0x19
    17c0:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    17c4:	9f 93       	push	r25
    17c6:	8f 93       	push	r24
    17c8:	7f 93       	push	r23
    17ca:	6f 93       	push	r22
    17cc:	ea 8c       	ldd	r14, Y+26	; 0x1a
    17ce:	fb 8c       	ldd	r15, Y+27	; 0x1b
    17d0:	0c 8d       	ldd	r16, Y+28	; 0x1c
    17d2:	1d 8d       	ldd	r17, Y+29	; 0x1d
    17d4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    17d6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    17d8:	48 a1       	ldd	r20, Y+32	; 0x20
    17da:	59 a1       	ldd	r21, Y+33	; 0x21
    17dc:	c3 01       	movw	r24, r6
    17de:	b2 01       	movw	r22, r4
    17e0:	83 d7       	rcall	.+3846   	; 0x26e8 <MahonyAHRSupdate>
						(double)data.mag_y+(MAG_Y_OFF), (double)data.mag_x+(MAG_X_OFF), -((double)data.mag_z+(MAG_Z_OFF)));

	
	//converts all the little boxes from the mpu into more digestable boxes of angles
	imu_data_t imudata;					
	imudata.yaw   = atan2(2.0 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3); //gets yaw angle in radians
    17e2:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    17e6:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    17ea:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    17ee:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    17f2:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    17f6:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    17fa:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    17fe:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1802:	c0 90 07 22 	lds	r12, 0x2207	; 0x802207 <q1>
    1806:	d0 90 08 22 	lds	r13, 0x2208	; 0x802208 <q1+0x1>
    180a:	e0 90 09 22 	lds	r14, 0x2209	; 0x802209 <q1+0x2>
    180e:	f0 90 0a 22 	lds	r15, 0x220A	; 0x80220a <q1+0x3>
    1812:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    1816:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    181a:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    181e:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
    1822:	40 90 03 22 	lds	r4, 0x2203	; 0x802203 <q2>
    1826:	50 90 04 22 	lds	r5, 0x2204	; 0x802204 <q2+0x1>
    182a:	60 90 05 22 	lds	r6, 0x2205	; 0x802205 <q2+0x2>
    182e:	70 90 06 22 	lds	r7, 0x2206	; 0x802206 <q2+0x3>
    1832:	4a 8e       	std	Y+26, r4	; 0x1a
    1834:	5b 8e       	std	Y+27, r5	; 0x1b
    1836:	6c 8e       	std	Y+28, r6	; 0x1c
    1838:	7d 8e       	std	Y+29, r7	; 0x1d
    183a:	40 90 03 22 	lds	r4, 0x2203	; 0x802203 <q2>
    183e:	50 90 04 22 	lds	r5, 0x2204	; 0x802204 <q2+0x1>
    1842:	60 90 05 22 	lds	r6, 0x2205	; 0x802205 <q2+0x2>
    1846:	70 90 06 22 	lds	r7, 0x2206	; 0x802206 <q2+0x3>
    184a:	4e 8e       	std	Y+30, r4	; 0x1e
    184c:	5f 8e       	std	Y+31, r5	; 0x1f
    184e:	68 a2       	std	Y+32, r6	; 0x20
    1850:	79 a2       	std	Y+33, r7	; 0x21
    1852:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    1856:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    185a:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    185e:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    1862:	4e 8a       	std	Y+22, r4	; 0x16
    1864:	5f 8a       	std	Y+23, r5	; 0x17
    1866:	68 8e       	std	Y+24, r6	; 0x18
    1868:	79 8e       	std	Y+25, r7	; 0x19
    186a:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    186e:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    1872:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    1876:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    187a:	4a a2       	std	Y+34, r4	; 0x22
    187c:	5b a2       	std	Y+35, r5	; 0x23
    187e:	6c a2       	std	Y+36, r6	; 0x24
    1880:	7d a2       	std	Y+37, r7	; 0x25
    1882:	40 90 07 22 	lds	r4, 0x2207	; 0x802207 <q1>
    1886:	50 90 08 22 	lds	r5, 0x2208	; 0x802208 <q1+0x1>
    188a:	60 90 09 22 	lds	r6, 0x2209	; 0x802209 <q1+0x2>
    188e:	70 90 0a 22 	lds	r7, 0x220A	; 0x80220a <q1+0x3>
    1892:	4e a2       	std	Y+38, r4	; 0x26
    1894:	5f a2       	std	Y+39, r5	; 0x27
    1896:	68 a6       	std	Y+40, r6	; 0x28
    1898:	79 a6       	std	Y+41, r7	; 0x29
    189a:	40 90 03 22 	lds	r4, 0x2203	; 0x802203 <q2>
    189e:	50 90 04 22 	lds	r5, 0x2204	; 0x802204 <q2+0x1>
    18a2:	60 90 05 22 	lds	r6, 0x2205	; 0x802205 <q2+0x2>
    18a6:	70 90 06 22 	lds	r7, 0x2206	; 0x802206 <q2+0x3>
    18aa:	4a a6       	std	Y+42, r4	; 0x2a
    18ac:	5b a6       	std	Y+43, r5	; 0x2b
    18ae:	6c a6       	std	Y+44, r6	; 0x2c
    18b0:	7d a6       	std	Y+45, r7	; 0x2d
    18b2:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
    18b6:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
    18ba:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
    18be:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
    18c2:	4e aa       	std	Y+54, r4	; 0x36
    18c4:	5f aa       	std	Y+55, r5	; 0x37
    18c6:	68 ae       	std	Y+56, r6	; 0x38
    18c8:	79 ae       	std	Y+57, r7	; 0x39
    18ca:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    18ce:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    18d2:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    18d6:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    18da:	4e a6       	std	Y+46, r4	; 0x2e
    18dc:	5f a6       	std	Y+47, r5	; 0x2f
    18de:	68 aa       	std	Y+48, r6	; 0x30
    18e0:	79 aa       	std	Y+49, r7	; 0x31
    18e2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    18e6:	2b 01       	movw	r4, r22
    18e8:	3c 01       	movw	r6, r24
    18ea:	a5 01       	movw	r20, r10
    18ec:	94 01       	movw	r18, r8
    18ee:	c7 01       	movw	r24, r14
    18f0:	b6 01       	movw	r22, r12
    18f2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	c3 01       	movw	r24, r6
    18fc:	b2 01       	movw	r22, r4
    18fe:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1902:	6b 01       	movw	r12, r22
    1904:	7c 01       	movw	r14, r24
    1906:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1908:	3f 8d       	ldd	r19, Y+31	; 0x1f
    190a:	48 a1       	ldd	r20, Y+32	; 0x20
    190c:	59 a1       	ldd	r21, Y+33	; 0x21
    190e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1910:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1912:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1914:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1916:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    191a:	9b 01       	movw	r18, r22
    191c:	ac 01       	movw	r20, r24
    191e:	c7 01       	movw	r24, r14
    1920:	b6 01       	movw	r22, r12
    1922:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1926:	6b 01       	movw	r12, r22
    1928:	7c 01       	movw	r14, r24
    192a:	2a a1       	ldd	r18, Y+34	; 0x22
    192c:	3b a1       	ldd	r19, Y+35	; 0x23
    192e:	4c a1       	ldd	r20, Y+36	; 0x24
    1930:	5d a1       	ldd	r21, Y+37	; 0x25
    1932:	6e 89       	ldd	r22, Y+22	; 0x16
    1934:	7f 89       	ldd	r23, Y+23	; 0x17
    1936:	88 8d       	ldd	r24, Y+24	; 0x18
    1938:	99 8d       	ldd	r25, Y+25	; 0x19
    193a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    193e:	9b 01       	movw	r18, r22
    1940:	ac 01       	movw	r20, r24
    1942:	c7 01       	movw	r24, r14
    1944:	b6 01       	movw	r22, r12
    1946:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    194a:	6b 01       	movw	r12, r22
    194c:	7c 01       	movw	r14, r24
    194e:	2a a5       	ldd	r18, Y+42	; 0x2a
    1950:	3b a5       	ldd	r19, Y+43	; 0x2b
    1952:	4c a5       	ldd	r20, Y+44	; 0x2c
    1954:	5d a5       	ldd	r21, Y+45	; 0x2d
    1956:	6e a1       	ldd	r22, Y+38	; 0x26
    1958:	7f a1       	ldd	r23, Y+39	; 0x27
    195a:	88 a5       	ldd	r24, Y+40	; 0x28
    195c:	99 a5       	ldd	r25, Y+41	; 0x29
    195e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1962:	4b 01       	movw	r8, r22
    1964:	5c 01       	movw	r10, r24
    1966:	2e a5       	ldd	r18, Y+46	; 0x2e
    1968:	3f a5       	ldd	r19, Y+47	; 0x2f
    196a:	48 a9       	ldd	r20, Y+48	; 0x30
    196c:	59 a9       	ldd	r21, Y+49	; 0x31
    196e:	6e a9       	ldd	r22, Y+54	; 0x36
    1970:	7f a9       	ldd	r23, Y+55	; 0x37
    1972:	88 ad       	ldd	r24, Y+56	; 0x38
    1974:	99 ad       	ldd	r25, Y+57	; 0x39
    1976:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	c5 01       	movw	r24, r10
    1980:	b4 01       	movw	r22, r8
    1982:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    198e:	a7 01       	movw	r20, r14
    1990:	96 01       	movw	r18, r12
    1992:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <atan2>
    1996:	6a 8f       	std	Y+26, r22	; 0x1a
    1998:	7b 8f       	std	Y+27, r23	; 0x1b
    199a:	8c 8f       	std	Y+28, r24	; 0x1c
    199c:	9d 8f       	std	Y+29, r25	; 0x1d
	imudata.pitch = -asin(2.0 * (q1 * q3 - q0 * q2)); //gets pitch angle in radians MAY NOT CARE ABOUT
    199e:	60 91 07 22 	lds	r22, 0x2207	; 0x802207 <q1>
    19a2:	70 91 08 22 	lds	r23, 0x2208	; 0x802208 <q1+0x1>
    19a6:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <q1+0x2>
    19aa:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <q1+0x3>
    19ae:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    19b2:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    19b6:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    19ba:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    19be:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
    19c2:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
    19c6:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
    19ca:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
    19ce:	40 90 03 22 	lds	r4, 0x2203	; 0x802203 <q2>
    19d2:	50 90 04 22 	lds	r5, 0x2204	; 0x802204 <q2+0x1>
    19d6:	60 90 05 22 	lds	r6, 0x2205	; 0x802205 <q2+0x2>
    19da:	70 90 06 22 	lds	r7, 0x2206	; 0x802206 <q2+0x3>
    19de:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    19e2:	6b 01       	movw	r12, r22
    19e4:	7c 01       	movw	r14, r24
    19e6:	a3 01       	movw	r20, r6
    19e8:	92 01       	movw	r18, r4
    19ea:	c5 01       	movw	r24, r10
    19ec:	b4 01       	movw	r22, r8
    19ee:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	c7 01       	movw	r24, r14
    19f8:	b6 01       	movw	r22, r12
    19fa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1a06:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <asin>
    1a0a:	6e 8f       	std	Y+30, r22	; 0x1e
    1a0c:	7f 8f       	std	Y+31, r23	; 0x1f
    1a0e:	88 a3       	std	Y+32, r24	; 0x20
    1a10:	99 a3       	std	Y+33, r25	; 0x21
	imudata.roll  = atan2(2.0 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3); //gets roll angle in radians
    1a12:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1a16:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1a1a:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1a1e:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1a22:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1a26:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1a2a:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1a2e:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1a32:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    1a36:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    1a3a:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    1a3e:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
    1a42:	40 90 07 22 	lds	r4, 0x2207	; 0x802207 <q1>
    1a46:	50 90 08 22 	lds	r5, 0x2208	; 0x802208 <q1+0x1>
    1a4a:	60 90 09 22 	lds	r6, 0x2209	; 0x802209 <q1+0x2>
    1a4e:	70 90 0a 22 	lds	r7, 0x220A	; 0x80220a <q1+0x3>
    1a52:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    1a56:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    1a5a:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    1a5e:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    1a62:	ee 8a       	std	Y+22, r14	; 0x16
    1a64:	ff 8a       	std	Y+23, r15	; 0x17
    1a66:	08 8f       	std	Y+24, r16	; 0x18
    1a68:	19 8f       	std	Y+25, r17	; 0x19
    1a6a:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    1a6e:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    1a72:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    1a76:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    1a7a:	ea a2       	std	Y+34, r14	; 0x22
    1a7c:	fb a2       	std	Y+35, r15	; 0x23
    1a7e:	0c a3       	std	Y+36, r16	; 0x24
    1a80:	1d a3       	std	Y+37, r17	; 0x25
    1a82:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    1a86:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    1a8a:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    1a8e:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    1a92:	ee a2       	std	Y+38, r14	; 0x26
    1a94:	ff a2       	std	Y+39, r15	; 0x27
    1a96:	08 a7       	std	Y+40, r16	; 0x28
    1a98:	19 a7       	std	Y+41, r17	; 0x29
    1a9a:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    1a9e:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    1aa2:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    1aa6:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    1aaa:	ea a6       	std	Y+42, r14	; 0x2a
    1aac:	fb a6       	std	Y+43, r15	; 0x2b
    1aae:	0c a7       	std	Y+44, r16	; 0x2c
    1ab0:	1d a7       	std	Y+45, r17	; 0x2d
    1ab2:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    1ab6:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    1aba:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    1abe:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    1ac2:	ee a6       	std	Y+46, r14	; 0x2e
    1ac4:	ff a6       	std	Y+47, r15	; 0x2f
    1ac6:	08 ab       	std	Y+48, r16	; 0x30
    1ac8:	19 ab       	std	Y+49, r17	; 0x31
    1aca:	e0 90 07 22 	lds	r14, 0x2207	; 0x802207 <q1>
    1ace:	f0 90 08 22 	lds	r15, 0x2208	; 0x802208 <q1+0x1>
    1ad2:	00 91 09 22 	lds	r16, 0x2209	; 0x802209 <q1+0x2>
    1ad6:	10 91 0a 22 	lds	r17, 0x220A	; 0x80220a <q1+0x3>
    1ada:	ea aa       	std	Y+50, r14	; 0x32
    1adc:	fb aa       	std	Y+51, r15	; 0x33
    1ade:	0c ab       	std	Y+52, r16	; 0x34
    1ae0:	1d ab       	std	Y+53, r17	; 0x35
    1ae2:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    1ae6:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    1aea:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    1aee:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    1af2:	22 96       	adiw	r28, 0x02	; 2
    1af4:	ec ae       	std	Y+60, r14	; 0x3c
    1af6:	fd ae       	std	Y+61, r15	; 0x3d
    1af8:	0e af       	std	Y+62, r16	; 0x3e
    1afa:	1f af       	std	Y+63, r17	; 0x3f
    1afc:	22 97       	sbiw	r28, 0x02	; 2
    1afe:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    1b02:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    1b06:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    1b0a:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    1b0e:	ee aa       	std	Y+54, r14	; 0x36
    1b10:	ff aa       	std	Y+55, r15	; 0x37
    1b12:	08 af       	std	Y+56, r16	; 0x38
    1b14:	19 af       	std	Y+57, r17	; 0x39
    1b16:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1b1a:	6b 01       	movw	r12, r22
    1b1c:	7c 01       	movw	r14, r24
    1b1e:	a3 01       	movw	r20, r6
    1b20:	92 01       	movw	r18, r4
    1b22:	c5 01       	movw	r24, r10
    1b24:	b4 01       	movw	r22, r8
    1b26:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1b2a:	9b 01       	movw	r18, r22
    1b2c:	ac 01       	movw	r20, r24
    1b2e:	c7 01       	movw	r24, r14
    1b30:	b6 01       	movw	r22, r12
    1b32:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1b36:	4b 01       	movw	r8, r22
    1b38:	5c 01       	movw	r10, r24
    1b3a:	2a a1       	ldd	r18, Y+34	; 0x22
    1b3c:	3b a1       	ldd	r19, Y+35	; 0x23
    1b3e:	4c a1       	ldd	r20, Y+36	; 0x24
    1b40:	5d a1       	ldd	r21, Y+37	; 0x25
    1b42:	6e 89       	ldd	r22, Y+22	; 0x16
    1b44:	7f 89       	ldd	r23, Y+23	; 0x17
    1b46:	88 8d       	ldd	r24, Y+24	; 0x18
    1b48:	99 8d       	ldd	r25, Y+25	; 0x19
    1b4a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	c5 01       	movw	r24, r10
    1b54:	b4 01       	movw	r22, r8
    1b56:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1b5a:	4b 01       	movw	r8, r22
    1b5c:	5c 01       	movw	r10, r24
    1b5e:	2a a5       	ldd	r18, Y+42	; 0x2a
    1b60:	3b a5       	ldd	r19, Y+43	; 0x2b
    1b62:	4c a5       	ldd	r20, Y+44	; 0x2c
    1b64:	5d a5       	ldd	r21, Y+45	; 0x2d
    1b66:	6e a1       	ldd	r22, Y+38	; 0x26
    1b68:	7f a1       	ldd	r23, Y+39	; 0x27
    1b6a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b6c:	99 a5       	ldd	r25, Y+41	; 0x29
    1b6e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1b72:	9b 01       	movw	r18, r22
    1b74:	ac 01       	movw	r20, r24
    1b76:	c5 01       	movw	r24, r10
    1b78:	b4 01       	movw	r22, r8
    1b7a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1b7e:	2b 01       	movw	r4, r22
    1b80:	3c 01       	movw	r6, r24
    1b82:	2a a9       	ldd	r18, Y+50	; 0x32
    1b84:	3b a9       	ldd	r19, Y+51	; 0x33
    1b86:	4c a9       	ldd	r20, Y+52	; 0x34
    1b88:	5d a9       	ldd	r21, Y+53	; 0x35
    1b8a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b8c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b8e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b90:	99 a9       	ldd	r25, Y+49	; 0x31
    1b92:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1b96:	4b 01       	movw	r8, r22
    1b98:	5c 01       	movw	r10, r24
    1b9a:	2e a9       	ldd	r18, Y+54	; 0x36
    1b9c:	3f a9       	ldd	r19, Y+55	; 0x37
    1b9e:	48 ad       	ldd	r20, Y+56	; 0x38
    1ba0:	59 ad       	ldd	r21, Y+57	; 0x39
    1ba2:	22 96       	adiw	r28, 0x02	; 2
    1ba4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ba6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ba8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1baa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bac:	22 97       	sbiw	r28, 0x02	; 2
    1bae:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	c5 01       	movw	r24, r10
    1bb8:	b4 01       	movw	r22, r8
    1bba:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1bc6:	a3 01       	movw	r20, r6
    1bc8:	92 01       	movw	r18, r4
    1bca:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <atan2>
    1bce:	6b 01       	movw	r12, r22
    1bd0:	7c 01       	movw	r14, r24
	imudata.pitch *= 180.0 / PI; //converts pitch angle to degrees
	imudata.yaw   *= 180.0 / PI; //converts yaw angle to degrees	
	imudata.roll  *= 180.0 / PI;  //converts roll to degrees
	imudata.data = data;
    1bd2:	85 e1       	ldi	r24, 0x15	; 21
    1bd4:	e9 e2       	ldi	r30, 0x29	; 41
    1bd6:	f3 e2       	ldi	r31, 0x23	; 35
    1bd8:	d1 01       	movw	r26, r2
    1bda:	1c 96       	adiw	r26, 0x0c	; 12
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0d 92       	st	X+, r0
    1be0:	8a 95       	dec	r24
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <imu_update+0x744>
	
	return imudata;
    1be4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1be6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1be8:	88 a1       	ldd	r24, Y+32	; 0x20
    1bea:	99 a1       	ldd	r25, Y+33	; 0x21
    1bec:	90 58       	subi	r25, 0x80	; 128
    1bee:	2d ee       	ldi	r18, 0xED	; 237
    1bf0:	3e e2       	ldi	r19, 0x2E	; 46
    1bf2:	45 e6       	ldi	r20, 0x65	; 101
    1bf4:	52 e4       	ldi	r21, 0x42	; 66
    1bf6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1bfa:	f1 01       	movw	r30, r2
    1bfc:	60 83       	st	Z, r22
    1bfe:	71 83       	std	Z+1, r23	; 0x01
    1c00:	82 83       	std	Z+2, r24	; 0x02
    1c02:	93 83       	std	Z+3, r25	; 0x03
    1c04:	2d ee       	ldi	r18, 0xED	; 237
    1c06:	3e e2       	ldi	r19, 0x2E	; 46
    1c08:	45 e6       	ldi	r20, 0x65	; 101
    1c0a:	52 e4       	ldi	r21, 0x42	; 66
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	b6 01       	movw	r22, r12
    1c10:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1c14:	f1 01       	movw	r30, r2
    1c16:	64 83       	std	Z+4, r22	; 0x04
    1c18:	75 83       	std	Z+5, r23	; 0x05
    1c1a:	86 83       	std	Z+6, r24	; 0x06
    1c1c:	97 83       	std	Z+7, r25	; 0x07
    1c1e:	2d ee       	ldi	r18, 0xED	; 237
    1c20:	3e e2       	ldi	r19, 0x2E	; 46
    1c22:	45 e6       	ldi	r20, 0x65	; 101
    1c24:	52 e4       	ldi	r21, 0x42	; 66
    1c26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c2e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1c32:	f1 01       	movw	r30, r2
    1c34:	60 87       	std	Z+8, r22	; 0x08
    1c36:	71 87       	std	Z+9, r23	; 0x09
    1c38:	82 87       	std	Z+10, r24	; 0x0a
    1c3a:	93 87       	std	Z+11, r25	; 0x0b
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	de bf       	out	0x3e, r29	; 62
}
    1c40:	c1 01       	movw	r24, r2
    1c42:	cf 5b       	subi	r28, 0xBF	; 191
    1c44:	df 4f       	sbci	r29, 0xFF	; 255
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	7f 90       	pop	r7
    1c64:	6f 90       	pop	r6
    1c66:	5f 90       	pop	r5
    1c68:	4f 90       	pop	r4
    1c6a:	3f 90       	pop	r3
    1c6c:	2f 90       	pop	r2
    1c6e:	08 95       	ret

00001c70 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

double invSqrt(double x) {
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
	double halfx = 0.5 * x;
	double y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(double*)&i;
    1c7c:	8b 01       	movw	r16, r22
    1c7e:	9c 01       	movw	r18, r24
    1c80:	35 95       	asr	r19
    1c82:	27 95       	ror	r18
    1c84:	17 95       	ror	r17
    1c86:	07 95       	ror	r16
    1c88:	0f 2e       	mov	r0, r31
    1c8a:	ff ed       	ldi	r31, 0xDF	; 223
    1c8c:	cf 2e       	mov	r12, r31
    1c8e:	f9 e5       	ldi	r31, 0x59	; 89
    1c90:	df 2e       	mov	r13, r31
    1c92:	f7 e3       	ldi	r31, 0x37	; 55
    1c94:	ef 2e       	mov	r14, r31
    1c96:	ff e5       	ldi	r31, 0x5F	; 95
    1c98:	ff 2e       	mov	r15, r31
    1c9a:	f0 2d       	mov	r31, r0
    1c9c:	c0 1a       	sub	r12, r16
    1c9e:	d1 0a       	sbc	r13, r17
    1ca0:	e2 0a       	sbc	r14, r18
    1ca2:	f3 0a       	sbc	r15, r19
	y = y * (1.5 - (halfx * y * y));
	return y;
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1cb0:	a7 01       	movw	r20, r14
    1cb2:	96 01       	movw	r18, r12
    1cb4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1cb8:	a7 01       	movw	r20, r14
    1cba:	96 01       	movw	r18, r12
    1cbc:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1cc0:	9b 01       	movw	r18, r22
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	80 ec       	ldi	r24, 0xC0	; 192
    1cca:	9f e3       	ldi	r25, 0x3F	; 63
    1ccc:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1cd0:	a7 01       	movw	r20, r14
    1cd2:	96 01       	movw	r18, r12
    1cd4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
}
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	08 95       	ret

00001ce6 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	a4 97       	sbiw	r28, 0x24	; 36
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	69 87       	std	Y+9, r22	; 0x09
    1d12:	7a 87       	std	Y+10, r23	; 0x0a
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	2d 87       	std	Y+13, r18	; 0x0d
    1d1a:	3e 87       	std	Y+14, r19	; 0x0e
    1d1c:	4f 87       	std	Y+15, r20	; 0x0f
    1d1e:	58 8b       	std	Y+16, r21	; 0x10
    1d20:	e9 8a       	std	Y+17, r14	; 0x11
    1d22:	fa 8a       	std	Y+18, r15	; 0x12
    1d24:	0b 8b       	std	Y+19, r16	; 0x13
    1d26:	1c 8b       	std	Y+20, r17	; 0x14
	double halfvx, halfvy, halfvz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	c6 01       	movw	r24, r12
    1d30:	b5 01       	movw	r22, r10
    1d32:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    1d36:	81 11       	cpse	r24, r1
    1d38:	17 c0       	rjmp	.+46     	; 0x1d68 <MahonyAHRSupdateIMU+0x82>
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	a9 01       	movw	r20, r18
    1d40:	6f a9       	ldd	r22, Y+55	; 0x37
    1d42:	78 ad       	ldd	r23, Y+56	; 0x38
    1d44:	89 ad       	ldd	r24, Y+57	; 0x39
    1d46:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d48:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	0c c0       	rjmp	.+24     	; 0x1d68 <MahonyAHRSupdateIMU+0x82>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	a9 01       	movw	r20, r18
    1d56:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d58:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5e:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <MahonyAHRSupdateIMU+0x82>
    1d66:	60 c2       	rjmp	.+1216   	; 0x2228 <MahonyAHRSupdateIMU+0x542>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    1d68:	a6 01       	movw	r20, r12
    1d6a:	95 01       	movw	r18, r10
    1d6c:	c6 01       	movw	r24, r12
    1d6e:	b5 01       	movw	r22, r10
    1d70:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1d74:	2b 01       	movw	r4, r22
    1d76:	3c 01       	movw	r6, r24
    1d78:	2f a9       	ldd	r18, Y+55	; 0x37
    1d7a:	38 ad       	ldd	r19, Y+56	; 0x38
    1d7c:	49 ad       	ldd	r20, Y+57	; 0x39
    1d7e:	5a ad       	ldd	r21, Y+58	; 0x3a
    1d80:	ca 01       	movw	r24, r20
    1d82:	b9 01       	movw	r22, r18
    1d84:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1d88:	9b 01       	movw	r18, r22
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	c3 01       	movw	r24, r6
    1d8e:	b2 01       	movw	r22, r4
    1d90:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1d94:	2b 01       	movw	r4, r22
    1d96:	3c 01       	movw	r6, r24
    1d98:	2b ad       	ldd	r18, Y+59	; 0x3b
    1d9a:	3c ad       	ldd	r19, Y+60	; 0x3c
    1d9c:	4d ad       	ldd	r20, Y+61	; 0x3d
    1d9e:	5e ad       	ldd	r21, Y+62	; 0x3e
    1da0:	ca 01       	movw	r24, r20
    1da2:	b9 01       	movw	r22, r18
    1da4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	c3 01       	movw	r24, r6
    1dae:	b2 01       	movw	r22, r4
    1db0:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1db4:	5d df       	rcall	.-326    	; 0x1c70 <invSqrt>
    1db6:	2b 01       	movw	r4, r22
    1db8:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	c6 01       	movw	r24, r12
    1dc0:	b5 01       	movw	r22, r10
    1dc2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1dc6:	69 83       	std	Y+1, r22	; 0x01
    1dc8:	7a 83       	std	Y+2, r23	; 0x02
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
		ay *= recipNorm;
    1dce:	a3 01       	movw	r20, r6
    1dd0:	92 01       	movw	r18, r4
    1dd2:	6f a9       	ldd	r22, Y+55	; 0x37
    1dd4:	78 ad       	ldd	r23, Y+56	; 0x38
    1dd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dda:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1dde:	6d 83       	std	Y+5, r22	; 0x05
    1de0:	7e 83       	std	Y+6, r23	; 0x06
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	98 87       	std	Y+8, r25	; 0x08
		az *= recipNorm;        
    1de6:	a3 01       	movw	r20, r6
    1de8:	92 01       	movw	r18, r4
    1dea:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dec:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1df0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1df2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1df6:	6d 8b       	std	Y+21, r22	; 0x15
    1df8:	7e 8b       	std	Y+22, r23	; 0x16
    1dfa:	8f 8b       	std	Y+23, r24	; 0x17
    1dfc:	98 8f       	std	Y+24, r25	; 0x18

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    1dfe:	60 91 07 22 	lds	r22, 0x2207	; 0x802207 <q1>
    1e02:	70 91 08 22 	lds	r23, 0x2208	; 0x802208 <q1+0x1>
    1e06:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <q1+0x2>
    1e0a:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <q1+0x3>
    1e0e:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    1e12:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    1e16:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    1e1a:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    1e1e:	80 90 14 20 	lds	r8, 0x2014	; 0x802014 <q0>
    1e22:	90 90 15 20 	lds	r9, 0x2015	; 0x802015 <q0+0x1>
    1e26:	a0 90 16 20 	lds	r10, 0x2016	; 0x802016 <q0+0x2>
    1e2a:	b0 90 17 20 	lds	r11, 0x2017	; 0x802017 <q0+0x3>
    1e2e:	40 90 03 22 	lds	r4, 0x2203	; 0x802203 <q2>
    1e32:	50 90 04 22 	lds	r5, 0x2204	; 0x802204 <q2+0x1>
    1e36:	60 90 05 22 	lds	r6, 0x2205	; 0x802205 <q2+0x2>
    1e3a:	70 90 06 22 	lds	r7, 0x2206	; 0x802206 <q2+0x3>
    1e3e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1e42:	6b 01       	movw	r12, r22
    1e44:	7c 01       	movw	r14, r24
    1e46:	a3 01       	movw	r20, r6
    1e48:	92 01       	movw	r18, r4
    1e4a:	c5 01       	movw	r24, r10
    1e4c:	b4 01       	movw	r22, r8
    1e4e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    1e56:	c7 01       	movw	r24, r14
    1e58:	b6 01       	movw	r22, r12
    1e5a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1e5e:	69 8f       	std	Y+25, r22	; 0x19
    1e60:	7a 8f       	std	Y+26, r23	; 0x1a
    1e62:	8b 8f       	std	Y+27, r24	; 0x1b
    1e64:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    1e66:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1e6a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1e6e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1e72:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1e76:	20 91 07 22 	lds	r18, 0x2207	; 0x802207 <q1>
    1e7a:	30 91 08 22 	lds	r19, 0x2208	; 0x802208 <q1+0x1>
    1e7e:	40 91 09 22 	lds	r20, 0x2209	; 0x802209 <q1+0x2>
    1e82:	50 91 0a 22 	lds	r21, 0x220A	; 0x80220a <q1+0x3>
    1e86:	80 90 03 22 	lds	r8, 0x2203	; 0x802203 <q2>
    1e8a:	90 90 04 22 	lds	r9, 0x2204	; 0x802204 <q2+0x1>
    1e8e:	a0 90 05 22 	lds	r10, 0x2205	; 0x802205 <q2+0x2>
    1e92:	b0 90 06 22 	lds	r11, 0x2206	; 0x802206 <q2+0x3>
    1e96:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    1e9a:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    1e9e:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    1ea2:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    1ea6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1eaa:	6b 01       	movw	r12, r22
    1eac:	7c 01       	movw	r14, r24
    1eae:	a3 01       	movw	r20, r6
    1eb0:	92 01       	movw	r18, r4
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	b4 01       	movw	r22, r8
    1eb6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1ec6:	6d 8f       	std	Y+29, r22	; 0x1d
    1ec8:	7e 8f       	std	Y+30, r23	; 0x1e
    1eca:	8f 8f       	std	Y+31, r24	; 0x1f
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5 + q3 * q3;
    1ece:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    1ed2:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    1ed6:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    1eda:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    1ede:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    1ee2:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    1ee6:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    1eea:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    1eee:	80 90 ff 21 	lds	r8, 0x21FF	; 0x8021ff <q3>
    1ef2:	90 90 00 22 	lds	r9, 0x2200	; 0x802200 <q3+0x1>
    1ef6:	a0 90 01 22 	lds	r10, 0x2201	; 0x802201 <q3+0x2>
    1efa:	b0 90 02 22 	lds	r11, 0x2202	; 0x802202 <q3+0x3>
    1efe:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    1f02:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    1f06:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    1f0a:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    1f0e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1f1e:	6b 01       	movw	r12, r22
    1f20:	7c 01       	movw	r14, r24
    1f22:	a3 01       	movw	r20, r6
    1f24:	92 01       	movw	r18, r4
    1f26:	c5 01       	movw	r24, r10
    1f28:	b4 01       	movw	r22, r8
    1f2a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1f2e:	9b 01       	movw	r18, r22
    1f30:	ac 01       	movw	r20, r24
    1f32:	c7 01       	movw	r24, r14
    1f34:	b6 01       	movw	r22, r12
    1f36:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    1f3e:	9b 01       	movw	r18, r22
    1f40:	ac 01       	movw	r20, r24
    1f42:	6d 81       	ldd	r22, Y+5	; 0x05
    1f44:	7e 81       	ldd	r23, Y+6	; 0x06
    1f46:	8f 81       	ldd	r24, Y+7	; 0x07
    1f48:	98 85       	ldd	r25, Y+8	; 0x08
    1f4a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1f4e:	4b 01       	movw	r8, r22
    1f50:	5c 01       	movw	r10, r24
    1f52:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f54:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f56:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f58:	58 a1       	ldd	r21, Y+32	; 0x20
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	c5 01       	movw	r24, r10
    1f6c:	b4 01       	movw	r22, r8
    1f6e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1f72:	69 a3       	std	Y+33, r22	; 0x21
    1f74:	7a a3       	std	Y+34, r23	; 0x22
    1f76:	8b a3       	std	Y+35, r24	; 0x23
    1f78:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    1f7a:	29 8d       	ldd	r18, Y+25	; 0x19
    1f7c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1f7e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1f80:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1f8e:	4b 01       	movw	r8, r22
    1f90:	5c 01       	movw	r10, r24
    1f92:	a7 01       	movw	r20, r14
    1f94:	96 01       	movw	r18, r12
    1f96:	69 81       	ldd	r22, Y+1	; 0x01
    1f98:	7a 81       	ldd	r23, Y+2	; 0x02
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	c5 01       	movw	r24, r10
    1fa8:	b4 01       	movw	r22, r8
    1faa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1fae:	4b 01       	movw	r8, r22
    1fb0:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx);
    1fb2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1fb4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1fb6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1fb8:	58 a1       	ldd	r21, Y+32	; 0x20
    1fba:	69 81       	ldd	r22, Y+1	; 0x01
    1fbc:	7a 81       	ldd	r23, Y+2	; 0x02
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1fc6:	6b 01       	movw	r12, r22
    1fc8:	7c 01       	movw	r14, r24
    1fca:	29 8d       	ldd	r18, Y+25	; 0x19
    1fcc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1fce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fd0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1fd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd8:	98 85       	ldd	r25, Y+8	; 0x08
    1fda:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	ac 01       	movw	r20, r24
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    1fea:	6b 01       	movw	r12, r22
    1fec:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    1fee:	60 91 0b 22 	lds	r22, 0x220B	; 0x80220b <twoKi>
    1ff2:	70 91 0c 22 	lds	r23, 0x220C	; 0x80220c <twoKi+0x1>
    1ff6:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <twoKi+0x2>
    1ffa:	90 91 0e 22 	lds	r25, 0x220E	; 0x80220e <twoKi+0x3>
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	a9 01       	movw	r20, r18
    2004:	0e 94 b9 29 	call	0x5372	; 0x5372 <__gesf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <MahonyAHRSupdateIMU+0x328>
    200c:	ab c0       	rjmp	.+342    	; 0x2164 <MahonyAHRSupdateIMU+0x47e>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    200e:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    2012:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    2016:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    201a:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    201e:	40 90 fb 21 	lds	r4, 0x21FB	; 0x8021fb <integralFBx>
    2022:	50 90 fc 21 	lds	r5, 0x21FC	; 0x8021fc <integralFBx+0x1>
    2026:	60 90 fd 21 	lds	r6, 0x21FD	; 0x8021fd <integralFBx+0x2>
    202a:	70 90 fe 21 	lds	r7, 0x21FE	; 0x8021fe <integralFBx+0x3>
    202e:	69 a1       	ldd	r22, Y+33	; 0x21
    2030:	7a a1       	ldd	r23, Y+34	; 0x22
    2032:	8b a1       	ldd	r24, Y+35	; 0x23
    2034:	9c a1       	ldd	r25, Y+36	; 0x24
    2036:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    203a:	2a ef       	ldi	r18, 0xFA	; 250
    203c:	39 ec       	ldi	r19, 0xC9	; 201
    203e:	44 e3       	ldi	r20, 0x34	; 52
    2040:	59 e3       	ldi	r21, 0x39	; 57
    2042:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2046:	a3 01       	movw	r20, r6
    2048:	92 01       	movw	r18, r4
    204a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    204e:	60 93 fb 21 	sts	0x21FB, r22	; 0x8021fb <integralFBx>
    2052:	70 93 fc 21 	sts	0x21FC, r23	; 0x8021fc <integralFBx+0x1>
    2056:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <integralFBx+0x2>
    205a:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    205e:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    2062:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    2066:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    206a:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    206e:	40 90 f7 21 	lds	r4, 0x21F7	; 0x8021f7 <integralFBy>
    2072:	50 90 f8 21 	lds	r5, 0x21F8	; 0x8021f8 <integralFBy+0x1>
    2076:	60 90 f9 21 	lds	r6, 0x21F9	; 0x8021f9 <integralFBy+0x2>
    207a:	70 90 fa 21 	lds	r7, 0x21FA	; 0x8021fa <integralFBy+0x3>
    207e:	c5 01       	movw	r24, r10
    2080:	b4 01       	movw	r22, r8
    2082:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2086:	2a ef       	ldi	r18, 0xFA	; 250
    2088:	39 ec       	ldi	r19, 0xC9	; 201
    208a:	44 e3       	ldi	r20, 0x34	; 52
    208c:	59 e3       	ldi	r21, 0x39	; 57
    208e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2092:	a3 01       	movw	r20, r6
    2094:	92 01       	movw	r18, r4
    2096:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    209a:	60 93 f7 21 	sts	0x21F7, r22	; 0x8021f7 <integralFBy>
    209e:	70 93 f8 21 	sts	0x21F8, r23	; 0x8021f8 <integralFBy+0x1>
    20a2:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <integralFBy+0x2>
    20a6:	90 93 fa 21 	sts	0x21FA, r25	; 0x8021fa <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    20aa:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    20ae:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    20b2:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    20b6:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    20ba:	40 90 f3 21 	lds	r4, 0x21F3	; 0x8021f3 <integralFBz>
    20be:	50 90 f4 21 	lds	r5, 0x21F4	; 0x8021f4 <integralFBz+0x1>
    20c2:	60 90 f5 21 	lds	r6, 0x21F5	; 0x8021f5 <integralFBz+0x2>
    20c6:	70 90 f6 21 	lds	r7, 0x21F6	; 0x8021f6 <integralFBz+0x3>
    20ca:	c7 01       	movw	r24, r14
    20cc:	b6 01       	movw	r22, r12
    20ce:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    20d2:	2a ef       	ldi	r18, 0xFA	; 250
    20d4:	39 ec       	ldi	r19, 0xC9	; 201
    20d6:	44 e3       	ldi	r20, 0x34	; 52
    20d8:	59 e3       	ldi	r21, 0x39	; 57
    20da:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    20de:	a3 01       	movw	r20, r6
    20e0:	92 01       	movw	r18, r4
    20e2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    20e6:	60 93 f3 21 	sts	0x21F3, r22	; 0x8021f3 <integralFBz>
    20ea:	70 93 f4 21 	sts	0x21F4, r23	; 0x8021f4 <integralFBz+0x1>
    20ee:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <integralFBz+0x2>
    20f2:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    20f6:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <integralFBx>
    20fa:	30 91 fc 21 	lds	r19, 0x21FC	; 0x8021fc <integralFBx+0x1>
    20fe:	40 91 fd 21 	lds	r20, 0x21FD	; 0x8021fd <integralFBx+0x2>
    2102:	50 91 fe 21 	lds	r21, 0x21FE	; 0x8021fe <integralFBx+0x3>
    2106:	69 85       	ldd	r22, Y+9	; 0x09
    2108:	7a 85       	ldd	r23, Y+10	; 0x0a
    210a:	8b 85       	ldd	r24, Y+11	; 0x0b
    210c:	9c 85       	ldd	r25, Y+12	; 0x0c
    210e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2112:	69 87       	std	Y+9, r22	; 0x09
    2114:	7a 87       	std	Y+10, r23	; 0x0a
    2116:	8b 87       	std	Y+11, r24	; 0x0b
    2118:	9c 87       	std	Y+12, r25	; 0x0c
			gy += integralFBy;
    211a:	20 91 f7 21 	lds	r18, 0x21F7	; 0x8021f7 <integralFBy>
    211e:	30 91 f8 21 	lds	r19, 0x21F8	; 0x8021f8 <integralFBy+0x1>
    2122:	40 91 f9 21 	lds	r20, 0x21F9	; 0x8021f9 <integralFBy+0x2>
    2126:	50 91 fa 21 	lds	r21, 0x21FA	; 0x8021fa <integralFBy+0x3>
    212a:	6d 85       	ldd	r22, Y+13	; 0x0d
    212c:	7e 85       	ldd	r23, Y+14	; 0x0e
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2136:	6d 87       	std	Y+13, r22	; 0x0d
    2138:	7e 87       	std	Y+14, r23	; 0x0e
    213a:	8f 87       	std	Y+15, r24	; 0x0f
    213c:	98 8b       	std	Y+16, r25	; 0x10
			gz += integralFBz;
    213e:	20 91 f3 21 	lds	r18, 0x21F3	; 0x8021f3 <integralFBz>
    2142:	30 91 f4 21 	lds	r19, 0x21F4	; 0x8021f4 <integralFBz+0x1>
    2146:	40 91 f5 21 	lds	r20, 0x21F5	; 0x8021f5 <integralFBz+0x2>
    214a:	50 91 f6 21 	lds	r21, 0x21F6	; 0x8021f6 <integralFBz+0x3>
    214e:	69 89       	ldd	r22, Y+17	; 0x11
    2150:	7a 89       	ldd	r23, Y+18	; 0x12
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    215a:	69 8b       	std	Y+17, r22	; 0x11
    215c:	7a 8b       	std	Y+18, r23	; 0x12
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	18 c0       	rjmp	.+48     	; 0x2194 <MahonyAHRSupdateIMU+0x4ae>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    2164:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <integralFBx>
    2168:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <integralFBx+0x1>
    216c:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <integralFBx+0x2>
    2170:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <integralFBx+0x3>
			integralFBy = 0.0;
    2174:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <integralFBy>
    2178:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <integralFBy+0x1>
    217c:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <integralFBy+0x2>
    2180:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <integralFBy+0x3>
			integralFBz = 0.0;
    2184:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <integralFBz>
    2188:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <integralFBz+0x1>
    218c:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <integralFBz+0x2>
    2190:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    2194:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    2198:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    219c:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    21a0:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    21a4:	69 a1       	ldd	r22, Y+33	; 0x21
    21a6:	7a a1       	ldd	r23, Y+34	; 0x22
    21a8:	8b a1       	ldd	r24, Y+35	; 0x23
    21aa:	9c a1       	ldd	r25, Y+36	; 0x24
    21ac:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    21b0:	9b 01       	movw	r18, r22
    21b2:	ac 01       	movw	r20, r24
    21b4:	69 85       	ldd	r22, Y+9	; 0x09
    21b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    21bc:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    21c0:	69 87       	std	Y+9, r22	; 0x09
    21c2:	7a 87       	std	Y+10, r23	; 0x0a
    21c4:	8b 87       	std	Y+11, r24	; 0x0b
    21c6:	9c 87       	std	Y+12, r25	; 0x0c
		gy += twoKp * halfey;
    21c8:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    21cc:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    21d0:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    21d4:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    21d8:	c5 01       	movw	r24, r10
    21da:	b4 01       	movw	r22, r8
    21dc:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	6d 85       	ldd	r22, Y+13	; 0x0d
    21e6:	7e 85       	ldd	r23, Y+14	; 0x0e
    21e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ea:	98 89       	ldd	r25, Y+16	; 0x10
    21ec:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    21f0:	6d 87       	std	Y+13, r22	; 0x0d
    21f2:	7e 87       	std	Y+14, r23	; 0x0e
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
    21f6:	98 8b       	std	Y+16, r25	; 0x10
		gz += twoKp * halfez;
    21f8:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    21fc:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    2200:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    2204:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    2208:	c7 01       	movw	r24, r14
    220a:	b6 01       	movw	r22, r12
    220c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2210:	9b 01       	movw	r18, r22
    2212:	ac 01       	movw	r20, r24
    2214:	69 89       	ldd	r22, Y+17	; 0x11
    2216:	7a 89       	ldd	r23, Y+18	; 0x12
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2220:	69 8b       	std	Y+17, r22	; 0x11
    2222:	7a 8b       	std	Y+18, r23	; 0x12
    2224:	8b 8b       	std	Y+19, r24	; 0x13
    2226:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    2228:	2a ef       	ldi	r18, 0xFA	; 250
    222a:	39 ec       	ldi	r19, 0xC9	; 201
    222c:	44 eb       	ldi	r20, 0xB4	; 180
    222e:	58 e3       	ldi	r21, 0x38	; 56
    2230:	69 85       	ldd	r22, Y+9	; 0x09
    2232:	7a 85       	ldd	r23, Y+10	; 0x0a
    2234:	8b 85       	ldd	r24, Y+11	; 0x0b
    2236:	9c 85       	ldd	r25, Y+12	; 0x0c
    2238:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    223c:	69 87       	std	Y+9, r22	; 0x09
    223e:	7a 87       	std	Y+10, r23	; 0x0a
    2240:	8b 87       	std	Y+11, r24	; 0x0b
    2242:	9c 87       	std	Y+12, r25	; 0x0c
	gy *= (0.5 * (1.0 / sampleFreq));
    2244:	2a ef       	ldi	r18, 0xFA	; 250
    2246:	39 ec       	ldi	r19, 0xC9	; 201
    2248:	44 eb       	ldi	r20, 0xB4	; 180
    224a:	58 e3       	ldi	r21, 0x38	; 56
    224c:	6d 85       	ldd	r22, Y+13	; 0x0d
    224e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	98 89       	ldd	r25, Y+16	; 0x10
    2254:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2258:	6d 87       	std	Y+13, r22	; 0x0d
    225a:	7e 87       	std	Y+14, r23	; 0x0e
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	98 8b       	std	Y+16, r25	; 0x10
	gz *= (0.5 * (1.0 / sampleFreq));
    2260:	2a ef       	ldi	r18, 0xFA	; 250
    2262:	39 ec       	ldi	r19, 0xC9	; 201
    2264:	44 eb       	ldi	r20, 0xB4	; 180
    2266:	58 e3       	ldi	r21, 0x38	; 56
    2268:	69 89       	ldd	r22, Y+17	; 0x11
    226a:	7a 89       	ldd	r23, Y+18	; 0x12
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2274:	69 8b       	std	Y+17, r22	; 0x11
    2276:	7a 8b       	std	Y+18, r23	; 0x12
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	9c 8b       	std	Y+20, r25	; 0x14
	qa = q0;
    227c:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    2280:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    2284:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    2288:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    228c:	ed 82       	std	Y+5, r14	; 0x05
    228e:	fe 82       	std	Y+6, r15	; 0x06
    2290:	0f 83       	std	Y+7, r16	; 0x07
    2292:	18 87       	std	Y+8, r17	; 0x08
	qb = q1;
    2294:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    2298:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    229c:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    22a0:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
	qc = q2;
    22a4:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    22a8:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    22ac:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    22b0:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    22b4:	ed 8a       	std	Y+21, r14	; 0x15
    22b6:	fe 8a       	std	Y+22, r15	; 0x16
    22b8:	0f 8b       	std	Y+23, r16	; 0x17
    22ba:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    22bc:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    22c0:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    22c4:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    22c8:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    22cc:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    22d0:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    22d4:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    22d8:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    22dc:	c5 01       	movw	r24, r10
    22de:	b4 01       	movw	r22, r8
    22e0:	90 58       	subi	r25, 0x80	; 128
    22e2:	29 85       	ldd	r18, Y+9	; 0x09
    22e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    22e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    22e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    22ea:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    22ee:	69 83       	std	Y+1, r22	; 0x01
    22f0:	7a 83       	std	Y+2, r23	; 0x02
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	2d 89       	ldd	r18, Y+21	; 0x15
    22f8:	3e 89       	ldd	r19, Y+22	; 0x16
    22fa:	4f 89       	ldd	r20, Y+23	; 0x17
    22fc:	58 8d       	ldd	r21, Y+24	; 0x18
    22fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2300:	7e 85       	ldd	r23, Y+14	; 0x0e
    2302:	8f 85       	ldd	r24, Y+15	; 0x0f
    2304:	98 89       	ldd	r25, Y+16	; 0x10
    2306:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	69 81       	ldd	r22, Y+1	; 0x01
    2310:	7a 81       	ldd	r23, Y+2	; 0x02
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    231a:	69 83       	std	Y+1, r22	; 0x01
    231c:	7a 83       	std	Y+2, r23	; 0x02
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	a3 01       	movw	r20, r6
    2324:	92 01       	movw	r18, r4
    2326:	69 89       	ldd	r22, Y+17	; 0x11
    2328:	7a 89       	ldd	r23, Y+18	; 0x12
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	69 81       	ldd	r22, Y+1	; 0x01
    2338:	7a 81       	ldd	r23, Y+2	; 0x02
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2342:	a7 01       	movw	r20, r14
    2344:	96 01       	movw	r18, r12
    2346:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    234a:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    234e:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    2352:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    2356:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    235a:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    235e:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    2362:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    2366:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    236a:	c0 90 07 22 	lds	r12, 0x2207	; 0x802207 <q1>
    236e:	d0 90 08 22 	lds	r13, 0x2208	; 0x802208 <q1+0x1>
    2372:	e0 90 09 22 	lds	r14, 0x2209	; 0x802209 <q1+0x2>
    2376:	f0 90 0a 22 	lds	r15, 0x220A	; 0x80220a <q1+0x3>
    237a:	2d 81       	ldd	r18, Y+5	; 0x05
    237c:	3e 81       	ldd	r19, Y+6	; 0x06
    237e:	4f 81       	ldd	r20, Y+7	; 0x07
    2380:	58 85       	ldd	r21, Y+8	; 0x08
    2382:	69 85       	ldd	r22, Y+9	; 0x09
    2384:	7a 85       	ldd	r23, Y+10	; 0x0a
    2386:	8b 85       	ldd	r24, Y+11	; 0x0b
    2388:	9c 85       	ldd	r25, Y+12	; 0x0c
    238a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    238e:	69 83       	std	Y+1, r22	; 0x01
    2390:	7a 83       	std	Y+2, r23	; 0x02
    2392:	8b 83       	std	Y+3, r24	; 0x03
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	2d 89       	ldd	r18, Y+21	; 0x15
    2398:	3e 89       	ldd	r19, Y+22	; 0x16
    239a:	4f 89       	ldd	r20, Y+23	; 0x17
    239c:	58 8d       	ldd	r21, Y+24	; 0x18
    239e:	69 89       	ldd	r22, Y+17	; 0x11
    23a0:	7a 89       	ldd	r23, Y+18	; 0x12
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	69 81       	ldd	r22, Y+1	; 0x01
    23b0:	7a 81       	ldd	r23, Y+2	; 0x02
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    23ba:	69 83       	std	Y+1, r22	; 0x01
    23bc:	7a 83       	std	Y+2, r23	; 0x02
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	a3 01       	movw	r20, r6
    23c4:	92 01       	movw	r18, r4
    23c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    23c8:	7e 85       	ldd	r23, Y+14	; 0x0e
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	98 89       	ldd	r25, Y+16	; 0x10
    23ce:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	69 81       	ldd	r22, Y+1	; 0x01
    23d8:	7a 81       	ldd	r23, Y+2	; 0x02
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    23e2:	a7 01       	movw	r20, r14
    23e4:	96 01       	movw	r18, r12
    23e6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    23ea:	60 93 07 22 	sts	0x2207, r22	; 0x802207 <q1>
    23ee:	70 93 08 22 	sts	0x2208, r23	; 0x802208 <q1+0x1>
    23f2:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <q1+0x2>
    23f6:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    23fa:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    23fe:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    2402:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    2406:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    240a:	c0 90 03 22 	lds	r12, 0x2203	; 0x802203 <q2>
    240e:	d0 90 04 22 	lds	r13, 0x2204	; 0x802204 <q2+0x1>
    2412:	e0 90 05 22 	lds	r14, 0x2205	; 0x802205 <q2+0x2>
    2416:	f0 90 06 22 	lds	r15, 0x2206	; 0x802206 <q2+0x3>
    241a:	2d 81       	ldd	r18, Y+5	; 0x05
    241c:	3e 81       	ldd	r19, Y+6	; 0x06
    241e:	4f 81       	ldd	r20, Y+7	; 0x07
    2420:	58 85       	ldd	r21, Y+8	; 0x08
    2422:	6d 85       	ldd	r22, Y+13	; 0x0d
    2424:	7e 85       	ldd	r23, Y+14	; 0x0e
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 89       	ldd	r25, Y+16	; 0x10
    242a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    242e:	69 83       	std	Y+1, r22	; 0x01
    2430:	7a 83       	std	Y+2, r23	; 0x02
    2432:	8b 83       	std	Y+3, r24	; 0x03
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	a5 01       	movw	r20, r10
    2438:	94 01       	movw	r18, r8
    243a:	69 89       	ldd	r22, Y+17	; 0x11
    243c:	7a 89       	ldd	r23, Y+18	; 0x12
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2446:	9b 01       	movw	r18, r22
    2448:	ac 01       	movw	r20, r24
    244a:	69 81       	ldd	r22, Y+1	; 0x01
    244c:	7a 81       	ldd	r23, Y+2	; 0x02
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2456:	69 83       	std	Y+1, r22	; 0x01
    2458:	7a 83       	std	Y+2, r23	; 0x02
    245a:	8b 83       	std	Y+3, r24	; 0x03
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	a3 01       	movw	r20, r6
    2460:	92 01       	movw	r18, r4
    2462:	69 85       	ldd	r22, Y+9	; 0x09
    2464:	7a 85       	ldd	r23, Y+10	; 0x0a
    2466:	8b 85       	ldd	r24, Y+11	; 0x0b
    2468:	9c 85       	ldd	r25, Y+12	; 0x0c
    246a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	69 81       	ldd	r22, Y+1	; 0x01
    2474:	7a 81       	ldd	r23, Y+2	; 0x02
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	9c 81       	ldd	r25, Y+4	; 0x04
    247a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    247e:	a7 01       	movw	r20, r14
    2480:	96 01       	movw	r18, r12
    2482:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2486:	60 93 03 22 	sts	0x2203, r22	; 0x802203 <q2>
    248a:	70 93 04 22 	sts	0x2204, r23	; 0x802204 <q2+0x1>
    248e:	80 93 05 22 	sts	0x2205, r24	; 0x802205 <q2+0x2>
    2492:	90 93 06 22 	sts	0x2206, r25	; 0x802206 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    2496:	c0 90 ff 21 	lds	r12, 0x21FF	; 0x8021ff <q3>
    249a:	d0 90 00 22 	lds	r13, 0x2200	; 0x802200 <q3+0x1>
    249e:	e0 90 01 22 	lds	r14, 0x2201	; 0x802201 <q3+0x2>
    24a2:	f0 90 02 22 	lds	r15, 0x2202	; 0x802202 <q3+0x3>
    24a6:	2d 81       	ldd	r18, Y+5	; 0x05
    24a8:	3e 81       	ldd	r19, Y+6	; 0x06
    24aa:	4f 81       	ldd	r20, Y+7	; 0x07
    24ac:	58 85       	ldd	r21, Y+8	; 0x08
    24ae:	69 89       	ldd	r22, Y+17	; 0x11
    24b0:	7a 89       	ldd	r23, Y+18	; 0x12
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    24ba:	2b 01       	movw	r4, r22
    24bc:	3c 01       	movw	r6, r24
    24be:	a5 01       	movw	r20, r10
    24c0:	94 01       	movw	r18, r8
    24c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    24c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    24c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c8:	98 89       	ldd	r25, Y+16	; 0x10
    24ca:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    24ce:	9b 01       	movw	r18, r22
    24d0:	ac 01       	movw	r20, r24
    24d2:	c3 01       	movw	r24, r6
    24d4:	b2 01       	movw	r22, r4
    24d6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    24da:	4b 01       	movw	r8, r22
    24dc:	5c 01       	movw	r10, r24
    24de:	2d 89       	ldd	r18, Y+21	; 0x15
    24e0:	3e 89       	ldd	r19, Y+22	; 0x16
    24e2:	4f 89       	ldd	r20, Y+23	; 0x17
    24e4:	58 8d       	ldd	r21, Y+24	; 0x18
    24e6:	69 85       	ldd	r22, Y+9	; 0x09
    24e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    24ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ee:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    24f2:	9b 01       	movw	r18, r22
    24f4:	ac 01       	movw	r20, r24
    24f6:	c5 01       	movw	r24, r10
    24f8:	b4 01       	movw	r22, r8
    24fa:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    24fe:	a7 01       	movw	r20, r14
    2500:	96 01       	movw	r18, r12
    2502:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2506:	60 93 ff 21 	sts	0x21FF, r22	; 0x8021ff <q3>
    250a:	70 93 00 22 	sts	0x2200, r23	; 0x802200 <q3+0x1>
    250e:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <q3+0x2>
    2512:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    2516:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    251a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    251e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2522:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2526:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    252a:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    252e:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    2532:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    2536:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    253a:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    253e:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    2542:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
    2546:	40 90 07 22 	lds	r4, 0x2207	; 0x802207 <q1>
    254a:	50 90 08 22 	lds	r5, 0x2208	; 0x802208 <q1+0x1>
    254e:	60 90 09 22 	lds	r6, 0x2209	; 0x802209 <q1+0x2>
    2552:	70 90 0a 22 	lds	r7, 0x220A	; 0x80220a <q1+0x3>
    2556:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    255a:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    255e:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    2562:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    2566:	e9 86       	std	Y+9, r14	; 0x09
    2568:	fa 86       	std	Y+10, r15	; 0x0a
    256a:	0b 87       	std	Y+11, r16	; 0x0b
    256c:	1c 87       	std	Y+12, r17	; 0x0c
    256e:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    2572:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    2576:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    257a:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    257e:	ed 86       	std	Y+13, r14	; 0x0d
    2580:	fe 86       	std	Y+14, r15	; 0x0e
    2582:	0f 87       	std	Y+15, r16	; 0x0f
    2584:	18 8b       	std	Y+16, r17	; 0x10
    2586:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    258a:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    258e:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    2592:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    2596:	e9 82       	std	Y+1, r14	; 0x01
    2598:	fa 82       	std	Y+2, r15	; 0x02
    259a:	0b 83       	std	Y+3, r16	; 0x03
    259c:	1c 83       	std	Y+4, r17	; 0x04
    259e:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    25a2:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    25a6:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    25aa:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    25ae:	e9 8a       	std	Y+17, r14	; 0x11
    25b0:	fa 8a       	std	Y+18, r15	; 0x12
    25b2:	0b 8b       	std	Y+19, r16	; 0x13
    25b4:	1c 8b       	std	Y+20, r17	; 0x14
    25b6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    25ba:	6b 01       	movw	r12, r22
    25bc:	7c 01       	movw	r14, r24
    25be:	a3 01       	movw	r20, r6
    25c0:	92 01       	movw	r18, r4
    25c2:	c5 01       	movw	r24, r10
    25c4:	b4 01       	movw	r22, r8
    25c6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    25ca:	9b 01       	movw	r18, r22
    25cc:	ac 01       	movw	r20, r24
    25ce:	c7 01       	movw	r24, r14
    25d0:	b6 01       	movw	r22, r12
    25d2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    25d6:	4b 01       	movw	r8, r22
    25d8:	5c 01       	movw	r10, r24
    25da:	2d 85       	ldd	r18, Y+13	; 0x0d
    25dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    25de:	4f 85       	ldd	r20, Y+15	; 0x0f
    25e0:	58 89       	ldd	r21, Y+16	; 0x10
    25e2:	69 85       	ldd	r22, Y+9	; 0x09
    25e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    25e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ea:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    25ee:	9b 01       	movw	r18, r22
    25f0:	ac 01       	movw	r20, r24
    25f2:	c5 01       	movw	r24, r10
    25f4:	b4 01       	movw	r22, r8
    25f6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    25fa:	4b 01       	movw	r8, r22
    25fc:	5c 01       	movw	r10, r24
    25fe:	29 89       	ldd	r18, Y+17	; 0x11
    2600:	3a 89       	ldd	r19, Y+18	; 0x12
    2602:	4b 89       	ldd	r20, Y+19	; 0x13
    2604:	5c 89       	ldd	r21, Y+20	; 0x14
    2606:	69 81       	ldd	r22, Y+1	; 0x01
    2608:	7a 81       	ldd	r23, Y+2	; 0x02
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2612:	9b 01       	movw	r18, r22
    2614:	ac 01       	movw	r20, r24
    2616:	c5 01       	movw	r24, r10
    2618:	b4 01       	movw	r22, r8
    261a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    261e:	28 db       	rcall	.-2480   	; 0x1c70 <invSqrt>
    2620:	6b 01       	movw	r12, r22
    2622:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    2624:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    2628:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    262c:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    2630:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    2634:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2638:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    263c:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    2640:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    2644:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    2648:	20 91 07 22 	lds	r18, 0x2207	; 0x802207 <q1>
    264c:	30 91 08 22 	lds	r19, 0x2208	; 0x802208 <q1+0x1>
    2650:	40 91 09 22 	lds	r20, 0x2209	; 0x802209 <q1+0x2>
    2654:	50 91 0a 22 	lds	r21, 0x220A	; 0x80220a <q1+0x3>
    2658:	c7 01       	movw	r24, r14
    265a:	b6 01       	movw	r22, r12
    265c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2660:	60 93 07 22 	sts	0x2207, r22	; 0x802207 <q1>
    2664:	70 93 08 22 	sts	0x2208, r23	; 0x802208 <q1+0x1>
    2668:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <q1+0x2>
    266c:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <q1+0x3>
	q2 *= recipNorm;
    2670:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <q2>
    2674:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <q2+0x1>
    2678:	40 91 05 22 	lds	r20, 0x2205	; 0x802205 <q2+0x2>
    267c:	50 91 06 22 	lds	r21, 0x2206	; 0x802206 <q2+0x3>
    2680:	c7 01       	movw	r24, r14
    2682:	b6 01       	movw	r22, r12
    2684:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2688:	60 93 03 22 	sts	0x2203, r22	; 0x802203 <q2>
    268c:	70 93 04 22 	sts	0x2204, r23	; 0x802204 <q2+0x1>
    2690:	80 93 05 22 	sts	0x2205, r24	; 0x802205 <q2+0x2>
    2694:	90 93 06 22 	sts	0x2206, r25	; 0x802206 <q2+0x3>
	q3 *= recipNorm;
    2698:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    269c:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    26a0:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    26a4:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    26a8:	c7 01       	movw	r24, r14
    26aa:	b6 01       	movw	r22, r12
    26ac:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    26b0:	60 93 ff 21 	sts	0x21FF, r22	; 0x8021ff <q3>
    26b4:	70 93 00 22 	sts	0x2200, r23	; 0x802200 <q3+0x1>
    26b8:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <q3+0x2>
    26bc:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <q3+0x3>
}
    26c0:	a4 96       	adiw	r28, 0x24	; 36
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	df 90       	pop	r13
    26d4:	cf 90       	pop	r12
    26d6:	bf 90       	pop	r11
    26d8:	af 90       	pop	r10
    26da:	9f 90       	pop	r9
    26dc:	8f 90       	pop	r8
    26de:	7f 90       	pop	r7
    26e0:	6f 90       	pop	r6
    26e2:	5f 90       	pop	r5
    26e4:	4f 90       	pop	r4
    26e6:	08 95       	ret

000026e8 <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(double gx, double gy, double gz, double ax, double ay, double az, double mx, double my, double mz) {
    26e8:	2f 92       	push	r2
    26ea:	3f 92       	push	r3
    26ec:	4f 92       	push	r4
    26ee:	5f 92       	push	r5
    26f0:	6f 92       	push	r6
    26f2:	7f 92       	push	r7
    26f4:	8f 92       	push	r8
    26f6:	9f 92       	push	r9
    26f8:	af 92       	push	r10
    26fa:	bf 92       	push	r11
    26fc:	cf 92       	push	r12
    26fe:	df 92       	push	r13
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	c8 55       	subi	r28, 0x58	; 88
    2712:	d1 09       	sbc	r29, r1
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	69 8b       	std	Y+17, r22	; 0x11
    271a:	7a 8b       	std	Y+18, r23	; 0x12
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	9c 8b       	std	Y+20, r25	; 0x14
    2720:	29 8f       	std	Y+25, r18	; 0x19
    2722:	3a 8f       	std	Y+26, r19	; 0x1a
    2724:	4b 8f       	std	Y+27, r20	; 0x1b
    2726:	5c 8f       	std	Y+28, r21	; 0x1c
    2728:	e9 82       	std	Y+1, r14	; 0x01
    272a:	fa 82       	std	Y+2, r15	; 0x02
    272c:	0b 83       	std	Y+3, r16	; 0x03
    272e:	1c 83       	std	Y+4, r17	; 0x04
    2730:	ae 96       	adiw	r28, 0x2e	; 46
    2732:	ff ac       	ldd	r15, Y+63	; 0x3f
    2734:	ae 97       	sbiw	r28, 0x2e	; 46
    2736:	af 96       	adiw	r28, 0x2f	; 47
    2738:	ef ac       	ldd	r14, Y+63	; 0x3f
    273a:	af 97       	sbiw	r28, 0x2f	; 47
    273c:	e0 96       	adiw	r28, 0x30	; 48
    273e:	9f ac       	ldd	r9, Y+63	; 0x3f
    2740:	e0 97       	sbiw	r28, 0x30	; 48
    2742:	e1 96       	adiw	r28, 0x31	; 49
    2744:	8f ac       	ldd	r8, Y+63	; 0x3f
    2746:	e1 97       	sbiw	r28, 0x31	; 49
    2748:	e2 96       	adiw	r28, 0x32	; 50
    274a:	1f ad       	ldd	r17, Y+63	; 0x3f
    274c:	e2 97       	sbiw	r28, 0x32	; 50
    274e:	e3 96       	adiw	r28, 0x33	; 51
    2750:	0f ad       	ldd	r16, Y+63	; 0x3f
    2752:	e3 97       	sbiw	r28, 0x33	; 51
    2754:	e4 96       	adiw	r28, 0x34	; 52
    2756:	3f ac       	ldd	r3, Y+63	; 0x3f
    2758:	e4 97       	sbiw	r28, 0x34	; 52
    275a:	e5 96       	adiw	r28, 0x35	; 53
    275c:	2f ac       	ldd	r2, Y+63	; 0x3f
    275e:	e5 97       	sbiw	r28, 0x35	; 53
	double halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0) && (my == 0.0) && (mz == 0.0)) {
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	a9 01       	movw	r20, r18
    2766:	e9 96       	adiw	r28, 0x39	; 57
    2768:	6c ad       	ldd	r22, Y+60	; 0x3c
    276a:	7d ad       	ldd	r23, Y+61	; 0x3d
    276c:	8e ad       	ldd	r24, Y+62	; 0x3e
    276e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2770:	e9 97       	sbiw	r28, 0x39	; 57
    2772:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    2776:	81 11       	cpse	r24, r1
    2778:	34 c0       	rjmp	.+104    	; 0x27e2 <MahonyAHRSupdate+0xfa>
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	a9 01       	movw	r20, r18
    2780:	ed 96       	adiw	r28, 0x3d	; 61
    2782:	6c ad       	ldd	r22, Y+60	; 0x3c
    2784:	7d ad       	ldd	r23, Y+61	; 0x3d
    2786:	8e ad       	ldd	r24, Y+62	; 0x3e
    2788:	9f ad       	ldd	r25, Y+63	; 0x3f
    278a:	ed 97       	sbiw	r28, 0x3d	; 61
    278c:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    2790:	81 11       	cpse	r24, r1
    2792:	27 c0       	rjmp	.+78     	; 0x27e2 <MahonyAHRSupdate+0xfa>
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	c3 58       	subi	r28, 0x83	; 131
    279c:	df 4f       	sbci	r29, 0xFF	; 255
    279e:	68 81       	ld	r22, Y
    27a0:	79 81       	ldd	r23, Y+1	; 0x01
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	cd 57       	subi	r28, 0x7D	; 125
    27a8:	d0 40       	sbci	r29, 0x00	; 0
    27aa:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    27ae:	81 11       	cpse	r24, r1
    27b0:	18 c0       	rjmp	.+48     	; 0x27e2 <MahonyAHRSupdate+0xfa>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
    27b2:	2f 92       	push	r2
    27b4:	3f 92       	push	r3
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	e9 80       	ldd	r14, Y+1	; 0x01
    27c4:	fa 80       	ldd	r15, Y+2	; 0x02
    27c6:	0b 81       	ldd	r16, Y+3	; 0x03
    27c8:	1c 81       	ldd	r17, Y+4	; 0x04
    27ca:	29 8d       	ldd	r18, Y+25	; 0x19
    27cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27ce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    27d0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    27d2:	69 89       	ldd	r22, Y+17	; 0x11
    27d4:	7a 89       	ldd	r23, Y+18	; 0x12
    27d6:	8b 89       	ldd	r24, Y+19	; 0x13
    27d8:	9c 89       	ldd	r25, Y+20	; 0x14
    27da:	85 da       	rcall	.-2806   	; 0x1ce6 <MahonyAHRSupdateIMU>
		return;
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	a4 c7       	rjmp	.+3912   	; 0x372a <__stack+0x72b>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	a9 01       	movw	r20, r18
    27e8:	c6 01       	movw	r24, r12
    27ea:	b5 01       	movw	r22, r10
    27ec:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    27f0:	81 11       	cpse	r24, r1
    27f2:	17 c0       	rjmp	.+46     	; 0x2822 <MahonyAHRSupdate+0x13a>
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	a9 01       	movw	r20, r18
    27fa:	6f 2d       	mov	r22, r15
    27fc:	7e 2d       	mov	r23, r14
    27fe:	89 2d       	mov	r24, r9
    2800:	98 2d       	mov	r25, r8
    2802:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    2806:	81 11       	cpse	r24, r1
    2808:	0c c0       	rjmp	.+24     	; 0x2822 <MahonyAHRSupdate+0x13a>
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	a9 01       	movw	r20, r18
    2810:	61 2f       	mov	r22, r17
    2812:	70 2f       	mov	r23, r16
    2814:	83 2d       	mov	r24, r3
    2816:	92 2d       	mov	r25, r2
    2818:	0e 94 19 28 	call	0x5032	; 0x5032 <__cmpsf2>
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <MahonyAHRSupdate+0x13a>
    2820:	37 c5       	rjmp	.+2670   	; 0x3290 <__stack+0x291>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    2822:	a6 01       	movw	r20, r12
    2824:	95 01       	movw	r18, r10
    2826:	c6 01       	movw	r24, r12
    2828:	b5 01       	movw	r22, r10
    282a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    282e:	2b 01       	movw	r4, r22
    2830:	3c 01       	movw	r6, r24
    2832:	2f 2d       	mov	r18, r15
    2834:	3e 2d       	mov	r19, r14
    2836:	49 2d       	mov	r20, r9
    2838:	58 2d       	mov	r21, r8
    283a:	6f 2d       	mov	r22, r15
    283c:	7e 2d       	mov	r23, r14
    283e:	89 2d       	mov	r24, r9
    2840:	98 2d       	mov	r25, r8
    2842:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	c3 01       	movw	r24, r6
    284c:	b2 01       	movw	r22, r4
    284e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2852:	2b 01       	movw	r4, r22
    2854:	3c 01       	movw	r6, r24
    2856:	21 2f       	mov	r18, r17
    2858:	30 2f       	mov	r19, r16
    285a:	43 2d       	mov	r20, r3
    285c:	52 2d       	mov	r21, r2
    285e:	61 2f       	mov	r22, r17
    2860:	70 2f       	mov	r23, r16
    2862:	83 2d       	mov	r24, r3
    2864:	92 2d       	mov	r25, r2
    2866:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	c3 01       	movw	r24, r6
    2870:	b2 01       	movw	r22, r4
    2872:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2876:	fc d9       	rcall	.-3080   	; 0x1c70 <invSqrt>
    2878:	2b 01       	movw	r4, r22
    287a:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    287c:	9b 01       	movw	r18, r22
    287e:	ac 01       	movw	r20, r24
    2880:	c6 01       	movw	r24, r12
    2882:	b5 01       	movw	r22, r10
    2884:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2888:	6d ab       	std	Y+53, r22	; 0x35
    288a:	7e ab       	std	Y+54, r23	; 0x36
    288c:	8f ab       	std	Y+55, r24	; 0x37
    288e:	98 af       	std	Y+56, r25	; 0x38
		ay *= recipNorm;
    2890:	a3 01       	movw	r20, r6
    2892:	92 01       	movw	r18, r4
    2894:	6f 2d       	mov	r22, r15
    2896:	7e 2d       	mov	r23, r14
    2898:	89 2d       	mov	r24, r9
    289a:	98 2d       	mov	r25, r8
    289c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    28a0:	69 af       	std	Y+57, r22	; 0x39
    28a2:	7a af       	std	Y+58, r23	; 0x3a
    28a4:	8b af       	std	Y+59, r24	; 0x3b
    28a6:	9c af       	std	Y+60, r25	; 0x3c
		az *= recipNorm;     
    28a8:	a3 01       	movw	r20, r6
    28aa:	92 01       	movw	r18, r4
    28ac:	61 2f       	mov	r22, r17
    28ae:	70 2f       	mov	r23, r16
    28b0:	83 2d       	mov	r24, r3
    28b2:	92 2d       	mov	r25, r2
    28b4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    28b8:	21 96       	adiw	r28, 0x01	; 1
    28ba:	6c af       	std	Y+60, r22	; 0x3c
    28bc:	7d af       	std	Y+61, r23	; 0x3d
    28be:	8e af       	std	Y+62, r24	; 0x3e
    28c0:	9f af       	std	Y+63, r25	; 0x3f
    28c2:	21 97       	sbiw	r28, 0x01	; 1

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    28c4:	e9 96       	adiw	r28, 0x39	; 57
    28c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    28c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    28ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    28cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    28ce:	e9 97       	sbiw	r28, 0x39	; 57
    28d0:	ca 01       	movw	r24, r20
    28d2:	b9 01       	movw	r22, r18
    28d4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    28d8:	6b 01       	movw	r12, r22
    28da:	7c 01       	movw	r14, r24
    28dc:	ed 96       	adiw	r28, 0x3d	; 61
    28de:	2c ad       	ldd	r18, Y+60	; 0x3c
    28e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    28e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    28e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    28e6:	ed 97       	sbiw	r28, 0x3d	; 61
    28e8:	ca 01       	movw	r24, r20
    28ea:	b9 01       	movw	r22, r18
    28ec:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    28f0:	9b 01       	movw	r18, r22
    28f2:	ac 01       	movw	r20, r24
    28f4:	c7 01       	movw	r24, r14
    28f6:	b6 01       	movw	r22, r12
    28f8:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    28fc:	6b 01       	movw	r12, r22
    28fe:	7c 01       	movw	r14, r24
    2900:	c3 58       	subi	r28, 0x83	; 131
    2902:	df 4f       	sbci	r29, 0xFF	; 255
    2904:	28 81       	ld	r18, Y
    2906:	39 81       	ldd	r19, Y+1	; 0x01
    2908:	4a 81       	ldd	r20, Y+2	; 0x02
    290a:	5b 81       	ldd	r21, Y+3	; 0x03
    290c:	cd 57       	subi	r28, 0x7D	; 125
    290e:	d0 40       	sbci	r29, 0x00	; 0
    2910:	ca 01       	movw	r24, r20
    2912:	b9 01       	movw	r22, r18
    2914:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	c7 01       	movw	r24, r14
    291e:	b6 01       	movw	r22, r12
    2920:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2924:	a5 d9       	rcall	.-3254   	; 0x1c70 <invSqrt>
    2926:	6b 01       	movw	r12, r22
    2928:	7c 01       	movw	r14, r24
		mx *= recipNorm;
    292a:	9b 01       	movw	r18, r22
    292c:	ac 01       	movw	r20, r24
    292e:	e9 96       	adiw	r28, 0x39	; 57
    2930:	6c ad       	ldd	r22, Y+60	; 0x3c
    2932:	7d ad       	ldd	r23, Y+61	; 0x3d
    2934:	8e ad       	ldd	r24, Y+62	; 0x3e
    2936:	9f ad       	ldd	r25, Y+63	; 0x3f
    2938:	e9 97       	sbiw	r28, 0x39	; 57
    293a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    293e:	6d 83       	std	Y+5, r22	; 0x05
    2940:	7e 83       	std	Y+6, r23	; 0x06
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
		my *= recipNorm;
    2946:	a7 01       	movw	r20, r14
    2948:	96 01       	movw	r18, r12
    294a:	ed 96       	adiw	r28, 0x3d	; 61
    294c:	6c ad       	ldd	r22, Y+60	; 0x3c
    294e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2950:	8e ad       	ldd	r24, Y+62	; 0x3e
    2952:	9f ad       	ldd	r25, Y+63	; 0x3f
    2954:	ed 97       	sbiw	r28, 0x3d	; 61
    2956:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    295a:	69 87       	std	Y+9, r22	; 0x09
    295c:	7a 87       	std	Y+10, r23	; 0x0a
    295e:	8b 87       	std	Y+11, r24	; 0x0b
    2960:	9c 87       	std	Y+12, r25	; 0x0c
		mz *= recipNorm;   
    2962:	a7 01       	movw	r20, r14
    2964:	96 01       	movw	r18, r12
    2966:	c3 58       	subi	r28, 0x83	; 131
    2968:	df 4f       	sbci	r29, 0xFF	; 255
    296a:	68 81       	ld	r22, Y
    296c:	79 81       	ldd	r23, Y+1	; 0x01
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	cd 57       	subi	r28, 0x7D	; 125
    2974:	d0 40       	sbci	r29, 0x00	; 0
    2976:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    297a:	6d 87       	std	Y+13, r22	; 0x0d
    297c:	7e 87       	std	Y+14, r23	; 0x0e
    297e:	8f 87       	std	Y+15, r24	; 0x0f
    2980:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    2982:	40 90 14 20 	lds	r4, 0x2014	; 0x802014 <q0>
    2986:	50 90 15 20 	lds	r5, 0x2015	; 0x802015 <q0+0x1>
    298a:	60 90 16 20 	lds	r6, 0x2016	; 0x802016 <q0+0x2>
    298e:	70 90 17 20 	lds	r7, 0x2017	; 0x802017 <q0+0x3>
    2992:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    2996:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    299a:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    299e:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    29a2:	69 96       	adiw	r28, 0x19	; 25
    29a4:	ec ae       	std	Y+60, r14	; 0x3c
    29a6:	fd ae       	std	Y+61, r15	; 0x3d
    29a8:	0e af       	std	Y+62, r16	; 0x3e
    29aa:	1f af       	std	Y+63, r17	; 0x3f
    29ac:	69 97       	sbiw	r28, 0x19	; 25
        q0q1 = q0 * q1;
    29ae:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    29b2:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    29b6:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    29ba:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    29be:	20 91 07 22 	lds	r18, 0x2207	; 0x802207 <q1>
    29c2:	30 91 08 22 	lds	r19, 0x2208	; 0x802208 <q1+0x1>
    29c6:	40 91 09 22 	lds	r20, 0x2209	; 0x802209 <q1+0x2>
    29ca:	50 91 0a 22 	lds	r21, 0x220A	; 0x80220a <q1+0x3>
    29ce:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    29d2:	69 a3       	std	Y+33, r22	; 0x21
    29d4:	7a a3       	std	Y+34, r23	; 0x22
    29d6:	8b a3       	std	Y+35, r24	; 0x23
    29d8:	9c a3       	std	Y+36, r25	; 0x24
        q0q2 = q0 * q2;
    29da:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    29de:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    29e2:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    29e6:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    29ea:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <q2>
    29ee:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <q2+0x1>
    29f2:	40 91 05 22 	lds	r20, 0x2205	; 0x802205 <q2+0x2>
    29f6:	50 91 06 22 	lds	r21, 0x2206	; 0x802206 <q2+0x3>
    29fa:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    29fe:	6d 8f       	std	Y+29, r22	; 0x1d
    2a00:	7e 8f       	std	Y+30, r23	; 0x1e
    2a02:	8f 8f       	std	Y+31, r24	; 0x1f
    2a04:	98 a3       	std	Y+32, r25	; 0x20
        q0q3 = q0 * q3;
    2a06:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    2a0a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    2a0e:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    2a12:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    2a16:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    2a1a:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    2a1e:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    2a22:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    2a26:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2a2a:	6d 8b       	std	Y+21, r22	; 0x15
    2a2c:	7e 8b       	std	Y+22, r23	; 0x16
    2a2e:	8f 8b       	std	Y+23, r24	; 0x17
    2a30:	98 8f       	std	Y+24, r25	; 0x18
        q1q1 = q1 * q1;
    2a32:	c0 90 07 22 	lds	r12, 0x2207	; 0x802207 <q1>
    2a36:	d0 90 08 22 	lds	r13, 0x2208	; 0x802208 <q1+0x1>
    2a3a:	e0 90 09 22 	lds	r14, 0x2209	; 0x802209 <q1+0x2>
    2a3e:	f0 90 0a 22 	lds	r15, 0x220A	; 0x80220a <q1+0x3>
    2a42:	80 91 07 22 	lds	r24, 0x2207	; 0x802207 <q1>
    2a46:	90 91 08 22 	lds	r25, 0x2208	; 0x802208 <q1+0x1>
    2a4a:	a0 91 09 22 	lds	r26, 0x2209	; 0x802209 <q1+0x2>
    2a4e:	b0 91 0a 22 	lds	r27, 0x220A	; 0x80220a <q1+0x3>
    2a52:	89 ab       	std	Y+49, r24	; 0x31
    2a54:	9a ab       	std	Y+50, r25	; 0x32
    2a56:	ab ab       	std	Y+51, r26	; 0x33
    2a58:	bc ab       	std	Y+52, r27	; 0x34
        q1q2 = q1 * q2;
    2a5a:	60 91 07 22 	lds	r22, 0x2207	; 0x802207 <q1>
    2a5e:	70 91 08 22 	lds	r23, 0x2208	; 0x802208 <q1+0x1>
    2a62:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <q1+0x2>
    2a66:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <q1+0x3>
    2a6a:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <q2>
    2a6e:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <q2+0x1>
    2a72:	40 91 05 22 	lds	r20, 0x2205	; 0x802205 <q2+0x2>
    2a76:	50 91 06 22 	lds	r21, 0x2206	; 0x802206 <q2+0x3>
    2a7a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2a7e:	69 a7       	std	Y+41, r22	; 0x29
    2a80:	7a a7       	std	Y+42, r23	; 0x2a
    2a82:	8b a7       	std	Y+43, r24	; 0x2b
    2a84:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    2a86:	60 91 07 22 	lds	r22, 0x2207	; 0x802207 <q1>
    2a8a:	70 91 08 22 	lds	r23, 0x2208	; 0x802208 <q1+0x1>
    2a8e:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <q1+0x2>
    2a92:	90 91 0a 22 	lds	r25, 0x220A	; 0x80220a <q1+0x3>
    2a96:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    2a9a:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    2a9e:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    2aa2:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    2aa6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2aaa:	6d a7       	std	Y+45, r22	; 0x2d
    2aac:	7e a7       	std	Y+46, r23	; 0x2e
    2aae:	8f a7       	std	Y+47, r24	; 0x2f
    2ab0:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    2ab2:	60 91 03 22 	lds	r22, 0x2203	; 0x802203 <q2>
    2ab6:	70 91 04 22 	lds	r23, 0x2204	; 0x802204 <q2+0x1>
    2aba:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <q2+0x2>
    2abe:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <q2+0x3>
    2ac2:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <q2>
    2ac6:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <q2+0x1>
    2aca:	40 91 05 22 	lds	r20, 0x2205	; 0x802205 <q2+0x2>
    2ace:	50 91 06 22 	lds	r21, 0x2206	; 0x802206 <q2+0x3>
    2ad2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2ad6:	25 96       	adiw	r28, 0x05	; 5
    2ad8:	6c af       	std	Y+60, r22	; 0x3c
    2ada:	7d af       	std	Y+61, r23	; 0x3d
    2adc:	8e af       	std	Y+62, r24	; 0x3e
    2ade:	9f af       	std	Y+63, r25	; 0x3f
    2ae0:	25 97       	sbiw	r28, 0x05	; 5
        q2q3 = q2 * q3;
    2ae2:	60 91 03 22 	lds	r22, 0x2203	; 0x802203 <q2>
    2ae6:	70 91 04 22 	lds	r23, 0x2204	; 0x802204 <q2+0x1>
    2aea:	80 91 05 22 	lds	r24, 0x2205	; 0x802205 <q2+0x2>
    2aee:	90 91 06 22 	lds	r25, 0x2206	; 0x802206 <q2+0x3>
    2af2:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    2af6:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    2afa:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    2afe:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    2b02:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2b06:	29 96       	adiw	r28, 0x09	; 9
    2b08:	6c af       	std	Y+60, r22	; 0x3c
    2b0a:	7d af       	std	Y+61, r23	; 0x3d
    2b0c:	8e af       	std	Y+62, r24	; 0x3e
    2b0e:	9f af       	std	Y+63, r25	; 0x3f
    2b10:	29 97       	sbiw	r28, 0x09	; 9
        q3q3 = q3 * q3;   
    2b12:	60 91 ff 21 	lds	r22, 0x21FF	; 0x8021ff <q3>
    2b16:	70 91 00 22 	lds	r23, 0x2200	; 0x802200 <q3+0x1>
    2b1a:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <q3+0x2>
    2b1e:	90 91 02 22 	lds	r25, 0x2202	; 0x802202 <q3+0x3>
    2b22:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    2b26:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    2b2a:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    2b2e:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    2b32:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2b36:	6d a3       	std	Y+37, r22	; 0x25
    2b38:	7e a3       	std	Y+38, r23	; 0x26
    2b3a:	8f a3       	std	Y+39, r24	; 0x27
    2b3c:	98 a7       	std	Y+40, r25	; 0x28

        // Reference direction of Earth's magnetic field
        hx = 2.0 * (mx * (0.5 - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    2b3e:	25 96       	adiw	r28, 0x05	; 5
    2b40:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b42:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b44:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b46:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b48:	25 97       	sbiw	r28, 0x05	; 5
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	9f e3       	ldi	r25, 0x3F	; 63
    2b52:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2b56:	2d a1       	ldd	r18, Y+37	; 0x25
    2b58:	3e a1       	ldd	r19, Y+38	; 0x26
    2b5a:	4f a1       	ldd	r20, Y+39	; 0x27
    2b5c:	58 a5       	ldd	r21, Y+40	; 0x28
    2b5e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2b62:	2d 96       	adiw	r28, 0x0d	; 13
    2b64:	6c af       	std	Y+60, r22	; 0x3c
    2b66:	7d af       	std	Y+61, r23	; 0x3d
    2b68:	8e af       	std	Y+62, r24	; 0x3e
    2b6a:	9f af       	std	Y+63, r25	; 0x3f
    2b6c:	2d 97       	sbiw	r28, 0x0d	; 13
    2b6e:	2d 89       	ldd	r18, Y+21	; 0x15
    2b70:	3e 89       	ldd	r19, Y+22	; 0x16
    2b72:	4f 89       	ldd	r20, Y+23	; 0x17
    2b74:	58 8d       	ldd	r21, Y+24	; 0x18
    2b76:	69 a5       	ldd	r22, Y+41	; 0x29
    2b78:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b7e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2b82:	61 96       	adiw	r28, 0x11	; 17
    2b84:	6c af       	std	Y+60, r22	; 0x3c
    2b86:	7d af       	std	Y+61, r23	; 0x3d
    2b88:	8e af       	std	Y+62, r24	; 0x3e
    2b8a:	9f af       	std	Y+63, r25	; 0x3f
    2b8c:	61 97       	sbiw	r28, 0x11	; 17
    2b8e:	2d a5       	ldd	r18, Y+45	; 0x2d
    2b90:	3e a5       	ldd	r19, Y+46	; 0x2e
    2b92:	4f a5       	ldd	r20, Y+47	; 0x2f
    2b94:	58 a9       	ldd	r21, Y+48	; 0x30
    2b96:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b98:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2b9e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2ba2:	65 96       	adiw	r28, 0x15	; 21
    2ba4:	6c af       	std	Y+60, r22	; 0x3c
    2ba6:	7d af       	std	Y+61, r23	; 0x3d
    2ba8:	8e af       	std	Y+62, r24	; 0x3e
    2baa:	9f af       	std	Y+63, r25	; 0x3f
    2bac:	65 97       	sbiw	r28, 0x15	; 21
    2bae:	2d 96       	adiw	r28, 0x0d	; 13
    2bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    2bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    2bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    2bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bb8:	2d 97       	sbiw	r28, 0x0d	; 13
    2bba:	6d 81       	ldd	r22, Y+5	; 0x05
    2bbc:	7e 81       	ldd	r23, Y+6	; 0x06
    2bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc0:	98 85       	ldd	r25, Y+8	; 0x08
    2bc2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2bc6:	4b 01       	movw	r8, r22
    2bc8:	5c 01       	movw	r10, r24
    2bca:	61 96       	adiw	r28, 0x11	; 17
    2bcc:	2c ad       	ldd	r18, Y+60	; 0x3c
    2bce:	3d ad       	ldd	r19, Y+61	; 0x3d
    2bd0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2bd2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bd4:	61 97       	sbiw	r28, 0x11	; 17
    2bd6:	69 85       	ldd	r22, Y+9	; 0x09
    2bd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bda:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bde:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2be2:	9b 01       	movw	r18, r22
    2be4:	ac 01       	movw	r20, r24
    2be6:	c5 01       	movw	r24, r10
    2be8:	b4 01       	movw	r22, r8
    2bea:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2bee:	4b 01       	movw	r8, r22
    2bf0:	5c 01       	movw	r10, r24
    2bf2:	65 96       	adiw	r28, 0x15	; 21
    2bf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2bf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2bf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2bfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bfc:	65 97       	sbiw	r28, 0x15	; 21
    2bfe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c00:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c04:	98 89       	ldd	r25, Y+16	; 0x10
    2c06:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	c5 01       	movw	r24, r10
    2c10:	b4 01       	movw	r22, r8
    2c12:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2c16:	9b 01       	movw	r18, r22
    2c18:	ac 01       	movw	r20, r24
    2c1a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2c1e:	4b 01       	movw	r8, r22
    2c20:	5c 01       	movw	r10, r24
        hy = 2.0 * (mx * (q1q2 + q0q3) + my * (0.5 - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    2c22:	29 a9       	ldd	r18, Y+49	; 0x31
    2c24:	3a a9       	ldd	r19, Y+50	; 0x32
    2c26:	4b a9       	ldd	r20, Y+51	; 0x33
    2c28:	5c a9       	ldd	r21, Y+52	; 0x34
    2c2a:	c7 01       	movw	r24, r14
    2c2c:	b6 01       	movw	r22, r12
    2c2e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	70 e0       	ldi	r23, 0x00	; 0
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	9f e3       	ldi	r25, 0x3F	; 63
    2c3e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2c42:	69 ab       	std	Y+49, r22	; 0x31
    2c44:	7a ab       	std	Y+50, r23	; 0x32
    2c46:	8b ab       	std	Y+51, r24	; 0x33
    2c48:	9c ab       	std	Y+52, r25	; 0x34
    2c4a:	29 a5       	ldd	r18, Y+41	; 0x29
    2c4c:	3a a5       	ldd	r19, Y+42	; 0x2a
    2c4e:	4b a5       	ldd	r20, Y+43	; 0x2b
    2c50:	5c a5       	ldd	r21, Y+44	; 0x2c
    2c52:	6d 89       	ldd	r22, Y+21	; 0x15
    2c54:	7e 89       	ldd	r23, Y+22	; 0x16
    2c56:	8f 89       	ldd	r24, Y+23	; 0x17
    2c58:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2c5e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c60:	3e 81       	ldd	r19, Y+6	; 0x06
    2c62:	4f 81       	ldd	r20, Y+7	; 0x07
    2c64:	58 85       	ldd	r21, Y+8	; 0x08
    2c66:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2c6a:	6b 01       	movw	r12, r22
    2c6c:	7c 01       	movw	r14, r24
    2c6e:	2d a1       	ldd	r18, Y+37	; 0x25
    2c70:	3e a1       	ldd	r19, Y+38	; 0x26
    2c72:	4f a1       	ldd	r20, Y+39	; 0x27
    2c74:	58 a5       	ldd	r21, Y+40	; 0x28
    2c76:	69 a9       	ldd	r22, Y+49	; 0x31
    2c78:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2c82:	29 85       	ldd	r18, Y+9	; 0x09
    2c84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c86:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c88:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c8a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	c7 01       	movw	r24, r14
    2c94:	b6 01       	movw	r22, r12
    2c96:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2c9a:	6b 01       	movw	r12, r22
    2c9c:	7c 01       	movw	r14, r24
    2c9e:	29 a1       	ldd	r18, Y+33	; 0x21
    2ca0:	3a a1       	ldd	r19, Y+34	; 0x22
    2ca2:	4b a1       	ldd	r20, Y+35	; 0x23
    2ca4:	5c a1       	ldd	r21, Y+36	; 0x24
    2ca6:	29 96       	adiw	r28, 0x09	; 9
    2ca8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2caa:	7d ad       	ldd	r23, Y+61	; 0x3d
    2cac:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cb0:	29 97       	sbiw	r28, 0x09	; 9
    2cb2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2cb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cba:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cbc:	58 89       	ldd	r21, Y+16	; 0x10
    2cbe:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2cc2:	9b 01       	movw	r18, r22
    2cc4:	ac 01       	movw	r20, r24
    2cc6:	c7 01       	movw	r24, r14
    2cc8:	b6 01       	movw	r22, r12
    2cca:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2cce:	9b 01       	movw	r18, r22
    2cd0:	ac 01       	movw	r20, r24
    2cd2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2cd6:	6b 01       	movw	r12, r22
    2cd8:	7c 01       	movw	r14, r24
        bx = sqrt(hx * hx + hy * hy);
    2cda:	a5 01       	movw	r20, r10
    2cdc:	94 01       	movw	r18, r8
    2cde:	c5 01       	movw	r24, r10
    2ce0:	b4 01       	movw	r22, r8
    2ce2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2ce6:	6d 8b       	std	Y+21, r22	; 0x15
    2ce8:	7e 8b       	std	Y+22, r23	; 0x16
    2cea:	8f 8b       	std	Y+23, r24	; 0x17
    2cec:	98 8f       	std	Y+24, r25	; 0x18
    2cee:	a5 01       	movw	r20, r10
    2cf0:	94 01       	movw	r18, r8
    2cf2:	c5 01       	movw	r24, r10
    2cf4:	b4 01       	movw	r22, r8
    2cf6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2cfa:	4b 01       	movw	r8, r22
    2cfc:	5c 01       	movw	r10, r24
    2cfe:	a7 01       	movw	r20, r14
    2d00:	96 01       	movw	r18, r12
    2d02:	c7 01       	movw	r24, r14
    2d04:	b6 01       	movw	r22, r12
    2d06:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	c5 01       	movw	r24, r10
    2d10:	b4 01       	movw	r22, r8
    2d12:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2d16:	0e 94 2b 2a 	call	0x5456	; 0x5456 <sqrt>
    2d1a:	4b 01       	movw	r8, r22
    2d1c:	5c 01       	movw	r10, r24
        bz = 2.0 * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5 - q1q1 - q2q2));
    2d1e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d20:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d22:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d24:	58 a1       	ldd	r21, Y+32	; 0x20
    2d26:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d28:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2d32:	6d 8f       	std	Y+29, r22	; 0x1d
    2d34:	7e 8f       	std	Y+30, r23	; 0x1e
    2d36:	8f 8f       	std	Y+31, r24	; 0x1f
    2d38:	98 a3       	std	Y+32, r25	; 0x20
    2d3a:	29 96       	adiw	r28, 0x09	; 9
    2d3c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d3e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d40:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d42:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d44:	29 97       	sbiw	r28, 0x09	; 9
    2d46:	69 a1       	ldd	r22, Y+33	; 0x21
    2d48:	7a a1       	ldd	r23, Y+34	; 0x22
    2d4a:	8b a1       	ldd	r24, Y+35	; 0x23
    2d4c:	9c a1       	ldd	r25, Y+36	; 0x24
    2d4e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2d52:	69 a3       	std	Y+33, r22	; 0x21
    2d54:	7a a3       	std	Y+34, r23	; 0x22
    2d56:	8b a3       	std	Y+35, r24	; 0x23
    2d58:	9c a3       	std	Y+36, r25	; 0x24
    2d5a:	25 96       	adiw	r28, 0x05	; 5
    2d5c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d5e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d60:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d62:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d64:	25 97       	sbiw	r28, 0x05	; 5
    2d66:	69 a9       	ldd	r22, Y+49	; 0x31
    2d68:	7a a9       	ldd	r23, Y+50	; 0x32
    2d6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d6e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2d72:	6d 8b       	std	Y+21, r22	; 0x15
    2d74:	7e 8b       	std	Y+22, r23	; 0x16
    2d76:	8f 8b       	std	Y+23, r24	; 0x17
    2d78:	98 8f       	std	Y+24, r25	; 0x18
    2d7a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d7c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d7e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2d80:	58 a1       	ldd	r21, Y+32	; 0x20
    2d82:	6d 81       	ldd	r22, Y+5	; 0x05
    2d84:	7e 81       	ldd	r23, Y+6	; 0x06
    2d86:	8f 81       	ldd	r24, Y+7	; 0x07
    2d88:	98 85       	ldd	r25, Y+8	; 0x08
    2d8a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2d8e:	6b 01       	movw	r12, r22
    2d90:	7c 01       	movw	r14, r24
    2d92:	29 a1       	ldd	r18, Y+33	; 0x21
    2d94:	3a a1       	ldd	r19, Y+34	; 0x22
    2d96:	4b a1       	ldd	r20, Y+35	; 0x23
    2d98:	5c a1       	ldd	r21, Y+36	; 0x24
    2d9a:	69 85       	ldd	r22, Y+9	; 0x09
    2d9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	c7 01       	movw	r24, r14
    2dac:	b6 01       	movw	r22, r12
    2dae:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2db2:	6b 01       	movw	r12, r22
    2db4:	7c 01       	movw	r14, r24
    2db6:	2d 89       	ldd	r18, Y+21	; 0x15
    2db8:	3e 89       	ldd	r19, Y+22	; 0x16
    2dba:	4f 89       	ldd	r20, Y+23	; 0x17
    2dbc:	58 8d       	ldd	r21, Y+24	; 0x18
    2dbe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2dc0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc4:	98 89       	ldd	r25, Y+16	; 0x10
    2dc6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2dca:	9b 01       	movw	r18, r22
    2dcc:	ac 01       	movw	r20, r24
    2dce:	c7 01       	movw	r24, r14
    2dd0:	b6 01       	movw	r22, r12
    2dd2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2dd6:	9b 01       	movw	r18, r22
    2dd8:	ac 01       	movw	r20, r24
    2dda:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2dde:	6b 01       	movw	r12, r22
    2de0:	7c 01       	movw	r14, r24

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5 + q3q3;
    2de2:	69 96       	adiw	r28, 0x19	; 25
    2de4:	2c ad       	ldd	r18, Y+60	; 0x3c
    2de6:	3d ad       	ldd	r19, Y+61	; 0x3d
    2de8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2dea:	5f ad       	ldd	r21, Y+63	; 0x3f
    2dec:	69 97       	sbiw	r28, 0x19	; 25
    2dee:	c3 01       	movw	r24, r6
    2df0:	b2 01       	movw	r22, r4
    2df2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2e02:	2d a1       	ldd	r18, Y+37	; 0x25
    2e04:	3e a1       	ldd	r19, Y+38	; 0x26
    2e06:	4f a1       	ldd	r20, Y+39	; 0x27
    2e08:	58 a5       	ldd	r21, Y+40	; 0x28
    2e0a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2e0e:	6d a3       	std	Y+37, r22	; 0x25
    2e10:	7e a3       	std	Y+38, r23	; 0x26
    2e12:	8f a3       	std	Y+39, r24	; 0x27
    2e14:	98 a7       	std	Y+40, r25	; 0x28
        halfwx = bx * (0.5 - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    2e16:	a5 01       	movw	r20, r10
    2e18:	94 01       	movw	r18, r8
    2e1a:	2d 96       	adiw	r28, 0x0d	; 13
    2e1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e20:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e22:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e24:	2d 97       	sbiw	r28, 0x0d	; 13
    2e26:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2e2a:	2b 01       	movw	r4, r22
    2e2c:	3c 01       	movw	r6, r24
    2e2e:	a7 01       	movw	r20, r14
    2e30:	96 01       	movw	r18, r12
    2e32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2e34:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e38:	98 a1       	ldd	r25, Y+32	; 0x20
    2e3a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2e3e:	9b 01       	movw	r18, r22
    2e40:	ac 01       	movw	r20, r24
    2e42:	c3 01       	movw	r24, r6
    2e44:	b2 01       	movw	r22, r4
    2e46:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2e4a:	69 a7       	std	Y+41, r22	; 0x29
    2e4c:	7a a7       	std	Y+42, r23	; 0x2a
    2e4e:	8b a7       	std	Y+43, r24	; 0x2b
    2e50:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    2e52:	a5 01       	movw	r20, r10
    2e54:	94 01       	movw	r18, r8
    2e56:	61 96       	adiw	r28, 0x11	; 17
    2e58:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e60:	61 97       	sbiw	r28, 0x11	; 17
    2e62:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2e66:	2b 01       	movw	r4, r22
    2e68:	3c 01       	movw	r6, r24
    2e6a:	a7 01       	movw	r20, r14
    2e6c:	96 01       	movw	r18, r12
    2e6e:	69 a1       	ldd	r22, Y+33	; 0x21
    2e70:	7a a1       	ldd	r23, Y+34	; 0x22
    2e72:	8b a1       	ldd	r24, Y+35	; 0x23
    2e74:	9c a1       	ldd	r25, Y+36	; 0x24
    2e76:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2e7a:	9b 01       	movw	r18, r22
    2e7c:	ac 01       	movw	r20, r24
    2e7e:	c3 01       	movw	r24, r6
    2e80:	b2 01       	movw	r22, r4
    2e82:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2e86:	6d a7       	std	Y+45, r22	; 0x2d
    2e88:	7e a7       	std	Y+46, r23	; 0x2e
    2e8a:	8f a7       	std	Y+47, r24	; 0x2f
    2e8c:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5 - q1q1 - q2q2);  
    2e8e:	a5 01       	movw	r20, r10
    2e90:	94 01       	movw	r18, r8
    2e92:	65 96       	adiw	r28, 0x15	; 21
    2e94:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e96:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e9c:	65 97       	sbiw	r28, 0x15	; 21
    2e9e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2ea2:	2b 01       	movw	r4, r22
    2ea4:	3c 01       	movw	r6, r24
    2ea6:	a7 01       	movw	r20, r14
    2ea8:	96 01       	movw	r18, r12
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2eb6:	9b 01       	movw	r18, r22
    2eb8:	ac 01       	movw	r20, r24
    2eba:	c3 01       	movw	r24, r6
    2ebc:	b2 01       	movw	r22, r4
    2ebe:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2ec2:	6b 01       	movw	r12, r22
    2ec4:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    2ec6:	2d a1       	ldd	r18, Y+37	; 0x25
    2ec8:	3e a1       	ldd	r19, Y+38	; 0x26
    2eca:	4f a1       	ldd	r20, Y+39	; 0x27
    2ecc:	58 a5       	ldd	r21, Y+40	; 0x28
    2ece:	69 ad       	ldd	r22, Y+57	; 0x39
    2ed0:	7a ad       	ldd	r23, Y+58	; 0x3a
    2ed2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ed4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ed6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2eda:	4b 01       	movw	r8, r22
    2edc:	5c 01       	movw	r10, r24
    2ede:	29 a1       	ldd	r18, Y+33	; 0x21
    2ee0:	3a a1       	ldd	r19, Y+34	; 0x22
    2ee2:	4b a1       	ldd	r20, Y+35	; 0x23
    2ee4:	5c a1       	ldd	r21, Y+36	; 0x24
    2ee6:	21 96       	adiw	r28, 0x01	; 1
    2ee8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eea:	7d ad       	ldd	r23, Y+61	; 0x3d
    2eec:	8e ad       	ldd	r24, Y+62	; 0x3e
    2eee:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef0:	21 97       	sbiw	r28, 0x01	; 1
    2ef2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2ef6:	9b 01       	movw	r18, r22
    2ef8:	ac 01       	movw	r20, r24
    2efa:	c5 01       	movw	r24, r10
    2efc:	b4 01       	movw	r22, r8
    2efe:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2f02:	4b 01       	movw	r8, r22
    2f04:	5c 01       	movw	r10, r24
    2f06:	a7 01       	movw	r20, r14
    2f08:	96 01       	movw	r18, r12
    2f0a:	69 85       	ldd	r22, Y+9	; 0x09
    2f0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f12:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2f16:	2b 01       	movw	r4, r22
    2f18:	3c 01       	movw	r6, r24
    2f1a:	2d a5       	ldd	r18, Y+45	; 0x2d
    2f1c:	3e a5       	ldd	r19, Y+46	; 0x2e
    2f1e:	4f a5       	ldd	r20, Y+47	; 0x2f
    2f20:	58 a9       	ldd	r21, Y+48	; 0x30
    2f22:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f24:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f28:	98 89       	ldd	r25, Y+16	; 0x10
    2f2a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2f2e:	9b 01       	movw	r18, r22
    2f30:	ac 01       	movw	r20, r24
    2f32:	c3 01       	movw	r24, r6
    2f34:	b2 01       	movw	r22, r4
    2f36:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2f3a:	9b 01       	movw	r18, r22
    2f3c:	ac 01       	movw	r20, r24
    2f3e:	c5 01       	movw	r24, r10
    2f40:	b4 01       	movw	r22, r8
    2f42:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2f46:	6d 8b       	std	Y+21, r22	; 0x15
    2f48:	7e 8b       	std	Y+22, r23	; 0x16
    2f4a:	8f 8b       	std	Y+23, r24	; 0x17
    2f4c:	98 8f       	std	Y+24, r25	; 0x18
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    2f4e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2f50:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2f52:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2f54:	58 a1       	ldd	r21, Y+32	; 0x20
    2f56:	21 96       	adiw	r28, 0x01	; 1
    2f58:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f5a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f60:	21 97       	sbiw	r28, 0x01	; 1
    2f62:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2f66:	4b 01       	movw	r8, r22
    2f68:	5c 01       	movw	r10, r24
    2f6a:	2d a1       	ldd	r18, Y+37	; 0x25
    2f6c:	3e a1       	ldd	r19, Y+38	; 0x26
    2f6e:	4f a1       	ldd	r20, Y+39	; 0x27
    2f70:	58 a5       	ldd	r21, Y+40	; 0x28
    2f72:	6d a9       	ldd	r22, Y+53	; 0x35
    2f74:	7e a9       	ldd	r23, Y+54	; 0x36
    2f76:	8f a9       	ldd	r24, Y+55	; 0x37
    2f78:	98 ad       	ldd	r25, Y+56	; 0x38
    2f7a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2f7e:	9b 01       	movw	r18, r22
    2f80:	ac 01       	movw	r20, r24
    2f82:	c5 01       	movw	r24, r10
    2f84:	b4 01       	movw	r22, r8
    2f86:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2f8a:	4b 01       	movw	r8, r22
    2f8c:	5c 01       	movw	r10, r24
    2f8e:	29 a5       	ldd	r18, Y+41	; 0x29
    2f90:	3a a5       	ldd	r19, Y+42	; 0x2a
    2f92:	4b a5       	ldd	r20, Y+43	; 0x2b
    2f94:	5c a5       	ldd	r21, Y+44	; 0x2c
    2f96:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f98:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9c:	98 89       	ldd	r25, Y+16	; 0x10
    2f9e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2fa2:	2b 01       	movw	r4, r22
    2fa4:	3c 01       	movw	r6, r24
    2fa6:	a7 01       	movw	r20, r14
    2fa8:	96 01       	movw	r18, r12
    2faa:	6d 81       	ldd	r22, Y+5	; 0x05
    2fac:	7e 81       	ldd	r23, Y+6	; 0x06
    2fae:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb0:	98 85       	ldd	r25, Y+8	; 0x08
    2fb2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2fb6:	9b 01       	movw	r18, r22
    2fb8:	ac 01       	movw	r20, r24
    2fba:	c3 01       	movw	r24, r6
    2fbc:	b2 01       	movw	r22, r4
    2fbe:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	c5 01       	movw	r24, r10
    2fc8:	b4 01       	movw	r22, r8
    2fca:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    2fce:	4b 01       	movw	r8, r22
    2fd0:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    2fd2:	29 a1       	ldd	r18, Y+33	; 0x21
    2fd4:	3a a1       	ldd	r19, Y+34	; 0x22
    2fd6:	4b a1       	ldd	r20, Y+35	; 0x23
    2fd8:	5c a1       	ldd	r21, Y+36	; 0x24
    2fda:	6d a9       	ldd	r22, Y+53	; 0x35
    2fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fde:	8f a9       	ldd	r24, Y+55	; 0x37
    2fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fe2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2fe6:	6b 01       	movw	r12, r22
    2fe8:	7c 01       	movw	r14, r24
    2fea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2fec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2fee:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2ff0:	58 a1       	ldd	r21, Y+32	; 0x20
    2ff2:	69 ad       	ldd	r22, Y+57	; 0x39
    2ff4:	7a ad       	ldd	r23, Y+58	; 0x3a
    2ff6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ffa:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    2ffe:	9b 01       	movw	r18, r22
    3000:	ac 01       	movw	r20, r24
    3002:	c7 01       	movw	r24, r14
    3004:	b6 01       	movw	r22, r12
    3006:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    300a:	6b 01       	movw	r12, r22
    300c:	7c 01       	movw	r14, r24
    300e:	2d a5       	ldd	r18, Y+45	; 0x2d
    3010:	3e a5       	ldd	r19, Y+46	; 0x2e
    3012:	4f a5       	ldd	r20, Y+47	; 0x2f
    3014:	58 a9       	ldd	r21, Y+48	; 0x30
    3016:	6d 81       	ldd	r22, Y+5	; 0x05
    3018:	7e 81       	ldd	r23, Y+6	; 0x06
    301a:	8f 81       	ldd	r24, Y+7	; 0x07
    301c:	98 85       	ldd	r25, Y+8	; 0x08
    301e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3022:	2b 01       	movw	r4, r22
    3024:	3c 01       	movw	r6, r24
    3026:	29 a5       	ldd	r18, Y+41	; 0x29
    3028:	3a a5       	ldd	r19, Y+42	; 0x2a
    302a:	4b a5       	ldd	r20, Y+43	; 0x2b
    302c:	5c a5       	ldd	r21, Y+44	; 0x2c
    302e:	69 85       	ldd	r22, Y+9	; 0x09
    3030:	7a 85       	ldd	r23, Y+10	; 0x0a
    3032:	8b 85       	ldd	r24, Y+11	; 0x0b
    3034:	9c 85       	ldd	r25, Y+12	; 0x0c
    3036:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    303a:	9b 01       	movw	r18, r22
    303c:	ac 01       	movw	r20, r24
    303e:	c3 01       	movw	r24, r6
    3040:	b2 01       	movw	r22, r4
    3042:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3046:	9b 01       	movw	r18, r22
    3048:	ac 01       	movw	r20, r24
    304a:	c7 01       	movw	r24, r14
    304c:	b6 01       	movw	r22, r12
    304e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3052:	6b 01       	movw	r12, r22
    3054:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    3056:	60 91 0b 22 	lds	r22, 0x220B	; 0x80220b <twoKi>
    305a:	70 91 0c 22 	lds	r23, 0x220C	; 0x80220c <twoKi+0x1>
    305e:	80 91 0d 22 	lds	r24, 0x220D	; 0x80220d <twoKi+0x2>
    3062:	90 91 0e 22 	lds	r25, 0x220E	; 0x80220e <twoKi+0x3>
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	a9 01       	movw	r20, r18
    306c:	0e 94 b9 29 	call	0x5372	; 0x5372 <__gesf2>
    3070:	18 16       	cp	r1, r24
    3072:	0c f0       	brlt	.+2      	; 0x3076 <__stack+0x77>
    3074:	ab c0       	rjmp	.+342    	; 0x31cc <__stack+0x1cd>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    3076:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    307a:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    307e:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    3082:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    3086:	40 90 fb 21 	lds	r4, 0x21FB	; 0x8021fb <integralFBx>
    308a:	50 90 fc 21 	lds	r5, 0x21FC	; 0x8021fc <integralFBx+0x1>
    308e:	60 90 fd 21 	lds	r6, 0x21FD	; 0x8021fd <integralFBx+0x2>
    3092:	70 90 fe 21 	lds	r7, 0x21FE	; 0x8021fe <integralFBx+0x3>
    3096:	6d 89       	ldd	r22, Y+21	; 0x15
    3098:	7e 89       	ldd	r23, Y+22	; 0x16
    309a:	8f 89       	ldd	r24, Y+23	; 0x17
    309c:	98 8d       	ldd	r25, Y+24	; 0x18
    309e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    30a2:	2a ef       	ldi	r18, 0xFA	; 250
    30a4:	39 ec       	ldi	r19, 0xC9	; 201
    30a6:	44 e3       	ldi	r20, 0x34	; 52
    30a8:	59 e3       	ldi	r21, 0x39	; 57
    30aa:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    30ae:	a3 01       	movw	r20, r6
    30b0:	92 01       	movw	r18, r4
    30b2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    30b6:	60 93 fb 21 	sts	0x21FB, r22	; 0x8021fb <integralFBx>
    30ba:	70 93 fc 21 	sts	0x21FC, r23	; 0x8021fc <integralFBx+0x1>
    30be:	80 93 fd 21 	sts	0x21FD, r24	; 0x8021fd <integralFBx+0x2>
    30c2:	90 93 fe 21 	sts	0x21FE, r25	; 0x8021fe <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    30c6:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    30ca:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    30ce:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    30d2:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    30d6:	40 90 f7 21 	lds	r4, 0x21F7	; 0x8021f7 <integralFBy>
    30da:	50 90 f8 21 	lds	r5, 0x21F8	; 0x8021f8 <integralFBy+0x1>
    30de:	60 90 f9 21 	lds	r6, 0x21F9	; 0x8021f9 <integralFBy+0x2>
    30e2:	70 90 fa 21 	lds	r7, 0x21FA	; 0x8021fa <integralFBy+0x3>
    30e6:	c5 01       	movw	r24, r10
    30e8:	b4 01       	movw	r22, r8
    30ea:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    30ee:	2a ef       	ldi	r18, 0xFA	; 250
    30f0:	39 ec       	ldi	r19, 0xC9	; 201
    30f2:	44 e3       	ldi	r20, 0x34	; 52
    30f4:	59 e3       	ldi	r21, 0x39	; 57
    30f6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    30fa:	a3 01       	movw	r20, r6
    30fc:	92 01       	movw	r18, r4
    30fe:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3102:	60 93 f7 21 	sts	0x21F7, r22	; 0x8021f7 <integralFBy>
    3106:	70 93 f8 21 	sts	0x21F8, r23	; 0x8021f8 <integralFBy+0x1>
    310a:	80 93 f9 21 	sts	0x21F9, r24	; 0x8021f9 <integralFBy+0x2>
    310e:	90 93 fa 21 	sts	0x21FA, r25	; 0x8021fa <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    3112:	20 91 0b 22 	lds	r18, 0x220B	; 0x80220b <twoKi>
    3116:	30 91 0c 22 	lds	r19, 0x220C	; 0x80220c <twoKi+0x1>
    311a:	40 91 0d 22 	lds	r20, 0x220D	; 0x80220d <twoKi+0x2>
    311e:	50 91 0e 22 	lds	r21, 0x220E	; 0x80220e <twoKi+0x3>
    3122:	40 90 f3 21 	lds	r4, 0x21F3	; 0x8021f3 <integralFBz>
    3126:	50 90 f4 21 	lds	r5, 0x21F4	; 0x8021f4 <integralFBz+0x1>
    312a:	60 90 f5 21 	lds	r6, 0x21F5	; 0x8021f5 <integralFBz+0x2>
    312e:	70 90 f6 21 	lds	r7, 0x21F6	; 0x8021f6 <integralFBz+0x3>
    3132:	c7 01       	movw	r24, r14
    3134:	b6 01       	movw	r22, r12
    3136:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    313a:	2a ef       	ldi	r18, 0xFA	; 250
    313c:	39 ec       	ldi	r19, 0xC9	; 201
    313e:	44 e3       	ldi	r20, 0x34	; 52
    3140:	59 e3       	ldi	r21, 0x39	; 57
    3142:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3146:	a3 01       	movw	r20, r6
    3148:	92 01       	movw	r18, r4
    314a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    314e:	60 93 f3 21 	sts	0x21F3, r22	; 0x8021f3 <integralFBz>
    3152:	70 93 f4 21 	sts	0x21F4, r23	; 0x8021f4 <integralFBz+0x1>
    3156:	80 93 f5 21 	sts	0x21F5, r24	; 0x8021f5 <integralFBz+0x2>
    315a:	90 93 f6 21 	sts	0x21F6, r25	; 0x8021f6 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    315e:	20 91 fb 21 	lds	r18, 0x21FB	; 0x8021fb <integralFBx>
    3162:	30 91 fc 21 	lds	r19, 0x21FC	; 0x8021fc <integralFBx+0x1>
    3166:	40 91 fd 21 	lds	r20, 0x21FD	; 0x8021fd <integralFBx+0x2>
    316a:	50 91 fe 21 	lds	r21, 0x21FE	; 0x8021fe <integralFBx+0x3>
    316e:	69 89       	ldd	r22, Y+17	; 0x11
    3170:	7a 89       	ldd	r23, Y+18	; 0x12
    3172:	8b 89       	ldd	r24, Y+19	; 0x13
    3174:	9c 89       	ldd	r25, Y+20	; 0x14
    3176:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    317a:	69 8b       	std	Y+17, r22	; 0x11
    317c:	7a 8b       	std	Y+18, r23	; 0x12
    317e:	8b 8b       	std	Y+19, r24	; 0x13
    3180:	9c 8b       	std	Y+20, r25	; 0x14
			gy += integralFBy;
    3182:	20 91 f7 21 	lds	r18, 0x21F7	; 0x8021f7 <integralFBy>
    3186:	30 91 f8 21 	lds	r19, 0x21F8	; 0x8021f8 <integralFBy+0x1>
    318a:	40 91 f9 21 	lds	r20, 0x21F9	; 0x8021f9 <integralFBy+0x2>
    318e:	50 91 fa 21 	lds	r21, 0x21FA	; 0x8021fa <integralFBy+0x3>
    3192:	69 8d       	ldd	r22, Y+25	; 0x19
    3194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    319a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    319e:	69 8f       	std	Y+25, r22	; 0x19
    31a0:	7a 8f       	std	Y+26, r23	; 0x1a
    31a2:	8b 8f       	std	Y+27, r24	; 0x1b
    31a4:	9c 8f       	std	Y+28, r25	; 0x1c
			gz += integralFBz;
    31a6:	20 91 f3 21 	lds	r18, 0x21F3	; 0x8021f3 <integralFBz>
    31aa:	30 91 f4 21 	lds	r19, 0x21F4	; 0x8021f4 <integralFBz+0x1>
    31ae:	40 91 f5 21 	lds	r20, 0x21F5	; 0x8021f5 <integralFBz+0x2>
    31b2:	50 91 f6 21 	lds	r21, 0x21F6	; 0x8021f6 <integralFBz+0x3>
    31b6:	69 81       	ldd	r22, Y+1	; 0x01
    31b8:	7a 81       	ldd	r23, Y+2	; 0x02
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    31c2:	69 83       	std	Y+1, r22	; 0x01
    31c4:	7a 83       	std	Y+2, r23	; 0x02
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	9c 83       	std	Y+4, r25	; 0x04
    31ca:	18 c0       	rjmp	.+48     	; 0x31fc <__stack+0x1fd>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    31cc:	10 92 fb 21 	sts	0x21FB, r1	; 0x8021fb <integralFBx>
    31d0:	10 92 fc 21 	sts	0x21FC, r1	; 0x8021fc <integralFBx+0x1>
    31d4:	10 92 fd 21 	sts	0x21FD, r1	; 0x8021fd <integralFBx+0x2>
    31d8:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <integralFBx+0x3>
			integralFBy = 0.0;
    31dc:	10 92 f7 21 	sts	0x21F7, r1	; 0x8021f7 <integralFBy>
    31e0:	10 92 f8 21 	sts	0x21F8, r1	; 0x8021f8 <integralFBy+0x1>
    31e4:	10 92 f9 21 	sts	0x21F9, r1	; 0x8021f9 <integralFBy+0x2>
    31e8:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <integralFBy+0x3>
			integralFBz = 0.0;
    31ec:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <integralFBz>
    31f0:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <integralFBz+0x1>
    31f4:	10 92 f5 21 	sts	0x21F5, r1	; 0x8021f5 <integralFBz+0x2>
    31f8:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    31fc:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    3200:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    3204:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    3208:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    320c:	6d 89       	ldd	r22, Y+21	; 0x15
    320e:	7e 89       	ldd	r23, Y+22	; 0x16
    3210:	8f 89       	ldd	r24, Y+23	; 0x17
    3212:	98 8d       	ldd	r25, Y+24	; 0x18
    3214:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3218:	9b 01       	movw	r18, r22
    321a:	ac 01       	movw	r20, r24
    321c:	69 89       	ldd	r22, Y+17	; 0x11
    321e:	7a 89       	ldd	r23, Y+18	; 0x12
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3228:	69 8b       	std	Y+17, r22	; 0x11
    322a:	7a 8b       	std	Y+18, r23	; 0x12
    322c:	8b 8b       	std	Y+19, r24	; 0x13
    322e:	9c 8b       	std	Y+20, r25	; 0x14
		gy += twoKp * halfey;
    3230:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    3234:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    3238:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    323c:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    3240:	c5 01       	movw	r24, r10
    3242:	b4 01       	movw	r22, r8
    3244:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3248:	9b 01       	movw	r18, r22
    324a:	ac 01       	movw	r20, r24
    324c:	69 8d       	ldd	r22, Y+25	; 0x19
    324e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3254:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3258:	69 8f       	std	Y+25, r22	; 0x19
    325a:	7a 8f       	std	Y+26, r23	; 0x1a
    325c:	8b 8f       	std	Y+27, r24	; 0x1b
    325e:	9c 8f       	std	Y+28, r25	; 0x1c
		gz += twoKp * halfez;
    3260:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <twoKp>
    3264:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <twoKp+0x1>
    3268:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <twoKp+0x2>
    326c:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <twoKp+0x3>
    3270:	c7 01       	movw	r24, r14
    3272:	b6 01       	movw	r22, r12
    3274:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3278:	9b 01       	movw	r18, r22
    327a:	ac 01       	movw	r20, r24
    327c:	69 81       	ldd	r22, Y+1	; 0x01
    327e:	7a 81       	ldd	r23, Y+2	; 0x02
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3288:	69 83       	std	Y+1, r22	; 0x01
    328a:	7a 83       	std	Y+2, r23	; 0x02
    328c:	8b 83       	std	Y+3, r24	; 0x03
    328e:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    3290:	2a ef       	ldi	r18, 0xFA	; 250
    3292:	39 ec       	ldi	r19, 0xC9	; 201
    3294:	44 eb       	ldi	r20, 0xB4	; 180
    3296:	58 e3       	ldi	r21, 0x38	; 56
    3298:	69 89       	ldd	r22, Y+17	; 0x11
    329a:	7a 89       	ldd	r23, Y+18	; 0x12
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    32a4:	6d 83       	std	Y+5, r22	; 0x05
    32a6:	7e 83       	std	Y+6, r23	; 0x06
    32a8:	8f 83       	std	Y+7, r24	; 0x07
    32aa:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5 * (1.0 / sampleFreq));
    32ac:	2a ef       	ldi	r18, 0xFA	; 250
    32ae:	39 ec       	ldi	r19, 0xC9	; 201
    32b0:	44 eb       	ldi	r20, 0xB4	; 180
    32b2:	58 e3       	ldi	r21, 0x38	; 56
    32b4:	69 8d       	ldd	r22, Y+25	; 0x19
    32b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32bc:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    32c0:	69 87       	std	Y+9, r22	; 0x09
    32c2:	7a 87       	std	Y+10, r23	; 0x0a
    32c4:	8b 87       	std	Y+11, r24	; 0x0b
    32c6:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5 * (1.0 / sampleFreq));
    32c8:	2a ef       	ldi	r18, 0xFA	; 250
    32ca:	39 ec       	ldi	r19, 0xC9	; 201
    32cc:	44 eb       	ldi	r20, 0xB4	; 180
    32ce:	58 e3       	ldi	r21, 0x38	; 56
    32d0:	69 81       	ldd	r22, Y+1	; 0x01
    32d2:	7a 81       	ldd	r23, Y+2	; 0x02
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    32dc:	6d 87       	std	Y+13, r22	; 0x0d
    32de:	7e 87       	std	Y+14, r23	; 0x0e
    32e0:	8f 87       	std	Y+15, r24	; 0x0f
    32e2:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    32e4:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <q0>
    32e8:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <q0+0x1>
    32ec:	00 91 16 20 	lds	r16, 0x2016	; 0x802016 <q0+0x2>
    32f0:	10 91 17 20 	lds	r17, 0x2017	; 0x802017 <q0+0x3>
    32f4:	e9 8a       	std	Y+17, r14	; 0x11
    32f6:	fa 8a       	std	Y+18, r15	; 0x12
    32f8:	0b 8b       	std	Y+19, r16	; 0x13
    32fa:	1c 8b       	std	Y+20, r17	; 0x14
	qb = q1;
    32fc:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    3300:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    3304:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    3308:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
	qc = q2;
    330c:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    3310:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    3314:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    3318:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    331c:	e9 8e       	std	Y+25, r14	; 0x19
    331e:	fa 8e       	std	Y+26, r15	; 0x1a
    3320:	0b 8f       	std	Y+27, r16	; 0x1b
    3322:	1c 8f       	std	Y+28, r17	; 0x1c
	q0 += (-qb * gx - qc * gy - q3 * gz);
    3324:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    3328:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    332c:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    3330:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    3334:	c0 90 14 20 	lds	r12, 0x2014	; 0x802014 <q0>
    3338:	d0 90 15 20 	lds	r13, 0x2015	; 0x802015 <q0+0x1>
    333c:	e0 90 16 20 	lds	r14, 0x2016	; 0x802016 <q0+0x2>
    3340:	f0 90 17 20 	lds	r15, 0x2017	; 0x802017 <q0+0x3>
    3344:	c5 01       	movw	r24, r10
    3346:	b4 01       	movw	r22, r8
    3348:	90 58       	subi	r25, 0x80	; 128
    334a:	2d 81       	ldd	r18, Y+5	; 0x05
    334c:	3e 81       	ldd	r19, Y+6	; 0x06
    334e:	4f 81       	ldd	r20, Y+7	; 0x07
    3350:	58 85       	ldd	r21, Y+8	; 0x08
    3352:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3356:	69 83       	std	Y+1, r22	; 0x01
    3358:	7a 83       	std	Y+2, r23	; 0x02
    335a:	8b 83       	std	Y+3, r24	; 0x03
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	29 8d       	ldd	r18, Y+25	; 0x19
    3360:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3362:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3364:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3366:	69 85       	ldd	r22, Y+9	; 0x09
    3368:	7a 85       	ldd	r23, Y+10	; 0x0a
    336a:	8b 85       	ldd	r24, Y+11	; 0x0b
    336c:	9c 85       	ldd	r25, Y+12	; 0x0c
    336e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3372:	9b 01       	movw	r18, r22
    3374:	ac 01       	movw	r20, r24
    3376:	69 81       	ldd	r22, Y+1	; 0x01
    3378:	7a 81       	ldd	r23, Y+2	; 0x02
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3382:	69 83       	std	Y+1, r22	; 0x01
    3384:	7a 83       	std	Y+2, r23	; 0x02
    3386:	8b 83       	std	Y+3, r24	; 0x03
    3388:	9c 83       	std	Y+4, r25	; 0x04
    338a:	a3 01       	movw	r20, r6
    338c:	92 01       	movw	r18, r4
    338e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3390:	7e 85       	ldd	r23, Y+14	; 0x0e
    3392:	8f 85       	ldd	r24, Y+15	; 0x0f
    3394:	98 89       	ldd	r25, Y+16	; 0x10
    3396:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    339a:	9b 01       	movw	r18, r22
    339c:	ac 01       	movw	r20, r24
    339e:	69 81       	ldd	r22, Y+1	; 0x01
    33a0:	7a 81       	ldd	r23, Y+2	; 0x02
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    33aa:	a7 01       	movw	r20, r14
    33ac:	96 01       	movw	r18, r12
    33ae:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    33b2:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    33b6:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    33ba:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    33be:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    33c2:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    33c6:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    33ca:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    33ce:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    33d2:	c0 90 07 22 	lds	r12, 0x2207	; 0x802207 <q1>
    33d6:	d0 90 08 22 	lds	r13, 0x2208	; 0x802208 <q1+0x1>
    33da:	e0 90 09 22 	lds	r14, 0x2209	; 0x802209 <q1+0x2>
    33de:	f0 90 0a 22 	lds	r15, 0x220A	; 0x80220a <q1+0x3>
    33e2:	29 89       	ldd	r18, Y+17	; 0x11
    33e4:	3a 89       	ldd	r19, Y+18	; 0x12
    33e6:	4b 89       	ldd	r20, Y+19	; 0x13
    33e8:	5c 89       	ldd	r21, Y+20	; 0x14
    33ea:	6d 81       	ldd	r22, Y+5	; 0x05
    33ec:	7e 81       	ldd	r23, Y+6	; 0x06
    33ee:	8f 81       	ldd	r24, Y+7	; 0x07
    33f0:	98 85       	ldd	r25, Y+8	; 0x08
    33f2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    33f6:	69 83       	std	Y+1, r22	; 0x01
    33f8:	7a 83       	std	Y+2, r23	; 0x02
    33fa:	8b 83       	std	Y+3, r24	; 0x03
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	29 8d       	ldd	r18, Y+25	; 0x19
    3400:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3402:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3404:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3406:	6d 85       	ldd	r22, Y+13	; 0x0d
    3408:	7e 85       	ldd	r23, Y+14	; 0x0e
    340a:	8f 85       	ldd	r24, Y+15	; 0x0f
    340c:	98 89       	ldd	r25, Y+16	; 0x10
    340e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3412:	9b 01       	movw	r18, r22
    3414:	ac 01       	movw	r20, r24
    3416:	69 81       	ldd	r22, Y+1	; 0x01
    3418:	7a 81       	ldd	r23, Y+2	; 0x02
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3422:	69 83       	std	Y+1, r22	; 0x01
    3424:	7a 83       	std	Y+2, r23	; 0x02
    3426:	8b 83       	std	Y+3, r24	; 0x03
    3428:	9c 83       	std	Y+4, r25	; 0x04
    342a:	a3 01       	movw	r20, r6
    342c:	92 01       	movw	r18, r4
    342e:	69 85       	ldd	r22, Y+9	; 0x09
    3430:	7a 85       	ldd	r23, Y+10	; 0x0a
    3432:	8b 85       	ldd	r24, Y+11	; 0x0b
    3434:	9c 85       	ldd	r25, Y+12	; 0x0c
    3436:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    343a:	9b 01       	movw	r18, r22
    343c:	ac 01       	movw	r20, r24
    343e:	69 81       	ldd	r22, Y+1	; 0x01
    3440:	7a 81       	ldd	r23, Y+2	; 0x02
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    344a:	a7 01       	movw	r20, r14
    344c:	96 01       	movw	r18, r12
    344e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3452:	60 93 07 22 	sts	0x2207, r22	; 0x802207 <q1>
    3456:	70 93 08 22 	sts	0x2208, r23	; 0x802208 <q1+0x1>
    345a:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <q1+0x2>
    345e:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    3462:	40 90 ff 21 	lds	r4, 0x21FF	; 0x8021ff <q3>
    3466:	50 90 00 22 	lds	r5, 0x2200	; 0x802200 <q3+0x1>
    346a:	60 90 01 22 	lds	r6, 0x2201	; 0x802201 <q3+0x2>
    346e:	70 90 02 22 	lds	r7, 0x2202	; 0x802202 <q3+0x3>
    3472:	c0 90 03 22 	lds	r12, 0x2203	; 0x802203 <q2>
    3476:	d0 90 04 22 	lds	r13, 0x2204	; 0x802204 <q2+0x1>
    347a:	e0 90 05 22 	lds	r14, 0x2205	; 0x802205 <q2+0x2>
    347e:	f0 90 06 22 	lds	r15, 0x2206	; 0x802206 <q2+0x3>
    3482:	29 89       	ldd	r18, Y+17	; 0x11
    3484:	3a 89       	ldd	r19, Y+18	; 0x12
    3486:	4b 89       	ldd	r20, Y+19	; 0x13
    3488:	5c 89       	ldd	r21, Y+20	; 0x14
    348a:	69 85       	ldd	r22, Y+9	; 0x09
    348c:	7a 85       	ldd	r23, Y+10	; 0x0a
    348e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3490:	9c 85       	ldd	r25, Y+12	; 0x0c
    3492:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3496:	69 83       	std	Y+1, r22	; 0x01
    3498:	7a 83       	std	Y+2, r23	; 0x02
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	9c 83       	std	Y+4, r25	; 0x04
    349e:	a5 01       	movw	r20, r10
    34a0:	94 01       	movw	r18, r8
    34a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    34a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    34a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a8:	98 89       	ldd	r25, Y+16	; 0x10
    34aa:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    34ae:	9b 01       	movw	r18, r22
    34b0:	ac 01       	movw	r20, r24
    34b2:	69 81       	ldd	r22, Y+1	; 0x01
    34b4:	7a 81       	ldd	r23, Y+2	; 0x02
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    34be:	69 83       	std	Y+1, r22	; 0x01
    34c0:	7a 83       	std	Y+2, r23	; 0x02
    34c2:	8b 83       	std	Y+3, r24	; 0x03
    34c4:	9c 83       	std	Y+4, r25	; 0x04
    34c6:	a3 01       	movw	r20, r6
    34c8:	92 01       	movw	r18, r4
    34ca:	6d 81       	ldd	r22, Y+5	; 0x05
    34cc:	7e 81       	ldd	r23, Y+6	; 0x06
    34ce:	8f 81       	ldd	r24, Y+7	; 0x07
    34d0:	98 85       	ldd	r25, Y+8	; 0x08
    34d2:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    34d6:	9b 01       	movw	r18, r22
    34d8:	ac 01       	movw	r20, r24
    34da:	69 81       	ldd	r22, Y+1	; 0x01
    34dc:	7a 81       	ldd	r23, Y+2	; 0x02
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	9c 81       	ldd	r25, Y+4	; 0x04
    34e2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    34e6:	a7 01       	movw	r20, r14
    34e8:	96 01       	movw	r18, r12
    34ea:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    34ee:	60 93 03 22 	sts	0x2203, r22	; 0x802203 <q2>
    34f2:	70 93 04 22 	sts	0x2204, r23	; 0x802204 <q2+0x1>
    34f6:	80 93 05 22 	sts	0x2205, r24	; 0x802205 <q2+0x2>
    34fa:	90 93 06 22 	sts	0x2206, r25	; 0x802206 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    34fe:	c0 90 ff 21 	lds	r12, 0x21FF	; 0x8021ff <q3>
    3502:	d0 90 00 22 	lds	r13, 0x2200	; 0x802200 <q3+0x1>
    3506:	e0 90 01 22 	lds	r14, 0x2201	; 0x802201 <q3+0x2>
    350a:	f0 90 02 22 	lds	r15, 0x2202	; 0x802202 <q3+0x3>
    350e:	29 89       	ldd	r18, Y+17	; 0x11
    3510:	3a 89       	ldd	r19, Y+18	; 0x12
    3512:	4b 89       	ldd	r20, Y+19	; 0x13
    3514:	5c 89       	ldd	r21, Y+20	; 0x14
    3516:	6d 85       	ldd	r22, Y+13	; 0x0d
    3518:	7e 85       	ldd	r23, Y+14	; 0x0e
    351a:	8f 85       	ldd	r24, Y+15	; 0x0f
    351c:	98 89       	ldd	r25, Y+16	; 0x10
    351e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3522:	2b 01       	movw	r4, r22
    3524:	3c 01       	movw	r6, r24
    3526:	a5 01       	movw	r20, r10
    3528:	94 01       	movw	r18, r8
    352a:	69 85       	ldd	r22, Y+9	; 0x09
    352c:	7a 85       	ldd	r23, Y+10	; 0x0a
    352e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3530:	9c 85       	ldd	r25, Y+12	; 0x0c
    3532:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3536:	9b 01       	movw	r18, r22
    3538:	ac 01       	movw	r20, r24
    353a:	c3 01       	movw	r24, r6
    353c:	b2 01       	movw	r22, r4
    353e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3542:	4b 01       	movw	r8, r22
    3544:	5c 01       	movw	r10, r24
    3546:	29 8d       	ldd	r18, Y+25	; 0x19
    3548:	3a 8d       	ldd	r19, Y+26	; 0x1a
    354a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    354c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    354e:	6d 81       	ldd	r22, Y+5	; 0x05
    3550:	7e 81       	ldd	r23, Y+6	; 0x06
    3552:	8f 81       	ldd	r24, Y+7	; 0x07
    3554:	98 85       	ldd	r25, Y+8	; 0x08
    3556:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    355a:	9b 01       	movw	r18, r22
    355c:	ac 01       	movw	r20, r24
    355e:	c5 01       	movw	r24, r10
    3560:	b4 01       	movw	r22, r8
    3562:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3566:	a7 01       	movw	r20, r14
    3568:	96 01       	movw	r18, r12
    356a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    356e:	60 93 ff 21 	sts	0x21FF, r22	; 0x8021ff <q3>
    3572:	70 93 00 22 	sts	0x2200, r23	; 0x802200 <q3+0x1>
    3576:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <q3+0x2>
    357a:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    357e:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <q0>
    3582:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <q0+0x1>
    3586:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <q0+0x2>
    358a:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <q0+0x3>
    358e:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    3592:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    3596:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    359a:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    359e:	80 90 07 22 	lds	r8, 0x2207	; 0x802207 <q1>
    35a2:	90 90 08 22 	lds	r9, 0x2208	; 0x802208 <q1+0x1>
    35a6:	a0 90 09 22 	lds	r10, 0x2209	; 0x802209 <q1+0x2>
    35aa:	b0 90 0a 22 	lds	r11, 0x220A	; 0x80220a <q1+0x3>
    35ae:	40 90 07 22 	lds	r4, 0x2207	; 0x802207 <q1>
    35b2:	50 90 08 22 	lds	r5, 0x2208	; 0x802208 <q1+0x1>
    35b6:	60 90 09 22 	lds	r6, 0x2209	; 0x802209 <q1+0x2>
    35ba:	70 90 0a 22 	lds	r7, 0x220A	; 0x80220a <q1+0x3>
    35be:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    35c2:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    35c6:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    35ca:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    35ce:	ed 82       	std	Y+5, r14	; 0x05
    35d0:	fe 82       	std	Y+6, r15	; 0x06
    35d2:	0f 83       	std	Y+7, r16	; 0x07
    35d4:	18 87       	std	Y+8, r17	; 0x08
    35d6:	e0 90 03 22 	lds	r14, 0x2203	; 0x802203 <q2>
    35da:	f0 90 04 22 	lds	r15, 0x2204	; 0x802204 <q2+0x1>
    35de:	00 91 05 22 	lds	r16, 0x2205	; 0x802205 <q2+0x2>
    35e2:	10 91 06 22 	lds	r17, 0x2206	; 0x802206 <q2+0x3>
    35e6:	e9 86       	std	Y+9, r14	; 0x09
    35e8:	fa 86       	std	Y+10, r15	; 0x0a
    35ea:	0b 87       	std	Y+11, r16	; 0x0b
    35ec:	1c 87       	std	Y+12, r17	; 0x0c
    35ee:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    35f2:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    35f6:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    35fa:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    35fe:	e9 82       	std	Y+1, r14	; 0x01
    3600:	fa 82       	std	Y+2, r15	; 0x02
    3602:	0b 83       	std	Y+3, r16	; 0x03
    3604:	1c 83       	std	Y+4, r17	; 0x04
    3606:	e0 90 ff 21 	lds	r14, 0x21FF	; 0x8021ff <q3>
    360a:	f0 90 00 22 	lds	r15, 0x2200	; 0x802200 <q3+0x1>
    360e:	00 91 01 22 	lds	r16, 0x2201	; 0x802201 <q3+0x2>
    3612:	10 91 02 22 	lds	r17, 0x2202	; 0x802202 <q3+0x3>
    3616:	ed 86       	std	Y+13, r14	; 0x0d
    3618:	fe 86       	std	Y+14, r15	; 0x0e
    361a:	0f 87       	std	Y+15, r16	; 0x0f
    361c:	18 8b       	std	Y+16, r17	; 0x10
    361e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3622:	6b 01       	movw	r12, r22
    3624:	7c 01       	movw	r14, r24
    3626:	a3 01       	movw	r20, r6
    3628:	92 01       	movw	r18, r4
    362a:	c5 01       	movw	r24, r10
    362c:	b4 01       	movw	r22, r8
    362e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3632:	9b 01       	movw	r18, r22
    3634:	ac 01       	movw	r20, r24
    3636:	c7 01       	movw	r24, r14
    3638:	b6 01       	movw	r22, r12
    363a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    363e:	4b 01       	movw	r8, r22
    3640:	5c 01       	movw	r10, r24
    3642:	29 85       	ldd	r18, Y+9	; 0x09
    3644:	3a 85       	ldd	r19, Y+10	; 0x0a
    3646:	4b 85       	ldd	r20, Y+11	; 0x0b
    3648:	5c 85       	ldd	r21, Y+12	; 0x0c
    364a:	6d 81       	ldd	r22, Y+5	; 0x05
    364c:	7e 81       	ldd	r23, Y+6	; 0x06
    364e:	8f 81       	ldd	r24, Y+7	; 0x07
    3650:	98 85       	ldd	r25, Y+8	; 0x08
    3652:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3656:	9b 01       	movw	r18, r22
    3658:	ac 01       	movw	r20, r24
    365a:	c5 01       	movw	r24, r10
    365c:	b4 01       	movw	r22, r8
    365e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3662:	4b 01       	movw	r8, r22
    3664:	5c 01       	movw	r10, r24
    3666:	2d 85       	ldd	r18, Y+13	; 0x0d
    3668:	3e 85       	ldd	r19, Y+14	; 0x0e
    366a:	4f 85       	ldd	r20, Y+15	; 0x0f
    366c:	58 89       	ldd	r21, Y+16	; 0x10
    366e:	69 81       	ldd	r22, Y+1	; 0x01
    3670:	7a 81       	ldd	r23, Y+2	; 0x02
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	9c 81       	ldd	r25, Y+4	; 0x04
    3676:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    367a:	9b 01       	movw	r18, r22
    367c:	ac 01       	movw	r20, r24
    367e:	c5 01       	movw	r24, r10
    3680:	b4 01       	movw	r22, r8
    3682:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3686:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <invSqrt>
    368a:	6b 01       	movw	r12, r22
    368c:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    368e:	20 91 14 20 	lds	r18, 0x2014	; 0x802014 <q0>
    3692:	30 91 15 20 	lds	r19, 0x2015	; 0x802015 <q0+0x1>
    3696:	40 91 16 20 	lds	r20, 0x2016	; 0x802016 <q0+0x2>
    369a:	50 91 17 20 	lds	r21, 0x2017	; 0x802017 <q0+0x3>
    369e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    36a2:	60 93 14 20 	sts	0x2014, r22	; 0x802014 <q0>
    36a6:	70 93 15 20 	sts	0x2015, r23	; 0x802015 <q0+0x1>
    36aa:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <q0+0x2>
    36ae:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <q0+0x3>
	q1 *= recipNorm;
    36b2:	20 91 07 22 	lds	r18, 0x2207	; 0x802207 <q1>
    36b6:	30 91 08 22 	lds	r19, 0x2208	; 0x802208 <q1+0x1>
    36ba:	40 91 09 22 	lds	r20, 0x2209	; 0x802209 <q1+0x2>
    36be:	50 91 0a 22 	lds	r21, 0x220A	; 0x80220a <q1+0x3>
    36c2:	c7 01       	movw	r24, r14
    36c4:	b6 01       	movw	r22, r12
    36c6:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    36ca:	60 93 07 22 	sts	0x2207, r22	; 0x802207 <q1>
    36ce:	70 93 08 22 	sts	0x2208, r23	; 0x802208 <q1+0x1>
    36d2:	80 93 09 22 	sts	0x2209, r24	; 0x802209 <q1+0x2>
    36d6:	90 93 0a 22 	sts	0x220A, r25	; 0x80220a <q1+0x3>
	q2 *= recipNorm;
    36da:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <q2>
    36de:	30 91 04 22 	lds	r19, 0x2204	; 0x802204 <q2+0x1>
    36e2:	40 91 05 22 	lds	r20, 0x2205	; 0x802205 <q2+0x2>
    36e6:	50 91 06 22 	lds	r21, 0x2206	; 0x802206 <q2+0x3>
    36ea:	c7 01       	movw	r24, r14
    36ec:	b6 01       	movw	r22, r12
    36ee:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    36f2:	60 93 03 22 	sts	0x2203, r22	; 0x802203 <q2>
    36f6:	70 93 04 22 	sts	0x2204, r23	; 0x802204 <q2+0x1>
    36fa:	80 93 05 22 	sts	0x2205, r24	; 0x802205 <q2+0x2>
    36fe:	90 93 06 22 	sts	0x2206, r25	; 0x802206 <q2+0x3>
	q3 *= recipNorm;
    3702:	20 91 ff 21 	lds	r18, 0x21FF	; 0x8021ff <q3>
    3706:	30 91 00 22 	lds	r19, 0x2200	; 0x802200 <q3+0x1>
    370a:	40 91 01 22 	lds	r20, 0x2201	; 0x802201 <q3+0x2>
    370e:	50 91 02 22 	lds	r21, 0x2202	; 0x802202 <q3+0x3>
    3712:	c7 01       	movw	r24, r14
    3714:	b6 01       	movw	r22, r12
    3716:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    371a:	60 93 ff 21 	sts	0x21FF, r22	; 0x8021ff <q3>
    371e:	70 93 00 22 	sts	0x2200, r23	; 0x802200 <q3+0x1>
    3722:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <q3+0x2>
    3726:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <q3+0x3>
}
    372a:	c8 5a       	subi	r28, 0xA8	; 168
    372c:	df 4f       	sbci	r29, 0xFF	; 255
    372e:	cd bf       	out	0x3d, r28	; 61
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	1f 91       	pop	r17
    3738:	0f 91       	pop	r16
    373a:	ff 90       	pop	r15
    373c:	ef 90       	pop	r14
    373e:	df 90       	pop	r13
    3740:	cf 90       	pop	r12
    3742:	bf 90       	pop	r11
    3744:	af 90       	pop	r10
    3746:	9f 90       	pop	r9
    3748:	8f 90       	pop	r8
    374a:	7f 90       	pop	r7
    374c:	6f 90       	pop	r6
    374e:	5f 90       	pop	r5
    3750:	4f 90       	pop	r4
    3752:	3f 90       	pop	r3
    3754:	2f 90       	pop	r2
    3756:	08 95       	ret

00003758 <__portable_avr_delay_cycles>:
	}
	else
	{
		return false;
	}
}
    3758:	04 c0       	rjmp	.+8      	; 0x3762 <__portable_avr_delay_cycles+0xa>
    375a:	61 50       	subi	r22, 0x01	; 1
    375c:	71 09       	sbc	r23, r1
    375e:	81 09       	sbc	r24, r1
    3760:	91 09       	sbc	r25, r1
    3762:	61 15       	cp	r22, r1
    3764:	71 05       	cpc	r23, r1
    3766:	81 05       	cpc	r24, r1
    3768:	91 05       	cpc	r25, r1
    376a:	b9 f7       	brne	.-18     	; 0x375a <__portable_avr_delay_cycles+0x2>
    376c:	08 95       	ret

0000376e <mpu9250_ODR_init>:
    376e:	0f 93       	push	r16
    3770:	1f 93       	push	r17
    3772:	8b 01       	movw	r16, r22
    3774:	9c 01       	movw	r18, r24
    3776:	64 2f       	mov	r22, r20
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	88 ee       	ldi	r24, 0xE8	; 232
    377c:	93 e0       	ldi	r25, 0x03	; 3
    377e:	0e 94 81 2a 	call	0x5502	; 0x5502 <__udivmodhi4>
    3782:	ec e1       	ldi	r30, 0x1C	; 28
    3784:	f0 e2       	ldi	r31, 0x20	; 32
    3786:	88 e6       	ldi	r24, 0x68	; 104
    3788:	80 83       	st	Z, r24
    378a:	89 e1       	ldi	r24, 0x19	; 25
    378c:	81 83       	std	Z+1, r24	; 0x01
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	80 87       	std	Z+8, r24	; 0x08
    3794:	91 87       	std	Z+9, r25	; 0x09
    3796:	61 50       	subi	r22, 0x01	; 1
    3798:	60 93 21 22 	sts	0x2221, r22	; 0x802221 <mpu9250_twi_data>
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	bf 01       	movw	r22, r30
    37a0:	c8 01       	movw	r24, r16
    37a2:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	08 95       	ret

000037ac <mpu9250_gyro_init>:
    37ac:	9f 92       	push	r9
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	6b 01       	movw	r12, r22
    37c4:	7c 01       	movw	r14, r24
    37c6:	cc e1       	ldi	r28, 0x1C	; 28
    37c8:	d0 e2       	ldi	r29, 0x20	; 32
    37ca:	0f 2e       	mov	r0, r31
    37cc:	f8 e6       	ldi	r31, 0x68	; 104
    37ce:	9f 2e       	mov	r9, r31
    37d0:	f0 2d       	mov	r31, r0
    37d2:	98 82       	st	Y, r9
    37d4:	8a e1       	ldi	r24, 0x1A	; 26
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	aa 24       	eor	r10, r10
    37da:	a3 94       	inc	r10
    37dc:	b1 2c       	mov	r11, r1
    37de:	a8 86       	std	Y+8, r10	; 0x08
    37e0:	b9 86       	std	Y+9, r11	; 0x09
    37e2:	01 e2       	ldi	r16, 0x21	; 33
    37e4:	12 e2       	ldi	r17, 0x22	; 34
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	f8 01       	movw	r30, r16
    37ea:	80 83       	st	Z, r24
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	be 01       	movw	r22, r28
    37f0:	c6 01       	movw	r24, r12
    37f2:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    37f6:	98 82       	st	Y, r9
    37f8:	8b e1       	ldi	r24, 0x1B	; 27
    37fa:	89 83       	std	Y+1, r24	; 0x01
    37fc:	a8 86       	std	Y+8, r10	; 0x08
    37fe:	b9 86       	std	Y+9, r11	; 0x09
    3800:	88 e1       	ldi	r24, 0x18	; 24
    3802:	f8 01       	movw	r30, r16
    3804:	80 83       	st	Z, r24
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	be 01       	movw	r22, r28
    380a:	c6 01       	movw	r24, r12
    380c:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	ff 90       	pop	r15
    381a:	ef 90       	pop	r14
    381c:	df 90       	pop	r13
    381e:	cf 90       	pop	r12
    3820:	bf 90       	pop	r11
    3822:	af 90       	pop	r10
    3824:	9f 90       	pop	r9
    3826:	08 95       	ret

00003828 <mpu9250_acc_init>:
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	6b 01       	movw	r12, r22
    3840:	7c 01       	movw	r14, r24
    3842:	cc e1       	ldi	r28, 0x1C	; 28
    3844:	d0 e2       	ldi	r29, 0x20	; 32
    3846:	0f 2e       	mov	r0, r31
    3848:	f8 e6       	ldi	r31, 0x68	; 104
    384a:	9f 2e       	mov	r9, r31
    384c:	f0 2d       	mov	r31, r0
    384e:	98 82       	st	Y, r9
    3850:	8c e1       	ldi	r24, 0x1C	; 28
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	aa 24       	eor	r10, r10
    3856:	a3 94       	inc	r10
    3858:	b1 2c       	mov	r11, r1
    385a:	a8 86       	std	Y+8, r10	; 0x08
    385c:	b9 86       	std	Y+9, r11	; 0x09
    385e:	01 e2       	ldi	r16, 0x21	; 33
    3860:	12 e2       	ldi	r17, 0x22	; 34
    3862:	88 e1       	ldi	r24, 0x18	; 24
    3864:	f8 01       	movw	r30, r16
    3866:	80 83       	st	Z, r24
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	be 01       	movw	r22, r28
    386c:	c6 01       	movw	r24, r12
    386e:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3872:	98 82       	st	Y, r9
    3874:	8d e1       	ldi	r24, 0x1D	; 29
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	a8 86       	std	Y+8, r10	; 0x08
    387a:	b9 86       	std	Y+9, r11	; 0x09
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	f8 01       	movw	r30, r16
    3880:	80 83       	st	Z, r24
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	be 01       	movw	r22, r28
    3886:	c6 01       	movw	r24, r12
    3888:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	df 90       	pop	r13
    389a:	cf 90       	pop	r12
    389c:	bf 90       	pop	r11
    389e:	af 90       	pop	r10
    38a0:	9f 90       	pop	r9
    38a2:	08 95       	ret

000038a4 <mpu9250_mag_cal>:
    38a4:	2f 92       	push	r2
    38a6:	3f 92       	push	r3
    38a8:	4f 92       	push	r4
    38aa:	5f 92       	push	r5
    38ac:	6f 92       	push	r6
    38ae:	7f 92       	push	r7
    38b0:	8f 92       	push	r8
    38b2:	9f 92       	push	r9
    38b4:	af 92       	push	r10
    38b6:	bf 92       	push	r11
    38b8:	cf 92       	push	r12
    38ba:	df 92       	push	r13
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	6b 01       	movw	r12, r22
    38ca:	7c 01       	movw	r14, r24
    38cc:	cc e1       	ldi	r28, 0x1C	; 28
    38ce:	d0 e2       	ldi	r29, 0x20	; 32
    38d0:	0f 2e       	mov	r0, r31
    38d2:	f8 e6       	ldi	r31, 0x68	; 104
    38d4:	9f 2e       	mov	r9, r31
    38d6:	f0 2d       	mov	r31, r0
    38d8:	98 82       	st	Y, r9
    38da:	0f 2e       	mov	r0, r31
    38dc:	f5 e2       	ldi	r31, 0x25	; 37
    38de:	6f 2e       	mov	r6, r31
    38e0:	f0 2d       	mov	r31, r0
    38e2:	69 82       	std	Y+1, r6	; 0x01
    38e4:	aa 24       	eor	r10, r10
    38e6:	a3 94       	inc	r10
    38e8:	b1 2c       	mov	r11, r1
    38ea:	a8 86       	std	Y+8, r10	; 0x08
    38ec:	b9 86       	std	Y+9, r11	; 0x09
    38ee:	01 e2       	ldi	r16, 0x21	; 33
    38f0:	12 e2       	ldi	r17, 0x22	; 34
    38f2:	0f 2e       	mov	r0, r31
    38f4:	fc e0       	ldi	r31, 0x0C	; 12
    38f6:	4f 2e       	mov	r4, r31
    38f8:	f0 2d       	mov	r31, r0
    38fa:	f8 01       	movw	r30, r16
    38fc:	40 82       	st	Z, r4
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	be 01       	movw	r22, r28
    3902:	c6 01       	movw	r24, r12
    3904:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3908:	98 82       	st	Y, r9
    390a:	0f 2e       	mov	r0, r31
    390c:	f6 e2       	ldi	r31, 0x26	; 38
    390e:	7f 2e       	mov	r7, r31
    3910:	f0 2d       	mov	r31, r0
    3912:	79 82       	std	Y+1, r7	; 0x01
    3914:	a8 86       	std	Y+8, r10	; 0x08
    3916:	b9 86       	std	Y+9, r11	; 0x09
    3918:	0f 2e       	mov	r0, r31
    391a:	fa e0       	ldi	r31, 0x0A	; 10
    391c:	5f 2e       	mov	r5, r31
    391e:	f0 2d       	mov	r31, r0
    3920:	f8 01       	movw	r30, r16
    3922:	50 82       	st	Z, r5
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	be 01       	movw	r22, r28
    3928:	c6 01       	movw	r24, r12
    392a:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    392e:	98 82       	st	Y, r9
    3930:	0f 2e       	mov	r0, r31
    3932:	f3 e6       	ldi	r31, 0x63	; 99
    3934:	3f 2e       	mov	r3, r31
    3936:	f0 2d       	mov	r31, r0
    3938:	39 82       	std	Y+1, r3	; 0x01
    393a:	a8 86       	std	Y+8, r10	; 0x08
    393c:	b9 86       	std	Y+9, r11	; 0x09
    393e:	8f e1       	ldi	r24, 0x1F	; 31
    3940:	f8 01       	movw	r30, r16
    3942:	80 83       	st	Z, r24
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	be 01       	movw	r22, r28
    3948:	c6 01       	movw	r24, r12
    394a:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    394e:	98 82       	st	Y, r9
    3950:	0f 2e       	mov	r0, r31
    3952:	f7 e2       	ldi	r31, 0x27	; 39
    3954:	8f 2e       	mov	r8, r31
    3956:	f0 2d       	mov	r31, r0
    3958:	89 82       	std	Y+1, r8	; 0x01
    395a:	a8 86       	std	Y+8, r10	; 0x08
    395c:	b9 86       	std	Y+9, r11	; 0x09
    395e:	81 e8       	ldi	r24, 0x81	; 129
    3960:	f8 01       	movw	r30, r16
    3962:	80 83       	st	Z, r24
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	be 01       	movw	r22, r28
    3968:	c6 01       	movw	r24, r12
    396a:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    396e:	6b e0       	ldi	r22, 0x0B	; 11
    3970:	7a e1       	ldi	r23, 0x1A	; 26
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	f0 de       	rcall	.-544    	; 0x3758 <__portable_avr_delay_cycles>
    3978:	98 82       	st	Y, r9
    397a:	69 82       	std	Y+1, r6	; 0x01
    397c:	a8 86       	std	Y+8, r10	; 0x08
    397e:	b9 86       	std	Y+9, r11	; 0x09
    3980:	8c e8       	ldi	r24, 0x8C	; 140
    3982:	f8 01       	movw	r30, r16
    3984:	80 83       	st	Z, r24
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	be 01       	movw	r22, r28
    398a:	c6 01       	movw	r24, r12
    398c:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3990:	98 82       	st	Y, r9
    3992:	79 82       	std	Y+1, r7	; 0x01
    3994:	a8 86       	std	Y+8, r10	; 0x08
    3996:	b9 86       	std	Y+9, r11	; 0x09
    3998:	68 94       	set
    399a:	22 24       	eor	r2, r2
    399c:	24 f8       	bld	r2, 4
    399e:	f8 01       	movw	r30, r16
    39a0:	20 82       	st	Z, r2
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	be 01       	movw	r22, r28
    39a6:	c6 01       	movw	r24, r12
    39a8:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    39ac:	98 82       	st	Y, r9
    39ae:	89 82       	std	Y+1, r8	; 0x01
    39b0:	a8 86       	std	Y+8, r10	; 0x08
    39b2:	b9 86       	std	Y+9, r11	; 0x09
    39b4:	83 e8       	ldi	r24, 0x83	; 131
    39b6:	f8 01       	movw	r30, r16
    39b8:	80 83       	st	Z, r24
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	be 01       	movw	r22, r28
    39be:	c6 01       	movw	r24, r12
    39c0:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    39c4:	6b e0       	ldi	r22, 0x0B	; 11
    39c6:	7a e1       	ldi	r23, 0x1A	; 26
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	c5 de       	rcall	.-630    	; 0x3758 <__portable_avr_delay_cycles>
    39ce:	98 82       	st	Y, r9
    39d0:	89 e4       	ldi	r24, 0x49	; 73
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	84 e0       	ldi	r24, 0x04	; 4
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	88 87       	std	Y+8, r24	; 0x08
    39da:	99 87       	std	Y+9, r25	; 0x09
    39dc:	41 e0       	ldi	r20, 0x01	; 1
    39de:	be 01       	movw	r22, r28
    39e0:	c6 01       	movw	r24, r12
    39e2:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    39e6:	f8 01       	movw	r30, r16
    39e8:	60 81       	ld	r22, Z
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	53 e4       	ldi	r21, 0x43	; 67
    39fc:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5b e3       	ldi	r21, 0x3B	; 59
    3a08:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e8       	ldi	r20, 0x80	; 128
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3a18:	60 93 17 22 	sts	0x2217, r22	; 0x802217 <ASAX>
    3a1c:	70 93 18 22 	sts	0x2218, r23	; 0x802218 <ASAX+0x1>
    3a20:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <ASAX+0x2>
    3a24:	90 93 1a 22 	sts	0x221A, r25	; 0x80221a <ASAX+0x3>
    3a28:	f8 01       	movw	r30, r16
    3a2a:	61 81       	ldd	r22, Z+1	; 0x01
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	53 e4       	ldi	r21, 0x43	; 67
    3a3e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5b e3       	ldi	r21, 0x3B	; 59
    3a4a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3a5a:	60 93 13 22 	sts	0x2213, r22	; 0x802213 <ASAY>
    3a5e:	70 93 14 22 	sts	0x2214, r23	; 0x802214 <ASAY+0x1>
    3a62:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <ASAY+0x2>
    3a66:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <ASAY+0x3>
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	62 81       	ldd	r22, Z+2	; 0x02
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 94 b6 28 	call	0x516c	; 0x516c <__floatunsisf>
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e0       	ldi	r20, 0x00	; 0
    3a7e:	53 e4       	ldi	r21, 0x43	; 67
    3a80:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <__subsf3>
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e8       	ldi	r20, 0x80	; 128
    3a8a:	5b e3       	ldi	r21, 0x3B	; 59
    3a8c:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e8       	ldi	r20, 0x80	; 128
    3a96:	5f e3       	ldi	r21, 0x3F	; 63
    3a98:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__addsf3>
    3a9c:	60 93 0f 22 	sts	0x220F, r22	; 0x80220f <ASAZ>
    3aa0:	70 93 10 22 	sts	0x2210, r23	; 0x802210 <ASAZ+0x1>
    3aa4:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <ASAZ+0x2>
    3aa8:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <ASAZ+0x3>
    3aac:	98 82       	st	Y, r9
    3aae:	69 82       	std	Y+1, r6	; 0x01
    3ab0:	a8 86       	std	Y+8, r10	; 0x08
    3ab2:	b9 86       	std	Y+9, r11	; 0x09
    3ab4:	f8 01       	movw	r30, r16
    3ab6:	40 82       	st	Z, r4
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	be 01       	movw	r22, r28
    3abc:	c6 01       	movw	r24, r12
    3abe:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3ac2:	98 82       	st	Y, r9
    3ac4:	79 82       	std	Y+1, r7	; 0x01
    3ac6:	a8 86       	std	Y+8, r10	; 0x08
    3ac8:	b9 86       	std	Y+9, r11	; 0x09
    3aca:	f8 01       	movw	r30, r16
    3acc:	50 82       	st	Z, r5
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	be 01       	movw	r22, r28
    3ad2:	c6 01       	movw	r24, r12
    3ad4:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3ad8:	98 82       	st	Y, r9
    3ada:	39 82       	std	Y+1, r3	; 0x01
    3adc:	a8 86       	std	Y+8, r10	; 0x08
    3ade:	b9 86       	std	Y+9, r11	; 0x09
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	20 82       	st	Z, r2
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	be 01       	movw	r22, r28
    3ae8:	c6 01       	movw	r24, r12
    3aea:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3aee:	98 82       	st	Y, r9
    3af0:	89 82       	std	Y+1, r8	; 0x01
    3af2:	a8 86       	std	Y+8, r10	; 0x08
    3af4:	b9 86       	std	Y+9, r11	; 0x09
    3af6:	81 e8       	ldi	r24, 0x81	; 129
    3af8:	f8 01       	movw	r30, r16
    3afa:	80 83       	st	Z, r24
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	be 01       	movw	r22, r28
    3b00:	c6 01       	movw	r24, r12
    3b02:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3b06:	6b e0       	ldi	r22, 0x0B	; 11
    3b08:	7a e1       	ldi	r23, 0x1A	; 26
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	24 de       	rcall	.-952    	; 0x3758 <__portable_avr_delay_cycles>
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	bf 90       	pop	r11
    3b22:	af 90       	pop	r10
    3b24:	9f 90       	pop	r9
    3b26:	8f 90       	pop	r8
    3b28:	7f 90       	pop	r7
    3b2a:	6f 90       	pop	r6
    3b2c:	5f 90       	pop	r5
    3b2e:	4f 90       	pop	r4
    3b30:	3f 90       	pop	r3
    3b32:	2f 90       	pop	r2
    3b34:	08 95       	ret

00003b36 <mpu9250_mag_init>:
    3b36:	4f 92       	push	r4
    3b38:	5f 92       	push	r5
    3b3a:	6f 92       	push	r6
    3b3c:	7f 92       	push	r7
    3b3e:	8f 92       	push	r8
    3b40:	9f 92       	push	r9
    3b42:	af 92       	push	r10
    3b44:	bf 92       	push	r11
    3b46:	cf 92       	push	r12
    3b48:	df 92       	push	r13
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	6b 01       	movw	r12, r22
    3b58:	7c 01       	movw	r14, r24
    3b5a:	cc e1       	ldi	r28, 0x1C	; 28
    3b5c:	d0 e2       	ldi	r29, 0x20	; 32
    3b5e:	0f 2e       	mov	r0, r31
    3b60:	f8 e6       	ldi	r31, 0x68	; 104
    3b62:	9f 2e       	mov	r9, r31
    3b64:	f0 2d       	mov	r31, r0
    3b66:	98 82       	st	Y, r9
    3b68:	84 e2       	ldi	r24, 0x24	; 36
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	aa 24       	eor	r10, r10
    3b6e:	a3 94       	inc	r10
    3b70:	b1 2c       	mov	r11, r1
    3b72:	a8 86       	std	Y+8, r10	; 0x08
    3b74:	b9 86       	std	Y+9, r11	; 0x09
    3b76:	01 e2       	ldi	r16, 0x21	; 33
    3b78:	12 e2       	ldi	r17, 0x22	; 34
    3b7a:	8d ec       	ldi	r24, 0xCD	; 205
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	80 83       	st	Z, r24
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	be 01       	movw	r22, r28
    3b84:	c6 01       	movw	r24, r12
    3b86:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3b8a:	98 82       	st	Y, r9
    3b8c:	87 e6       	ldi	r24, 0x67	; 103
    3b8e:	89 83       	std	Y+1, r24	; 0x01
    3b90:	a8 86       	std	Y+8, r10	; 0x08
    3b92:	b9 86       	std	Y+9, r11	; 0x09
    3b94:	0f 2e       	mov	r0, r31
    3b96:	f1 e8       	ldi	r31, 0x81	; 129
    3b98:	6f 2e       	mov	r6, r31
    3b9a:	f0 2d       	mov	r31, r0
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	60 82       	st	Z, r6
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	be 01       	movw	r22, r28
    3ba4:	c6 01       	movw	r24, r12
    3ba6:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3baa:	98 82       	st	Y, r9
    3bac:	8a e6       	ldi	r24, 0x6A	; 106
    3bae:	89 83       	std	Y+1, r24	; 0x01
    3bb0:	a8 86       	std	Y+8, r10	; 0x08
    3bb2:	b9 86       	std	Y+9, r11	; 0x09
    3bb4:	80 e2       	ldi	r24, 0x20	; 32
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	80 83       	st	Z, r24
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	be 01       	movw	r22, r28
    3bbe:	c6 01       	movw	r24, r12
    3bc0:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3bc4:	98 82       	st	Y, r9
    3bc6:	0f 2e       	mov	r0, r31
    3bc8:	f5 e2       	ldi	r31, 0x25	; 37
    3bca:	5f 2e       	mov	r5, r31
    3bcc:	f0 2d       	mov	r31, r0
    3bce:	59 82       	std	Y+1, r5	; 0x01
    3bd0:	a8 86       	std	Y+8, r10	; 0x08
    3bd2:	b9 86       	std	Y+9, r11	; 0x09
    3bd4:	8c e0       	ldi	r24, 0x0C	; 12
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	80 83       	st	Z, r24
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	be 01       	movw	r22, r28
    3bde:	c6 01       	movw	r24, r12
    3be0:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3be4:	98 82       	st	Y, r9
    3be6:	0f 2e       	mov	r0, r31
    3be8:	f6 e2       	ldi	r31, 0x26	; 38
    3bea:	7f 2e       	mov	r7, r31
    3bec:	f0 2d       	mov	r31, r0
    3bee:	79 82       	std	Y+1, r7	; 0x01
    3bf0:	a8 86       	std	Y+8, r10	; 0x08
    3bf2:	b9 86       	std	Y+9, r11	; 0x09
    3bf4:	8b e0       	ldi	r24, 0x0B	; 11
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	80 83       	st	Z, r24
    3bfa:	40 e0       	ldi	r20, 0x00	; 0
    3bfc:	be 01       	movw	r22, r28
    3bfe:	c6 01       	movw	r24, r12
    3c00:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c04:	98 82       	st	Y, r9
    3c06:	0f 2e       	mov	r0, r31
    3c08:	f3 e6       	ldi	r31, 0x63	; 99
    3c0a:	4f 2e       	mov	r4, r31
    3c0c:	f0 2d       	mov	r31, r0
    3c0e:	49 82       	std	Y+1, r4	; 0x01
    3c10:	a8 86       	std	Y+8, r10	; 0x08
    3c12:	b9 86       	std	Y+9, r11	; 0x09
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	f8 01       	movw	r30, r16
    3c18:	80 83       	st	Z, r24
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	be 01       	movw	r22, r28
    3c1e:	c6 01       	movw	r24, r12
    3c20:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c24:	98 82       	st	Y, r9
    3c26:	0f 2e       	mov	r0, r31
    3c28:	f7 e2       	ldi	r31, 0x27	; 39
    3c2a:	8f 2e       	mov	r8, r31
    3c2c:	f0 2d       	mov	r31, r0
    3c2e:	89 82       	std	Y+1, r8	; 0x01
    3c30:	a8 86       	std	Y+8, r10	; 0x08
    3c32:	b9 86       	std	Y+9, r11	; 0x09
    3c34:	f8 01       	movw	r30, r16
    3c36:	60 82       	st	Z, r6
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	be 01       	movw	r22, r28
    3c3c:	c6 01       	movw	r24, r12
    3c3e:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c42:	66 e0       	ldi	r22, 0x06	; 6
    3c44:	7d e0       	ldi	r23, 0x0D	; 13
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	86 dd       	rcall	.-1268   	; 0x3758 <__portable_avr_delay_cycles>
    3c4c:	c7 01       	movw	r24, r14
    3c4e:	b6 01       	movw	r22, r12
    3c50:	29 de       	rcall	.-942    	; 0x38a4 <mpu9250_mag_cal>
    3c52:	98 82       	st	Y, r9
    3c54:	79 82       	std	Y+1, r7	; 0x01
    3c56:	a8 86       	std	Y+8, r10	; 0x08
    3c58:	b9 86       	std	Y+9, r11	; 0x09
    3c5a:	8a e0       	ldi	r24, 0x0A	; 10
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	80 83       	st	Z, r24
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	be 01       	movw	r22, r28
    3c64:	c6 01       	movw	r24, r12
    3c66:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c6a:	98 82       	st	Y, r9
    3c6c:	49 82       	std	Y+1, r4	; 0x01
    3c6e:	a8 86       	std	Y+8, r10	; 0x08
    3c70:	b9 86       	std	Y+9, r11	; 0x09
    3c72:	86 e1       	ldi	r24, 0x16	; 22
    3c74:	f8 01       	movw	r30, r16
    3c76:	80 83       	st	Z, r24
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	be 01       	movw	r22, r28
    3c7c:	c6 01       	movw	r24, r12
    3c7e:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c82:	98 82       	st	Y, r9
    3c84:	89 82       	std	Y+1, r8	; 0x01
    3c86:	a8 86       	std	Y+8, r10	; 0x08
    3c88:	b9 86       	std	Y+9, r11	; 0x09
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	60 82       	st	Z, r6
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	be 01       	movw	r22, r28
    3c92:	c6 01       	movw	r24, r12
    3c94:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3c98:	66 e0       	ldi	r22, 0x06	; 6
    3c9a:	7d e0       	ldi	r23, 0x0D	; 13
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	5b dd       	rcall	.-1354   	; 0x3758 <__portable_avr_delay_cycles>
    3ca2:	98 82       	st	Y, r9
    3ca4:	59 82       	std	Y+1, r5	; 0x01
    3ca6:	a8 86       	std	Y+8, r10	; 0x08
    3ca8:	b9 86       	std	Y+9, r11	; 0x09
    3caa:	8c e8       	ldi	r24, 0x8C	; 140
    3cac:	f8 01       	movw	r30, r16
    3cae:	80 83       	st	Z, r24
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	be 01       	movw	r22, r28
    3cb4:	c6 01       	movw	r24, r12
    3cb6:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3cba:	98 82       	st	Y, r9
    3cbc:	79 82       	std	Y+1, r7	; 0x01
    3cbe:	a8 86       	std	Y+8, r10	; 0x08
    3cc0:	b9 86       	std	Y+9, r11	; 0x09
    3cc2:	83 e0       	ldi	r24, 0x03	; 3
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	80 83       	st	Z, r24
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	be 01       	movw	r22, r28
    3ccc:	c6 01       	movw	r24, r12
    3cce:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3cd2:	98 82       	st	Y, r9
    3cd4:	89 82       	std	Y+1, r8	; 0x01
    3cd6:	a8 86       	std	Y+8, r10	; 0x08
    3cd8:	b9 86       	std	Y+9, r11	; 0x09
    3cda:	87 e8       	ldi	r24, 0x87	; 135
    3cdc:	f8 01       	movw	r30, r16
    3cde:	80 83       	st	Z, r24
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
    3ce2:	be 01       	movw	r22, r28
    3ce4:	c6 01       	movw	r24, r12
    3ce6:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	df 90       	pop	r13
    3cf8:	cf 90       	pop	r12
    3cfa:	bf 90       	pop	r11
    3cfc:	af 90       	pop	r10
    3cfe:	9f 90       	pop	r9
    3d00:	8f 90       	pop	r8
    3d02:	7f 90       	pop	r7
    3d04:	6f 90       	pop	r6
    3d06:	5f 90       	pop	r5
    3d08:	4f 90       	pop	r4
    3d0a:	08 95       	ret

00003d0c <mpu9250_int_init>:
    3d0c:	9f 92       	push	r9
    3d0e:	af 92       	push	r10
    3d10:	bf 92       	push	r11
    3d12:	cf 92       	push	r12
    3d14:	df 92       	push	r13
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	6b 01       	movw	r12, r22
    3d24:	7c 01       	movw	r14, r24
    3d26:	cc e1       	ldi	r28, 0x1C	; 28
    3d28:	d0 e2       	ldi	r29, 0x20	; 32
    3d2a:	0f 2e       	mov	r0, r31
    3d2c:	f8 e6       	ldi	r31, 0x68	; 104
    3d2e:	9f 2e       	mov	r9, r31
    3d30:	f0 2d       	mov	r31, r0
    3d32:	98 82       	st	Y, r9
    3d34:	87 e3       	ldi	r24, 0x37	; 55
    3d36:	89 83       	std	Y+1, r24	; 0x01
    3d38:	aa 24       	eor	r10, r10
    3d3a:	a3 94       	inc	r10
    3d3c:	b1 2c       	mov	r11, r1
    3d3e:	a8 86       	std	Y+8, r10	; 0x08
    3d40:	b9 86       	std	Y+9, r11	; 0x09
    3d42:	01 e2       	ldi	r16, 0x21	; 33
    3d44:	12 e2       	ldi	r17, 0x22	; 34
    3d46:	80 e1       	ldi	r24, 0x10	; 16
    3d48:	f8 01       	movw	r30, r16
    3d4a:	80 83       	st	Z, r24
    3d4c:	40 e0       	ldi	r20, 0x00	; 0
    3d4e:	be 01       	movw	r22, r28
    3d50:	c6 01       	movw	r24, r12
    3d52:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3d56:	98 82       	st	Y, r9
    3d58:	88 e3       	ldi	r24, 0x38	; 56
    3d5a:	89 83       	std	Y+1, r24	; 0x01
    3d5c:	a8 86       	std	Y+8, r10	; 0x08
    3d5e:	b9 86       	std	Y+9, r11	; 0x09
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	f8 01       	movw	r30, r16
    3d64:	80 83       	st	Z, r24
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	be 01       	movw	r22, r28
    3d6a:	c6 01       	movw	r24, r12
    3d6c:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	df 90       	pop	r13
    3d7e:	cf 90       	pop	r12
    3d80:	bf 90       	pop	r11
    3d82:	af 90       	pop	r10
    3d84:	9f 90       	pop	r9
    3d86:	08 95       	ret

00003d88 <init_mpu9250>:
    3d88:	7f 92       	push	r7
    3d8a:	8f 92       	push	r8
    3d8c:	9f 92       	push	r9
    3d8e:	af 92       	push	r10
    3d90:	bf 92       	push	r11
    3d92:	cf 92       	push	r12
    3d94:	df 92       	push	r13
    3d96:	ef 92       	push	r14
    3d98:	ff 92       	push	r15
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	6b 01       	movw	r12, r22
    3da4:	7c 01       	movw	r14, r24
    3da6:	74 2e       	mov	r7, r20
    3da8:	cc e1       	ldi	r28, 0x1C	; 28
    3daa:	d0 e2       	ldi	r29, 0x20	; 32
    3dac:	0f 2e       	mov	r0, r31
    3dae:	f8 e6       	ldi	r31, 0x68	; 104
    3db0:	9f 2e       	mov	r9, r31
    3db2:	f0 2d       	mov	r31, r0
    3db4:	98 82       	st	Y, r9
    3db6:	0f 2e       	mov	r0, r31
    3db8:	fb e6       	ldi	r31, 0x6B	; 107
    3dba:	8f 2e       	mov	r8, r31
    3dbc:	f0 2d       	mov	r31, r0
    3dbe:	89 82       	std	Y+1, r8	; 0x01
    3dc0:	aa 24       	eor	r10, r10
    3dc2:	a3 94       	inc	r10
    3dc4:	b1 2c       	mov	r11, r1
    3dc6:	a8 86       	std	Y+8, r10	; 0x08
    3dc8:	b9 86       	std	Y+9, r11	; 0x09
    3dca:	01 e2       	ldi	r16, 0x21	; 33
    3dcc:	12 e2       	ldi	r17, 0x22	; 34
    3dce:	80 e8       	ldi	r24, 0x80	; 128
    3dd0:	f8 01       	movw	r30, r16
    3dd2:	80 83       	st	Z, r24
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	be 01       	movw	r22, r28
    3dd8:	c6 01       	movw	r24, r12
    3dda:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3dde:	66 e3       	ldi	r22, 0x36	; 54
    3de0:	72 e8       	ldi	r23, 0x82	; 130
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	b8 dc       	rcall	.-1680   	; 0x3758 <__portable_avr_delay_cycles>
    3de8:	98 82       	st	Y, r9
    3dea:	89 82       	std	Y+1, r8	; 0x01
    3dec:	a8 86       	std	Y+8, r10	; 0x08
    3dee:	b9 86       	std	Y+9, r11	; 0x09
    3df0:	88 24       	eor	r8, r8
    3df2:	83 94       	inc	r8
    3df4:	f8 01       	movw	r30, r16
    3df6:	80 82       	st	Z, r8
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	be 01       	movw	r22, r28
    3dfc:	c6 01       	movw	r24, r12
    3dfe:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3e02:	98 82       	st	Y, r9
    3e04:	8c e6       	ldi	r24, 0x6C	; 108
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	a8 86       	std	Y+8, r10	; 0x08
    3e0a:	b9 86       	std	Y+9, r11	; 0x09
    3e0c:	f8 01       	movw	r30, r16
    3e0e:	10 82       	st	Z, r1
    3e10:	40 e0       	ldi	r20, 0x00	; 0
    3e12:	be 01       	movw	r22, r28
    3e14:	c6 01       	movw	r24, r12
    3e16:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3e1a:	c7 01       	movw	r24, r14
    3e1c:	b6 01       	movw	r22, r12
    3e1e:	c6 dc       	rcall	.-1652   	; 0x37ac <mpu9250_gyro_init>
    3e20:	c7 01       	movw	r24, r14
    3e22:	b6 01       	movw	r22, r12
    3e24:	01 dd       	rcall	.-1534   	; 0x3828 <mpu9250_acc_init>
    3e26:	47 2d       	mov	r20, r7
    3e28:	c7 01       	movw	r24, r14
    3e2a:	b6 01       	movw	r22, r12
    3e2c:	a0 dc       	rcall	.-1728   	; 0x376e <mpu9250_ODR_init>
    3e2e:	c7 01       	movw	r24, r14
    3e30:	b6 01       	movw	r22, r12
    3e32:	6c df       	rcall	.-296    	; 0x3d0c <mpu9250_int_init>
    3e34:	c7 01       	movw	r24, r14
    3e36:	b6 01       	movw	r22, r12
    3e38:	7e de       	rcall	.-772    	; 0x3b36 <mpu9250_mag_init>
    3e3a:	e0 e6       	ldi	r30, 0x60	; 96
    3e3c:	f6 e0       	ldi	r31, 0x06	; 6
    3e3e:	81 e1       	ldi	r24, 0x11	; 17
    3e40:	80 8b       	std	Z+16, r24	; 0x10
    3e42:	82 86       	std	Z+10, r8	; 0x0a
    3e44:	83 e0       	ldi	r24, 0x03	; 3
    3e46:	81 87       	std	Z+9, r24	; 0x09
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	af 90       	pop	r10
    3e5c:	9f 90       	pop	r9
    3e5e:	8f 90       	pop	r8
    3e60:	7f 90       	pop	r7
    3e62:	08 95       	ret

00003e64 <read_mpu9250>:
    3e64:	4f 92       	push	r4
    3e66:	5f 92       	push	r5
    3e68:	6f 92       	push	r6
    3e6a:	7f 92       	push	r7
    3e6c:	8f 92       	push	r8
    3e6e:	9f 92       	push	r9
    3e70:	af 92       	push	r10
    3e72:	bf 92       	push	r11
    3e74:	cf 92       	push	r12
    3e76:	df 92       	push	r13
    3e78:	ef 92       	push	r14
    3e7a:	ff 92       	push	r15
    3e7c:	0f 93       	push	r16
    3e7e:	1f 93       	push	r17
    3e80:	cf 93       	push	r28
    3e82:	df 93       	push	r29
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	68 97       	sbiw	r28, 0x18	; 24
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	8c 01       	movw	r16, r24
    3e90:	db 01       	movw	r26, r22
    3e92:	ca 01       	movw	r24, r20
    3e94:	ec e1       	ldi	r30, 0x1C	; 28
    3e96:	f0 e2       	ldi	r31, 0x20	; 32
    3e98:	28 e6       	ldi	r18, 0x68	; 104
    3e9a:	20 83       	st	Z, r18
    3e9c:	2a e3       	ldi	r18, 0x3A	; 58
    3e9e:	21 83       	std	Z+1, r18	; 0x01
    3ea0:	26 e1       	ldi	r18, 0x16	; 22
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	20 87       	std	Z+8, r18	; 0x08
    3ea6:	31 87       	std	Z+9, r19	; 0x09
    3ea8:	41 e0       	ldi	r20, 0x01	; 1
    3eaa:	bf 01       	movw	r22, r30
    3eac:	0e 94 81 07 	call	0xf02	; 0xf02 <twi_master_transfer>
    3eb0:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3eb4:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3eb8:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3ebc:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3ec0:	60 91 22 22 	lds	r22, 0x2222	; 0x802222 <mpu9250_twi_data+0x1>
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	76 2f       	mov	r23, r22
    3ec8:	66 27       	eor	r22, r22
    3eca:	80 91 23 22 	lds	r24, 0x2223	; 0x802223 <mpu9250_twi_data+0x2>
    3ece:	68 0f       	add	r22, r24
    3ed0:	71 1d       	adc	r23, r1
    3ed2:	07 2e       	mov	r0, r23
    3ed4:	00 0c       	add	r0, r0
    3ed6:	88 0b       	sbc	r24, r24
    3ed8:	99 0b       	sbc	r25, r25
    3eda:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    3ede:	a7 01       	movw	r20, r14
    3ee0:	96 01       	movw	r18, r12
    3ee2:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    3ee6:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    3eea:	69 83       	std	Y+1, r22	; 0x01
    3eec:	7a 83       	std	Y+2, r23	; 0x02
    3eee:	8b 83       	std	Y+3, r24	; 0x03
    3ef0:	9c 83       	std	Y+4, r25	; 0x04
    3ef2:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3ef6:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3efa:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3efe:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3f02:	60 91 24 22 	lds	r22, 0x2224	; 0x802224 <mpu9250_twi_data+0x3>
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	76 2f       	mov	r23, r22
    3f0a:	66 27       	eor	r22, r22
    3f0c:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <mpu9250_twi_data+0x4>
    3f10:	68 0f       	add	r22, r24
    3f12:	71 1d       	adc	r23, r1
    3f14:	07 2e       	mov	r0, r23
    3f16:	00 0c       	add	r0, r0
    3f18:	88 0b       	sbc	r24, r24
    3f1a:	99 0b       	sbc	r25, r25
    3f1c:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    3f20:	a7 01       	movw	r20, r14
    3f22:	96 01       	movw	r18, r12
    3f24:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    3f28:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    3f2c:	6d 83       	std	Y+5, r22	; 0x05
    3f2e:	7e 83       	std	Y+6, r23	; 0x06
    3f30:	8f 83       	std	Y+7, r24	; 0x07
    3f32:	98 87       	std	Y+8, r25	; 0x08
    3f34:	c0 90 27 20 	lds	r12, 0x2027	; 0x802027 <ACC_SENSITIVITY>
    3f38:	d0 90 28 20 	lds	r13, 0x2028	; 0x802028 <ACC_SENSITIVITY+0x1>
    3f3c:	e0 90 29 20 	lds	r14, 0x2029	; 0x802029 <ACC_SENSITIVITY+0x2>
    3f40:	f0 90 2a 20 	lds	r15, 0x202A	; 0x80202a <ACC_SENSITIVITY+0x3>
    3f44:	60 91 26 22 	lds	r22, 0x2226	; 0x802226 <mpu9250_twi_data+0x5>
    3f48:	70 e0       	ldi	r23, 0x00	; 0
    3f4a:	76 2f       	mov	r23, r22
    3f4c:	66 27       	eor	r22, r22
    3f4e:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <mpu9250_twi_data+0x6>
    3f52:	68 0f       	add	r22, r24
    3f54:	71 1d       	adc	r23, r1
    3f56:	07 2e       	mov	r0, r23
    3f58:	00 0c       	add	r0, r0
    3f5a:	88 0b       	sbc	r24, r24
    3f5c:	99 0b       	sbc	r25, r25
    3f5e:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    3f62:	a7 01       	movw	r20, r14
    3f64:	96 01       	movw	r18, r12
    3f66:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    3f6a:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    3f6e:	69 87       	std	Y+9, r22	; 0x09
    3f70:	7a 87       	std	Y+10, r23	; 0x0a
    3f72:	8b 87       	std	Y+11, r24	; 0x0b
    3f74:	9c 87       	std	Y+12, r25	; 0x0c
    3f76:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    3f7a:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    3f7e:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    3f82:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    3f86:	60 91 2a 22 	lds	r22, 0x222A	; 0x80222a <mpu9250_twi_data+0x9>
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	76 2f       	mov	r23, r22
    3f8e:	66 27       	eor	r22, r22
    3f90:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <mpu9250_twi_data+0xa>
    3f94:	68 0f       	add	r22, r24
    3f96:	71 1d       	adc	r23, r1
    3f98:	07 2e       	mov	r0, r23
    3f9a:	00 0c       	add	r0, r0
    3f9c:	88 0b       	sbc	r24, r24
    3f9e:	99 0b       	sbc	r25, r25
    3fa0:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    3fa4:	a7 01       	movw	r20, r14
    3fa6:	96 01       	movw	r18, r12
    3fa8:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    3fac:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    3fb0:	6d 87       	std	Y+13, r22	; 0x0d
    3fb2:	7e 87       	std	Y+14, r23	; 0x0e
    3fb4:	8f 87       	std	Y+15, r24	; 0x0f
    3fb6:	98 8b       	std	Y+16, r25	; 0x10
    3fb8:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    3fbc:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    3fc0:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    3fc4:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    3fc8:	60 91 2c 22 	lds	r22, 0x222C	; 0x80222c <mpu9250_twi_data+0xb>
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	76 2f       	mov	r23, r22
    3fd0:	66 27       	eor	r22, r22
    3fd2:	80 91 2d 22 	lds	r24, 0x222D	; 0x80222d <mpu9250_twi_data+0xc>
    3fd6:	68 0f       	add	r22, r24
    3fd8:	71 1d       	adc	r23, r1
    3fda:	07 2e       	mov	r0, r23
    3fdc:	00 0c       	add	r0, r0
    3fde:	88 0b       	sbc	r24, r24
    3fe0:	99 0b       	sbc	r25, r25
    3fe2:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    3fe6:	a7 01       	movw	r20, r14
    3fe8:	96 01       	movw	r18, r12
    3fea:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    3fee:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    3ff2:	69 8b       	std	Y+17, r22	; 0x11
    3ff4:	7a 8b       	std	Y+18, r23	; 0x12
    3ff6:	8b 8b       	std	Y+19, r24	; 0x13
    3ff8:	9c 8b       	std	Y+20, r25	; 0x14
    3ffa:	c0 90 2b 20 	lds	r12, 0x202B	; 0x80202b <GYRO_SENSITIVITY>
    3ffe:	d0 90 2c 20 	lds	r13, 0x202C	; 0x80202c <GYRO_SENSITIVITY+0x1>
    4002:	e0 90 2d 20 	lds	r14, 0x202D	; 0x80202d <GYRO_SENSITIVITY+0x2>
    4006:	f0 90 2e 20 	lds	r15, 0x202E	; 0x80202e <GYRO_SENSITIVITY+0x3>
    400a:	60 91 2e 22 	lds	r22, 0x222E	; 0x80222e <mpu9250_twi_data+0xd>
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	76 2f       	mov	r23, r22
    4012:	66 27       	eor	r22, r22
    4014:	80 91 2f 22 	lds	r24, 0x222F	; 0x80222f <mpu9250_twi_data+0xe>
    4018:	68 0f       	add	r22, r24
    401a:	71 1d       	adc	r23, r1
    401c:	07 2e       	mov	r0, r23
    401e:	00 0c       	add	r0, r0
    4020:	88 0b       	sbc	r24, r24
    4022:	99 0b       	sbc	r25, r25
    4024:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    4028:	a7 01       	movw	r20, r14
    402a:	96 01       	movw	r18, r12
    402c:	0e 94 1d 28 	call	0x503a	; 0x503a <__divsf3>
    4030:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    4034:	6d 8b       	std	Y+21, r22	; 0x15
    4036:	7e 8b       	std	Y+22, r23	; 0x16
    4038:	8f 8b       	std	Y+23, r24	; 0x17
    403a:	98 8f       	std	Y+24, r25	; 0x18
    403c:	c0 90 17 22 	lds	r12, 0x2217	; 0x802217 <ASAX>
    4040:	d0 90 18 22 	lds	r13, 0x2218	; 0x802218 <ASAX+0x1>
    4044:	e0 90 19 22 	lds	r14, 0x2219	; 0x802219 <ASAX+0x2>
    4048:	f0 90 1a 22 	lds	r15, 0x221A	; 0x80221a <ASAX+0x3>
    404c:	60 91 31 22 	lds	r22, 0x2231	; 0x802231 <mpu9250_twi_data+0x10>
    4050:	70 e0       	ldi	r23, 0x00	; 0
    4052:	76 2f       	mov	r23, r22
    4054:	66 27       	eor	r22, r22
    4056:	80 91 30 22 	lds	r24, 0x2230	; 0x802230 <mpu9250_twi_data+0xf>
    405a:	68 0f       	add	r22, r24
    405c:	71 1d       	adc	r23, r1
    405e:	07 2e       	mov	r0, r23
    4060:	00 0c       	add	r0, r0
    4062:	88 0b       	sbc	r24, r24
    4064:	99 0b       	sbc	r25, r25
    4066:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    406a:	a7 01       	movw	r20, r14
    406c:	96 01       	movw	r18, r12
    406e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 ec       	ldi	r20, 0xC0	; 192
    4078:	50 e4       	ldi	r21, 0x40	; 64
    407a:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    407e:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    4082:	2b 01       	movw	r4, r22
    4084:	3c 01       	movw	r6, r24
    4086:	c0 90 13 22 	lds	r12, 0x2213	; 0x802213 <ASAY>
    408a:	d0 90 14 22 	lds	r13, 0x2214	; 0x802214 <ASAY+0x1>
    408e:	e0 90 15 22 	lds	r14, 0x2215	; 0x802215 <ASAY+0x2>
    4092:	f0 90 16 22 	lds	r15, 0x2216	; 0x802216 <ASAY+0x3>
    4096:	60 91 33 22 	lds	r22, 0x2233	; 0x802233 <mpu9250_twi_data+0x12>
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	76 2f       	mov	r23, r22
    409e:	66 27       	eor	r22, r22
    40a0:	80 91 32 22 	lds	r24, 0x2232	; 0x802232 <mpu9250_twi_data+0x11>
    40a4:	68 0f       	add	r22, r24
    40a6:	71 1d       	adc	r23, r1
    40a8:	07 2e       	mov	r0, r23
    40aa:	00 0c       	add	r0, r0
    40ac:	88 0b       	sbc	r24, r24
    40ae:	99 0b       	sbc	r25, r25
    40b0:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    40b4:	a7 01       	movw	r20, r14
    40b6:	96 01       	movw	r18, r12
    40b8:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 ec       	ldi	r20, 0xC0	; 192
    40c2:	50 e4       	ldi	r21, 0x40	; 64
    40c4:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    40c8:	0e 94 85 28 	call	0x510a	; 0x510a <__fixsfsi>
    40cc:	4b 01       	movw	r8, r22
    40ce:	5c 01       	movw	r10, r24
    40d0:	c0 90 0f 22 	lds	r12, 0x220F	; 0x80220f <ASAZ>
    40d4:	d0 90 10 22 	lds	r13, 0x2210	; 0x802210 <ASAZ+0x1>
    40d8:	e0 90 11 22 	lds	r14, 0x2211	; 0x802211 <ASAZ+0x2>
    40dc:	f0 90 12 22 	lds	r15, 0x2212	; 0x802212 <ASAZ+0x3>
    40e0:	60 91 35 22 	lds	r22, 0x2235	; 0x802235 <mpu9250_twi_data+0x14>
    40e4:	70 e0       	ldi	r23, 0x00	; 0
    40e6:	76 2f       	mov	r23, r22
    40e8:	66 27       	eor	r22, r22
    40ea:	80 91 34 22 	lds	r24, 0x2234	; 0x802234 <mpu9250_twi_data+0x13>
    40ee:	68 0f       	add	r22, r24
    40f0:	71 1d       	adc	r23, r1
    40f2:	07 2e       	mov	r0, r23
    40f4:	00 0c       	add	r0, r0
    40f6:	88 0b       	sbc	r24, r24
    40f8:	99 0b       	sbc	r25, r25
    40fa:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    40fe:	a7 01       	movw	r20, r14
    4100:	96 01       	movw	r18, r12
    4102:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	40 ec       	ldi	r20, 0xC0	; 192
    410c:	50 e4       	ldi	r21, 0x40	; 64
    410e:	0e 94 c4 29 	call	0x5388	; 0x5388 <__mulsf3>
    4112:	fb d7       	rcall	.+4086   	; 0x510a <__fixsfsi>
    4114:	6b 01       	movw	r12, r22
    4116:	7c 01       	movw	r14, r24
    4118:	60 91 28 22 	lds	r22, 0x2228	; 0x802228 <mpu9250_twi_data+0x7>
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	76 2f       	mov	r23, r22
    4120:	66 27       	eor	r22, r22
    4122:	80 91 29 22 	lds	r24, 0x2229	; 0x802229 <mpu9250_twi_data+0x8>
    4126:	68 0f       	add	r22, r24
    4128:	71 1d       	adc	r23, r1
    412a:	07 2e       	mov	r0, r23
    412c:	00 0c       	add	r0, r0
    412e:	88 0b       	sbc	r24, r24
    4130:	99 0b       	sbc	r25, r25
    4132:	0e 94 b8 28 	call	0x5170	; 0x5170 <__floatsisf>
    4136:	23 e4       	ldi	r18, 0x43	; 67
    4138:	3d ea       	ldi	r19, 0xAD	; 173
    413a:	45 e5       	ldi	r20, 0x55	; 85
    413c:	50 e4       	ldi	r21, 0x40	; 64
    413e:	7d d7       	rcall	.+3834   	; 0x503a <__divsf3>
    4140:	e4 d7       	rcall	.+4040   	; 0x510a <__fixsfsi>
    4142:	6c 5c       	subi	r22, 0xCC	; 204
    4144:	77 4f       	sbci	r23, 0xF7	; 247
    4146:	e1 e2       	ldi	r30, 0x21	; 33
    4148:	f2 e2       	ldi	r31, 0x22	; 34
    414a:	80 81       	ld	r24, Z
    414c:	f8 01       	movw	r30, r16
    414e:	80 83       	st	Z, r24
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	9a 81       	ldd	r25, Y+2	; 0x02
    4154:	81 83       	std	Z+1, r24	; 0x01
    4156:	92 83       	std	Z+2, r25	; 0x02
    4158:	8d 81       	ldd	r24, Y+5	; 0x05
    415a:	9e 81       	ldd	r25, Y+6	; 0x06
    415c:	83 83       	std	Z+3, r24	; 0x03
    415e:	94 83       	std	Z+4, r25	; 0x04
    4160:	89 85       	ldd	r24, Y+9	; 0x09
    4162:	9a 85       	ldd	r25, Y+10	; 0x0a
    4164:	85 83       	std	Z+5, r24	; 0x05
    4166:	96 83       	std	Z+6, r25	; 0x06
    4168:	67 83       	std	Z+7, r22	; 0x07
    416a:	70 87       	std	Z+8, r23	; 0x08
    416c:	8d 85       	ldd	r24, Y+13	; 0x0d
    416e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4170:	81 87       	std	Z+9, r24	; 0x09
    4172:	92 87       	std	Z+10, r25	; 0x0a
    4174:	89 89       	ldd	r24, Y+17	; 0x11
    4176:	9a 89       	ldd	r25, Y+18	; 0x12
    4178:	83 87       	std	Z+11, r24	; 0x0b
    417a:	94 87       	std	Z+12, r25	; 0x0c
    417c:	8d 89       	ldd	r24, Y+21	; 0x15
    417e:	9e 89       	ldd	r25, Y+22	; 0x16
    4180:	85 87       	std	Z+13, r24	; 0x0d
    4182:	96 87       	std	Z+14, r25	; 0x0e
    4184:	47 86       	std	Z+15, r4	; 0x0f
    4186:	50 8a       	std	Z+16, r5	; 0x10
    4188:	81 8a       	std	Z+17, r8	; 0x11
    418a:	92 8a       	std	Z+18, r9	; 0x12
    418c:	c3 8a       	std	Z+19, r12	; 0x13
    418e:	d4 8a       	std	Z+20, r13	; 0x14
    4190:	c8 01       	movw	r24, r16
    4192:	68 96       	adiw	r28, 0x18	; 24
    4194:	cd bf       	out	0x3d, r28	; 61
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	df 90       	pop	r13
    41a6:	cf 90       	pop	r12
    41a8:	bf 90       	pop	r11
    41aa:	af 90       	pop	r10
    41ac:	9f 90       	pop	r9
    41ae:	8f 90       	pop	r8
    41b0:	7f 90       	pop	r7
    41b2:	6f 90       	pop	r6
    41b4:	5f 90       	pop	r5
    41b6:	4f 90       	pop	r4
    41b8:	08 95       	ret

000041ba <__vector_64>:

ISR(MPU9250_INT_vect)
{
    41ba:	1f 92       	push	r1
    41bc:	0f 92       	push	r0
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	0f 92       	push	r0
    41c2:	11 24       	eor	r1, r1
    41c4:	8f 93       	push	r24
    41c6:	9f 93       	push	r25
    41c8:	af 93       	push	r26
    41ca:	bf 93       	push	r27
	//printf("jkeavrf\n");
	data_rdy_flag = 1;
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <data_rdy_flag>
	timerflag = 1;
    41d2:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <timerflag>
	time++;
    41d6:	80 91 1b 22 	lds	r24, 0x221B	; 0x80221b <time>
    41da:	90 91 1c 22 	lds	r25, 0x221C	; 0x80221c <time+0x1>
    41de:	a0 91 1d 22 	lds	r26, 0x221D	; 0x80221d <time+0x2>
    41e2:	b0 91 1e 22 	lds	r27, 0x221E	; 0x80221e <time+0x3>
    41e6:	01 96       	adiw	r24, 0x01	; 1
    41e8:	a1 1d       	adc	r26, r1
    41ea:	b1 1d       	adc	r27, r1
    41ec:	80 93 1b 22 	sts	0x221B, r24	; 0x80221b <time>
    41f0:	90 93 1c 22 	sts	0x221C, r25	; 0x80221c <time+0x1>
    41f4:	a0 93 1d 22 	sts	0x221D, r26	; 0x80221d <time+0x2>
    41f8:	b0 93 1e 22 	sts	0x221E, r27	; 0x80221e <time+0x3>
}
    41fc:	bf 91       	pop	r27
    41fe:	af 91       	pop	r26
    4200:	9f 91       	pop	r25
    4202:	8f 91       	pop	r24
    4204:	0f 90       	pop	r0
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	0f 90       	pop	r0
    420a:	1f 90       	pop	r1
    420c:	18 95       	reti

0000420e <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    4214:	0e 94 ed 07 	call	0xfda	; 0xfda <usart_getchar>
    4218:	88 83       	st	Y, r24
}
    421a:	df 91       	pop	r29
    421c:	cf 91       	pop	r28
    421e:	08 95       	ret

00004220 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    4220:	0c 94 e5 07 	jmp	0xfca	; 0xfca <usart_putchar>
}
    4224:	08 95       	ret

00004226 <uart_sd_init>:

#include <asf.h>
#include "uart.h"

void uart_sd_init()
{
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	27 97       	sbiw	r28, 0x07	; 7
    4230:	cd bf       	out	0x3d, r28	; 61
    4232:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4234:	60 e1       	ldi	r22, 0x10	; 16
    4236:	84 e0       	ldi	r24, 0x04	; 4
    4238:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
		.charlength =	UART_SD_SERIAL_CHAR_LEN,
		.paritytype =	UART_SD_SERIAL_PARITY,
		.stopbits	=	UART_SD_SERIAL_STOP_BIT
	};
	
	UART_SD_PORT.DIR |= UART_SD_TX_PIN;	// set the USART transmit pin to output
    423c:	e0 e6       	ldi	r30, 0x60	; 96
    423e:	f6 e0       	ldi	r31, 0x06	; 6
    4240:	80 81       	ld	r24, Z
    4242:	88 60       	ori	r24, 0x08	; 8
    4244:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    4246:	80 ea       	ldi	r24, 0xA0	; 160
    4248:	99 e0       	ldi	r25, 0x09	; 9
    424a:	80 93 25 23 	sts	0x2325, r24	; 0x802325 <stdio_base>
    424e:	90 93 26 23 	sts	0x2326, r25	; 0x802326 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4252:	80 e1       	ldi	r24, 0x10	; 16
    4254:	91 e2       	ldi	r25, 0x21	; 33
    4256:	80 93 23 23 	sts	0x2323, r24	; 0x802323 <ptr_put>
    425a:	90 93 24 23 	sts	0x2324, r25	; 0x802324 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    425e:	87 e0       	ldi	r24, 0x07	; 7
    4260:	91 e2       	ldi	r25, 0x21	; 33
    4262:	80 93 21 23 	sts	0x2321, r24	; 0x802321 <ptr_get>
    4266:	90 93 22 23 	sts	0x2322, r25	; 0x802322 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    426a:	ed e3       	ldi	r30, 0x3D	; 61
    426c:	f0 e2       	ldi	r31, 0x20	; 32
    426e:	84 81       	ldd	r24, Z+4	; 0x04
    4270:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    4272:	85 81       	ldd	r24, Z+5	; 0x05
    4274:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    4276:	86 81       	ldd	r24, Z+6	; 0x06
    4278:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    427a:	80 81       	ld	r24, Z
    427c:	91 81       	ldd	r25, Z+1	; 0x01
    427e:	a2 81       	ldd	r26, Z+2	; 0x02
    4280:	b3 81       	ldd	r27, Z+3	; 0x03
    4282:	89 83       	std	Y+1, r24	; 0x01
    4284:	9a 83       	std	Y+2, r25	; 0x02
    4286:	ab 83       	std	Y+3, r26	; 0x03
    4288:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    428a:	60 e1       	ldi	r22, 0x10	; 16
    428c:	84 e0       	ldi	r24, 0x04	; 4
    428e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    4292:	be 01       	movw	r22, r28
    4294:	6f 5f       	subi	r22, 0xFF	; 255
    4296:	7f 4f       	sbci	r23, 0xFF	; 255
    4298:	80 ea       	ldi	r24, 0xA0	; 160
    429a:	99 e0       	ldi	r25, 0x09	; 9
    429c:	0e 94 06 09 	call	0x120c	; 0x120c <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    42a0:	68 e7       	ldi	r22, 0x78	; 120
    42a2:	71 e0       	ldi	r23, 0x01	; 1
    42a4:	81 e9       	ldi	r24, 0x91	; 145
    42a6:	91 e0       	ldi	r25, 0x01	; 1
    42a8:	0e 94 b7 2a 	call	0x556e	; 0x556e <fdevopen>
	
	stdio_serial_init(UART_SD_SERIAL, &usart_config); // function maps the serial output to printf,
	
}
    42ac:	27 96       	adiw	r28, 0x07	; 7
    42ae:	cd bf       	out	0x3d, r28	; 61
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	df 91       	pop	r29
    42b4:	cf 91       	pop	r28
    42b6:	08 95       	ret

000042b8 <uart_gps_init_default>:

void uart_gps_init_default()
{
    42b8:	0f 93       	push	r16
    42ba:	1f 93       	push	r17
    42bc:	cf 93       	push	r28
    42be:	df 93       	push	r29
    42c0:	cd b7       	in	r28, 0x3d	; 61
    42c2:	de b7       	in	r29, 0x3e	; 62
    42c4:	27 97       	sbiw	r28, 0x07	; 7
    42c6:	cd bf       	out	0x3d, r28	; 61
    42c8:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    42ca:	60 e1       	ldi	r22, 0x10	; 16
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
		.charlength =	UART_GPS_SERIAL_CHAR_LEN,
		.paritytype =	UART_GPS_SERIAL_PARITY,
		.stopbits	=	UART_GPS_SERIAL_STOP_BIT
	};
	
	UART_GPS_PORT.DIR |= UART_GPS_TX_PIN;	// set the USART transmit pin to output
    42d2:	e0 e4       	ldi	r30, 0x40	; 64
    42d4:	f6 e0       	ldi	r31, 0x06	; 6
    42d6:	80 81       	ld	r24, Z
    42d8:	88 60       	ori	r24, 0x08	; 8
    42da:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    42dc:	00 ea       	ldi	r16, 0xA0	; 160
    42de:	18 e0       	ldi	r17, 0x08	; 8
    42e0:	00 93 25 23 	sts	0x2325, r16	; 0x802325 <stdio_base>
    42e4:	10 93 26 23 	sts	0x2326, r17	; 0x802326 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    42e8:	80 e1       	ldi	r24, 0x10	; 16
    42ea:	91 e2       	ldi	r25, 0x21	; 33
    42ec:	80 93 23 23 	sts	0x2323, r24	; 0x802323 <ptr_put>
    42f0:	90 93 24 23 	sts	0x2324, r25	; 0x802324 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    42f4:	87 e0       	ldi	r24, 0x07	; 7
    42f6:	91 e2       	ldi	r25, 0x21	; 33
    42f8:	80 93 21 23 	sts	0x2321, r24	; 0x802321 <ptr_get>
    42fc:	90 93 22 23 	sts	0x2322, r25	; 0x802322 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    4300:	e6 e3       	ldi	r30, 0x36	; 54
    4302:	f0 e2       	ldi	r31, 0x20	; 32
    4304:	84 81       	ldd	r24, Z+4	; 0x04
    4306:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    4308:	85 81       	ldd	r24, Z+5	; 0x05
    430a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    430c:	86 81       	ldd	r24, Z+6	; 0x06
    430e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    4310:	80 81       	ld	r24, Z
    4312:	91 81       	ldd	r25, Z+1	; 0x01
    4314:	a2 81       	ldd	r26, Z+2	; 0x02
    4316:	b3 81       	ldd	r27, Z+3	; 0x03
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	9a 83       	std	Y+2, r25	; 0x02
    431c:	ab 83       	std	Y+3, r26	; 0x03
    431e:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    4320:	60 e1       	ldi	r22, 0x10	; 16
    4322:	83 e0       	ldi	r24, 0x03	; 3
    4324:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    4328:	be 01       	movw	r22, r28
    432a:	6f 5f       	subi	r22, 0xFF	; 255
    432c:	7f 4f       	sbci	r23, 0xFF	; 255
    432e:	80 ea       	ldi	r24, 0xA0	; 160
    4330:	98 e0       	ldi	r25, 0x08	; 8
    4332:	0e 94 06 09 	call	0x120c	; 0x120c <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4336:	68 e7       	ldi	r22, 0x78	; 120
    4338:	71 e0       	ldi	r23, 0x01	; 1
    433a:	81 e9       	ldi	r24, 0x91	; 145
    433c:	91 e0       	ldi	r25, 0x01	; 1
    433e:	0e 94 b7 2a 	call	0x556e	; 0x556e <fdevopen>
	
	stdio_serial_init(UART_GPS_SERIAL, &usart_config);
	USARTC0.CTRLA |= 0x10;
    4342:	f8 01       	movw	r30, r16
    4344:	83 81       	ldd	r24, Z+3	; 0x03
    4346:	80 61       	ori	r24, 0x10	; 16
    4348:	83 83       	std	Z+3, r24	; 0x03
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
    434a:	e0 ea       	ldi	r30, 0xA0	; 160
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	81 60       	ori	r24, 0x01	; 1
    4352:	82 83       	std	Z+2, r24	; 0x02
}
    4354:	27 96       	adiw	r28, 0x07	; 7
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	08 95       	ret

00004364 <uart_gps_init>:

void uart_gps_init()
{
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	27 97       	sbiw	r28, 0x07	; 7
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	60 e1       	ldi	r22, 0x10	; 16
    4378:	83 e0       	ldi	r24, 0x03	; 3
    437a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
		.charlength =	UART_GPS_SERIAL_CHAR_LEN,
		.paritytype =	UART_GPS_SERIAL_PARITY,
		.stopbits	=	UART_GPS_SERIAL_STOP_BIT
	};
	
	UART_GPS_PORT.DIR |= UART_GPS_TX_PIN;	// set the USART transmit pin to output
    437e:	e0 e4       	ldi	r30, 0x40	; 64
    4380:	f6 e0       	ldi	r31, 0x06	; 6
    4382:	80 81       	ld	r24, Z
    4384:	88 60       	ori	r24, 0x08	; 8
    4386:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    4388:	00 ea       	ldi	r16, 0xA0	; 160
    438a:	18 e0       	ldi	r17, 0x08	; 8
    438c:	00 93 25 23 	sts	0x2325, r16	; 0x802325 <stdio_base>
    4390:	10 93 26 23 	sts	0x2326, r17	; 0x802326 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4394:	80 e1       	ldi	r24, 0x10	; 16
    4396:	91 e2       	ldi	r25, 0x21	; 33
    4398:	80 93 23 23 	sts	0x2323, r24	; 0x802323 <ptr_put>
    439c:	90 93 24 23 	sts	0x2324, r25	; 0x802324 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    43a0:	87 e0       	ldi	r24, 0x07	; 7
    43a2:	91 e2       	ldi	r25, 0x21	; 33
    43a4:	80 93 21 23 	sts	0x2321, r24	; 0x802321 <ptr_get>
    43a8:	90 93 22 23 	sts	0x2322, r25	; 0x802322 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    43ac:	ef e2       	ldi	r30, 0x2F	; 47
    43ae:	f0 e2       	ldi	r31, 0x20	; 32
    43b0:	84 81       	ldd	r24, Z+4	; 0x04
    43b2:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    43b4:	85 81       	ldd	r24, Z+5	; 0x05
    43b6:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    43b8:	86 81       	ldd	r24, Z+6	; 0x06
    43ba:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    43bc:	80 81       	ld	r24, Z
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	a2 81       	ldd	r26, Z+2	; 0x02
    43c2:	b3 81       	ldd	r27, Z+3	; 0x03
    43c4:	89 83       	std	Y+1, r24	; 0x01
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	ab 83       	std	Y+3, r26	; 0x03
    43ca:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    43cc:	60 e1       	ldi	r22, 0x10	; 16
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    43d4:	be 01       	movw	r22, r28
    43d6:	6f 5f       	subi	r22, 0xFF	; 255
    43d8:	7f 4f       	sbci	r23, 0xFF	; 255
    43da:	80 ea       	ldi	r24, 0xA0	; 160
    43dc:	98 e0       	ldi	r25, 0x08	; 8
    43de:	0e 94 06 09 	call	0x120c	; 0x120c <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    43e2:	68 e7       	ldi	r22, 0x78	; 120
    43e4:	71 e0       	ldi	r23, 0x01	; 1
    43e6:	81 e9       	ldi	r24, 0x91	; 145
    43e8:	91 e0       	ldi	r25, 0x01	; 1
    43ea:	0e 94 b7 2a 	call	0x556e	; 0x556e <fdevopen>
	
	stdio_serial_init(UART_GPS_SERIAL, &usart_config);
	USARTC0.CTRLA |= 0x10;
    43ee:	f8 01       	movw	r30, r16
    43f0:	83 81       	ldd	r24, Z+3	; 0x03
    43f2:	80 61       	ori	r24, 0x10	; 16
    43f4:	83 83       	std	Z+3, r24	; 0x03
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
    43f6:	e0 ea       	ldi	r30, 0xA0	; 160
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	82 81       	ldd	r24, Z+2	; 0x02
    43fc:	81 60       	ori	r24, 0x01	; 1
    43fe:	82 83       	std	Z+2, r24	; 0x02
    4400:	27 96       	adiw	r28, 0x07	; 7
    4402:	cd bf       	out	0x3d, r28	; 61
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	08 95       	ret

00004410 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4410:	04 c0       	rjmp	.+8      	; 0x441a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4412:	61 50       	subi	r22, 0x01	; 1
    4414:	71 09       	sbc	r23, r1
    4416:	81 09       	sbc	r24, r1
    4418:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    441a:	61 15       	cp	r22, r1
    441c:	71 05       	cpc	r23, r1
    441e:	81 05       	cpc	r24, r1
    4420:	91 05       	cpc	r25, r1
    4422:	b9 f7       	brne	.-18     	; 0x4412 <__portable_avr_delay_cycles+0x2>
    4424:	08 95       	ret

00004426 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    4426:	00 97       	sbiw	r24, 0x00	; 0
    4428:	09 f4       	brne	.+2      	; 0x442c <sysclk_enable_peripheral_clock+0x6>
    442a:	d5 c0       	rjmp	.+426    	; 0x45d6 <sysclk_enable_peripheral_clock+0x1b0>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    442c:	80 3c       	cpi	r24, 0xC0	; 192
    442e:	91 05       	cpc	r25, r1
    4430:	29 f4       	brne	.+10     	; 0x443c <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    4432:	60 e1       	ldi	r22, 0x10	; 16
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    443a:	08 95       	ret
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    443c:	81 15       	cp	r24, r1
    443e:	24 e0       	ldi	r18, 0x04	; 4
    4440:	92 07       	cpc	r25, r18
    4442:	29 f4       	brne	.+10     	; 0x444e <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4444:	64 e0       	ldi	r22, 0x04	; 4
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    444c:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    444e:	80 38       	cpi	r24, 0x80	; 128
    4450:	21 e0       	ldi	r18, 0x01	; 1
    4452:	92 07       	cpc	r25, r18
    4454:	29 f4       	brne	.+10     	; 0x4460 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    4456:	62 e0       	ldi	r22, 0x02	; 2
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    445e:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    4460:	81 15       	cp	r24, r1
    4462:	21 e0       	ldi	r18, 0x01	; 1
    4464:	92 07       	cpc	r25, r18
    4466:	29 f4       	brne	.+10     	; 0x4472 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4468:	61 e0       	ldi	r22, 0x01	; 1
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4470:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    4472:	80 38       	cpi	r24, 0x80	; 128
    4474:	23 e0       	ldi	r18, 0x03	; 3
    4476:	92 07       	cpc	r25, r18
    4478:	29 f4       	brne	.+10     	; 0x4484 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    447a:	61 e0       	ldi	r22, 0x01	; 1
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4482:	08 95       	ret
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    4484:	81 15       	cp	r24, r1
    4486:	22 e0       	ldi	r18, 0x02	; 2
    4488:	92 07       	cpc	r25, r18
    448a:	29 f4       	brne	.+10     	; 0x4496 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    448c:	62 e0       	ldi	r22, 0x02	; 2
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4494:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    4496:	80 32       	cpi	r24, 0x20	; 32
    4498:	23 e0       	ldi	r18, 0x03	; 3
    449a:	92 07       	cpc	r25, r18
    449c:	29 f4       	brne	.+10     	; 0x44a8 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    449e:	64 e0       	ldi	r22, 0x04	; 4
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    44a6:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    44a8:	81 15       	cp	r24, r1
    44aa:	28 e0       	ldi	r18, 0x08	; 8
    44ac:	92 07       	cpc	r25, r18
    44ae:	29 f4       	brne	.+10     	; 0x44ba <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    44b0:	61 e0       	ldi	r22, 0x01	; 1
    44b2:	83 e0       	ldi	r24, 0x03	; 3
    44b4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    44b8:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    44ba:	81 15       	cp	r24, r1
    44bc:	29 e0       	ldi	r18, 0x09	; 9
    44be:	92 07       	cpc	r25, r18
    44c0:	29 f4       	brne	.+10     	; 0x44cc <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    44c2:	61 e0       	ldi	r22, 0x01	; 1
    44c4:	84 e0       	ldi	r24, 0x04	; 4
    44c6:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    44ca:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    44cc:	81 15       	cp	r24, r1
    44ce:	2a e0       	ldi	r18, 0x0A	; 10
    44d0:	92 07       	cpc	r25, r18
    44d2:	29 f4       	brne	.+10     	; 0x44de <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    44d4:	61 e0       	ldi	r22, 0x01	; 1
    44d6:	85 e0       	ldi	r24, 0x05	; 5
    44d8:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    44dc:	08 95       	ret
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    44de:	80 34       	cpi	r24, 0x40	; 64
    44e0:	28 e0       	ldi	r18, 0x08	; 8
    44e2:	92 07       	cpc	r25, r18
    44e4:	29 f4       	brne	.+10     	; 0x44f0 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    44e6:	62 e0       	ldi	r22, 0x02	; 2
    44e8:	83 e0       	ldi	r24, 0x03	; 3
    44ea:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    44ee:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    44f0:	80 34       	cpi	r24, 0x40	; 64
    44f2:	29 e0       	ldi	r18, 0x09	; 9
    44f4:	92 07       	cpc	r25, r18
    44f6:	29 f4       	brne	.+10     	; 0x4502 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    44f8:	62 e0       	ldi	r22, 0x02	; 2
    44fa:	84 e0       	ldi	r24, 0x04	; 4
    44fc:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4500:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    4502:	80 39       	cpi	r24, 0x90	; 144
    4504:	28 e0       	ldi	r18, 0x08	; 8
    4506:	92 07       	cpc	r25, r18
    4508:	29 f4       	brne	.+10     	; 0x4514 <sysclk_enable_peripheral_clock+0xee>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    450a:	64 e0       	ldi	r22, 0x04	; 4
    450c:	83 e0       	ldi	r24, 0x03	; 3
    450e:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4512:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    4514:	80 39       	cpi	r24, 0x90	; 144
    4516:	29 e0       	ldi	r18, 0x09	; 9
    4518:	92 07       	cpc	r25, r18
    451a:	29 f4       	brne	.+10     	; 0x4526 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    451c:	64 e0       	ldi	r22, 0x04	; 4
    451e:	84 e0       	ldi	r24, 0x04	; 4
    4520:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4524:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    4526:	80 39       	cpi	r24, 0x90	; 144
    4528:	2a e0       	ldi	r18, 0x0A	; 10
    452a:	92 07       	cpc	r25, r18
    452c:	29 f4       	brne	.+10     	; 0x4538 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    452e:	64 e0       	ldi	r22, 0x04	; 4
    4530:	85 e0       	ldi	r24, 0x05	; 5
    4532:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4536:	08 95       	ret
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    4538:	80 3c       	cpi	r24, 0xC0	; 192
    453a:	28 e0       	ldi	r18, 0x08	; 8
    453c:	92 07       	cpc	r25, r18
    453e:	29 f4       	brne	.+10     	; 0x454a <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    4540:	68 e0       	ldi	r22, 0x08	; 8
    4542:	83 e0       	ldi	r24, 0x03	; 3
    4544:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4548:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    454a:	80 3c       	cpi	r24, 0xC0	; 192
    454c:	29 e0       	ldi	r18, 0x09	; 9
    454e:	92 07       	cpc	r25, r18
    4550:	29 f4       	brne	.+10     	; 0x455c <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    4552:	68 e0       	ldi	r22, 0x08	; 8
    4554:	84 e0       	ldi	r24, 0x04	; 4
    4556:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    455a:	08 95       	ret
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    455c:	80 3a       	cpi	r24, 0xA0	; 160
    455e:	28 e0       	ldi	r18, 0x08	; 8
    4560:	92 07       	cpc	r25, r18
    4562:	29 f4       	brne	.+10     	; 0x456e <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    4564:	60 e1       	ldi	r22, 0x10	; 16
    4566:	83 e0       	ldi	r24, 0x03	; 3
    4568:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    456c:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    456e:	80 3a       	cpi	r24, 0xA0	; 160
    4570:	29 e0       	ldi	r18, 0x09	; 9
    4572:	92 07       	cpc	r25, r18
    4574:	29 f4       	brne	.+10     	; 0x4580 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4576:	60 e1       	ldi	r22, 0x10	; 16
    4578:	84 e0       	ldi	r24, 0x04	; 4
    457a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    457e:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    4580:	80 3a       	cpi	r24, 0xA0	; 160
    4582:	2a e0       	ldi	r18, 0x0A	; 10
    4584:	92 07       	cpc	r25, r18
    4586:	29 f4       	brne	.+10     	; 0x4592 <sysclk_enable_peripheral_clock+0x16c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    4588:	60 e1       	ldi	r22, 0x10	; 16
    458a:	85 e0       	ldi	r24, 0x05	; 5
    458c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    4590:	08 95       	ret
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    4592:	80 3b       	cpi	r24, 0xB0	; 176
    4594:	28 e0       	ldi	r18, 0x08	; 8
    4596:	92 07       	cpc	r25, r18
    4598:	29 f4       	brne	.+10     	; 0x45a4 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    459a:	60 e2       	ldi	r22, 0x20	; 32
    459c:	83 e0       	ldi	r24, 0x03	; 3
    459e:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    45a2:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    45a4:	80 3b       	cpi	r24, 0xB0	; 176
    45a6:	29 e0       	ldi	r18, 0x09	; 9
    45a8:	92 07       	cpc	r25, r18
    45aa:	29 f4       	brne	.+10     	; 0x45b6 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    45ac:	60 e2       	ldi	r22, 0x20	; 32
    45ae:	84 e0       	ldi	r24, 0x04	; 4
    45b0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    45b4:	08 95       	ret
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    45b6:	80 38       	cpi	r24, 0x80	; 128
    45b8:	24 e0       	ldi	r18, 0x04	; 4
    45ba:	92 07       	cpc	r25, r18
    45bc:	29 f4       	brne	.+10     	; 0x45c8 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    45be:	60 e4       	ldi	r22, 0x40	; 64
    45c0:	83 e0       	ldi	r24, 0x03	; 3
    45c2:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    45c6:	08 95       	ret
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    45c8:	80 3a       	cpi	r24, 0xA0	; 160
    45ca:	94 40       	sbci	r25, 0x04	; 4
    45cc:	21 f4       	brne	.+8      	; 0x45d6 <sysclk_enable_peripheral_clock+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    45ce:	60 e4       	ldi	r22, 0x40	; 64
    45d0:	85 e0       	ldi	r24, 0x05	; 5
    45d2:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <sysclk_enable_module>
    45d6:	08 95       	ret

000045d8 <ring_push>:

int ring_push(ring_buf_t *r, uint8_t data) {
	// push onto head, then move head up
	int next;
	
	next = r->head+1;
    45d8:	fc 01       	movw	r30, r24
    45da:	f8 5f       	subi	r31, 0xF8	; 248
    45dc:	40 81       	ld	r20, Z
    45de:	51 81       	ldd	r21, Z+1	; 0x01
    45e0:	9a 01       	movw	r18, r20
    45e2:	2f 5f       	subi	r18, 0xFF	; 255
    45e4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(next >= r->maxlen) { // loop back around to beginning
    45e6:	34 96       	adiw	r30, 0x04	; 4
    45e8:	01 90       	ld	r0, Z+
    45ea:	f0 81       	ld	r31, Z
    45ec:	e0 2d       	mov	r30, r0
    45ee:	2e 17       	cp	r18, r30
    45f0:	3f 07       	cpc	r19, r31
    45f2:	10 f0       	brcs	.+4      	; 0x45f8 <ring_push+0x20>
		next = 0;
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
	}
	if(next == r->tail) { // buffer full
    45f8:	fc 01       	movw	r30, r24
    45fa:	ee 5f       	subi	r30, 0xFE	; 254
    45fc:	f7 4f       	sbci	r31, 0xF7	; 247
    45fe:	01 90       	ld	r0, Z+
    4600:	f0 81       	ld	r31, Z
    4602:	e0 2d       	mov	r30, r0
    4604:	e2 17       	cp	r30, r18
    4606:	f3 07       	cpc	r31, r19
    4608:	59 f0       	breq	.+22     	; 0x4620 <ring_push+0x48>
		return -1;
	}
	
	r->buffer[r->head] = data; // load data into head
    460a:	fc 01       	movw	r30, r24
    460c:	e4 0f       	add	r30, r20
    460e:	f5 1f       	adc	r31, r21
    4610:	60 83       	st	Z, r22
	r->head = next;			   // head at next offset
    4612:	fc 01       	movw	r30, r24
    4614:	f8 5f       	subi	r31, 0xF8	; 248
    4616:	20 83       	st	Z, r18
    4618:	31 83       	std	Z+1, r19	; 0x01
	
	return 0;				   // success
    461a:	80 e0       	ldi	r24, 0x00	; 0
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	08 95       	ret
	next = r->head+1;
	if(next >= r->maxlen) { // loop back around to beginning
		next = 0;
	}
	if(next == r->tail) { // buffer full
		return -1;
    4620:	8f ef       	ldi	r24, 0xFF	; 255
    4622:	9f ef       	ldi	r25, 0xFF	; 255
	
	r->buffer[r->head] = data; // load data into head
	r->head = next;			   // head at next offset
	
	return 0;				   // success
}
    4624:	08 95       	ret

00004626 <ring_pop>:

int ring_pop(ring_buf_t *r, uint8_t *data) {
	// pop from tail, then move tail up
	int next;
	
	if(r->head == r->tail) { // no data
    4626:	fc 01       	movw	r30, r24
    4628:	ee 5f       	subi	r30, 0xFE	; 254
    462a:	f7 4f       	sbci	r31, 0xF7	; 247
    462c:	20 81       	ld	r18, Z
    462e:	31 81       	ldd	r19, Z+1	; 0x01
    4630:	32 97       	sbiw	r30, 0x02	; 2
    4632:	40 81       	ld	r20, Z
    4634:	51 81       	ldd	r21, Z+1	; 0x01
    4636:	42 17       	cp	r20, r18
    4638:	53 07       	cpc	r21, r19
    463a:	e9 f0       	breq	.+58     	; 0x4676 <ring_pop+0x50>
		return -1;
	}
	
	next =  r->tail + 1;
    463c:	a9 01       	movw	r20, r18
    463e:	4f 5f       	subi	r20, 0xFF	; 255
    4640:	5f 4f       	sbci	r21, 0xFF	; 255
	if(next >= r->maxlen) {
    4642:	34 96       	adiw	r30, 0x04	; 4
    4644:	01 90       	ld	r0, Z+
    4646:	f0 81       	ld	r31, Z
    4648:	e0 2d       	mov	r30, r0
    464a:	4e 17       	cp	r20, r30
    464c:	5f 07       	cpc	r21, r31
    464e:	18 f4       	brcc	.+6      	; 0x4656 <ring_pop+0x30>
	
	if(r->head == r->tail) { // no data
		return -1;
	}
	
	next =  r->tail + 1;
    4650:	a4 2f       	mov	r26, r20
    4652:	45 2f       	mov	r20, r21
    4654:	02 c0       	rjmp	.+4      	; 0x465a <ring_pop+0x34>
	if(next >= r->maxlen) {
		next = 0;
    4656:	a0 e0       	ldi	r26, 0x00	; 0
    4658:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	*data = r->buffer[r->tail]; // load data from tail
    465a:	fc 01       	movw	r30, r24
    465c:	e2 0f       	add	r30, r18
    465e:	f3 1f       	adc	r31, r19
    4660:	20 81       	ld	r18, Z
    4662:	fb 01       	movw	r30, r22
    4664:	20 83       	st	Z, r18
	r->tail = next;				// tail at next offset
    4666:	fc 01       	movw	r30, r24
    4668:	ee 5f       	subi	r30, 0xFE	; 254
    466a:	f7 4f       	sbci	r31, 0xF7	; 247
    466c:	a0 83       	st	Z, r26
    466e:	41 83       	std	Z+1, r20	; 0x01
	return 0;					// success
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	08 95       	ret
int ring_pop(ring_buf_t *r, uint8_t *data) {
	// pop from tail, then move tail up
	int next;
	
	if(r->head == r->tail) { // no data
		return -1;
    4676:	8f ef       	ldi	r24, 0xFF	; 255
    4678:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	*data = r->buffer[r->tail]; // load data from tail
	r->tail = next;				// tail at next offset
	return 0;					// success
}
    467a:	08 95       	ret

0000467c <__vector_25>:

volatile ring_buf_t gps_ring;

ISR(USARTC0_RXC_vect)
{
    467c:	1f 92       	push	r1
    467e:	0f 92       	push	r0
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	0f 92       	push	r0
    4684:	11 24       	eor	r1, r1
    4686:	2f 93       	push	r18
    4688:	3f 93       	push	r19
    468a:	4f 93       	push	r20
    468c:	5f 93       	push	r21
    468e:	6f 93       	push	r22
    4690:	7f 93       	push	r23
    4692:	8f 93       	push	r24
    4694:	9f 93       	push	r25
    4696:	af 93       	push	r26
    4698:	bf 93       	push	r27
    469a:	ef 93       	push	r30
    469c:	ff 93       	push	r31
	char data=USARTC0.DATA;
    469e:	60 91 a0 08 	lds	r22, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if(ring_push(&gps_ring, data)) {
    46a2:	80 e9       	ldi	r24, 0x90	; 144
    46a4:	93 e2       	ldi	r25, 0x23	; 35
    46a6:	98 df       	rcall	.-208    	; 0x45d8 <ring_push>
		//out of space in gps ring buffer
	}
}
    46a8:	ff 91       	pop	r31
    46aa:	ef 91       	pop	r30
    46ac:	bf 91       	pop	r27
    46ae:	af 91       	pop	r26
    46b0:	9f 91       	pop	r25
    46b2:	8f 91       	pop	r24
    46b4:	7f 91       	pop	r23
    46b6:	6f 91       	pop	r22
    46b8:	5f 91       	pop	r21
    46ba:	4f 91       	pop	r20
    46bc:	3f 91       	pop	r19
    46be:	2f 91       	pop	r18
    46c0:	0f 90       	pop	r0
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	0f 90       	pop	r0
    46c6:	1f 90       	pop	r1
    46c8:	18 95       	reti

000046ca <main>:


int main (void)
{
    46ca:	cf 93       	push	r28
    46cc:	df 93       	push	r29
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
    46d2:	cc 5c       	subi	r28, 0xCC	; 204
    46d4:	d1 09       	sbc	r29, r1
    46d6:	cd bf       	out	0x3d, r28	; 61
    46d8:	de bf       	out	0x3e, r29	; 62
	// ************** INITS ************** //
	gps_ring.head = 0;
    46da:	10 92 90 2b 	sts	0x2B90, r1	; 0x802b90 <gps_ring+0x800>
    46de:	10 92 91 2b 	sts	0x2B91, r1	; 0x802b91 <gps_ring+0x801>
	gps_ring.tail = 0;
    46e2:	10 92 92 2b 	sts	0x2B92, r1	; 0x802b92 <gps_ring+0x802>
    46e6:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <gps_ring+0x803>
	gps_ring.maxlen = 2048;
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	98 e0       	ldi	r25, 0x08	; 8
    46ee:	80 93 94 2b 	sts	0x2B94, r24	; 0x802b94 <gps_ring+0x804>
    46f2:	90 93 95 2b 	sts	0x2B95, r25	; 0x802b95 <gps_ring+0x805>
	char gps_data;
	int GPSLock = 0;
	int GPSCounter = 0;
	
	board_init();
    46f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <board_init>
	sei();
    46fa:	78 94       	sei

	delay_ms(10);
    46fc:	66 e0       	ldi	r22, 0x06	; 6
    46fe:	7d e0       	ldi	r23, 0x0D	; 13
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	85 de       	rcall	.-758    	; 0x4410 <__portable_avr_delay_cycles>
	sysclk_init();
    4706:	0e 94 52 01 	call	0x2a4	; 0x2a4 <sysclk_init>
	
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES); //Enable GPS HiRes
    470a:	64 e0       	ldi	r22, 0x04	; 4
    470c:	83 e0       	ldi	r24, 0x03	; 3
    470e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&ADCA);             //Voltage
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	92 e0       	ldi	r25, 0x02	; 2
    4716:	87 de       	rcall	.-754    	; 0x4426 <sysclk_enable_peripheral_clock>
	adc_init();
    4718:	0e 94 fd 09 	call	0x13fa	; 0x13fa <adc_init>
	uart_gps_init_default();
    471c:	cd dd       	rcall	.-1126   	; 0x42b8 <uart_gps_init_default>
	//printf("$PUBX,41,1,0007,0003,38400,0*20\r\n");
	//uart_gps_init();
	
	
	delay_ms(30);
    471e:	60 e1       	ldi	r22, 0x10	; 16
    4720:	77 e2       	ldi	r23, 0x27	; 39
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	74 de       	rcall	.-792    	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND SETS FLIGHT MODE
	uint8_t setNav[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC };
    4728:	8c e2       	ldi	r24, 0x2C	; 44
    472a:	e4 e4       	ldi	r30, 0x44	; 68
    472c:	f0 e2       	ldi	r31, 0x20	; 32
    472e:	de 01       	movw	r26, r28
    4730:	12 96       	adiw	r26, 0x02	; 2
    4732:	01 90       	ld	r0, Z+
    4734:	0d 92       	st	X+, r0
    4736:	8a 95       	dec	r24
    4738:	e1 f7       	brne	.-8      	; 0x4732 <main+0x68>
    473a:	03 e0       	ldi	r16, 0x03	; 3
    473c:	10 e0       	ldi	r17, 0x00	; 0
    473e:	6e 01       	movw	r12, r28
    4740:	2e e2       	ldi	r18, 0x2E	; 46
    4742:	c2 0e       	add	r12, r18
    4744:	d1 1c       	adc	r13, r1
    4746:	0e c0       	rjmp	.+28     	; 0x4764 <main+0x9a>
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setNav)/sizeof(uint8_t); i++)
		{
			printf("%c",setNav[i]);
    4748:	d7 01       	movw	r26, r14
    474a:	8d 91       	ld	r24, X+
    474c:	7d 01       	movw	r14, r26
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	6b d7       	rcall	.+3798   	; 0x5628 <putchar>
	delay_ms(30);
	//  THIS COMMAND SETS FLIGHT MODE
	uint8_t setNav[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC };
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setNav)/sizeof(uint8_t); i++)
    4752:	ec 14       	cp	r14, r12
    4754:	fd 04       	cpc	r15, r13
		{
			printf("%c",setNav[i]);
		}
		printf("\n");
    4756:	c1 f7       	brne	.-16     	; 0x4748 <main+0x7e>
    4758:	8a e0       	ldi	r24, 0x0A	; 10
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	65 d7       	rcall	.+3786   	; 0x5628 <putchar>
    475e:	01 50       	subi	r16, 0x01	; 1
    4760:	11 09       	sbc	r17, r1
	
	
	delay_ms(30);
	//  THIS COMMAND SETS FLIGHT MODE
	uint8_t setNav[] = {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xDC };
	for(int j=0;j<3;j++)
    4762:	29 f0       	breq	.+10     	; 0x476e <main+0xa4>
    4764:	7e 01       	movw	r14, r28
    4766:	b2 e0       	ldi	r27, 0x02	; 2
    4768:	eb 0e       	add	r14, r27
    476a:	f1 1c       	adc	r15, r1
			printf("%c",setNav[i]);
		}
		printf("\n");
	}
	
	delay_ms(30);
    476c:	ed cf       	rjmp	.-38     	; 0x4748 <main+0x7e>
    476e:	60 e1       	ldi	r22, 0x10	; 16
    4770:	77 e2       	ldi	r23, 0x27	; 39
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	4c de       	rcall	.-872    	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND DISABLES 1hz GLL
	uint8_t setGLL[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B};
    4778:	80 e1       	ldi	r24, 0x10	; 16
    477a:	e0 e7       	ldi	r30, 0x70	; 112
    477c:	f0 e2       	ldi	r31, 0x20	; 32
    477e:	de 01       	movw	r26, r28
    4780:	9e 96       	adiw	r26, 0x2e	; 46
    4782:	01 90       	ld	r0, Z+
    4784:	0d 92       	st	X+, r0
    4786:	8a 95       	dec	r24
    4788:	e1 f7       	brne	.-8      	; 0x4782 <main+0xb8>
    478a:	03 e0       	ldi	r16, 0x03	; 3
    478c:	10 e0       	ldi	r17, 0x00	; 0
    478e:	6e 01       	movw	r12, r28
    4790:	ee e3       	ldi	r30, 0x3E	; 62
    4792:	ce 0e       	add	r12, r30
    4794:	d1 1c       	adc	r13, r1
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGLL)/sizeof(uint8_t); i++)
		{
			printf("%c",setGLL[i]);
    4796:	0e c0       	rjmp	.+28     	; 0x47b4 <main+0xea>
    4798:	d7 01       	movw	r26, r14
    479a:	8d 91       	ld	r24, X+
    479c:	7d 01       	movw	r14, r26
    479e:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(30);
	//  THIS COMMAND DISABLES 1hz GLL
	uint8_t setGLL[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGLL)/sizeof(uint8_t); i++)
    47a0:	43 d7       	rcall	.+3718   	; 0x5628 <putchar>
    47a2:	ec 14       	cp	r14, r12
    47a4:	fd 04       	cpc	r15, r13
		{
			printf("%c",setGLL[i]);
		}
		printf("\r\n");
    47a6:	c1 f7       	brne	.-16     	; 0x4798 <main+0xce>
    47a8:	88 ec       	ldi	r24, 0xC8	; 200
    47aa:	90 e2       	ldi	r25, 0x20	; 32
    47ac:	42 d7       	rcall	.+3716   	; 0x5632 <puts>
    47ae:	01 50       	subi	r16, 0x01	; 1
    47b0:	11 09       	sbc	r17, r1
	}
	
	delay_ms(30);
	//  THIS COMMAND DISABLES 1hz GLL
	uint8_t setGLL[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x2B};
	for(int j=0;j<3;j++)
    47b2:	29 f0       	breq	.+10     	; 0x47be <main+0xf4>
    47b4:	7e 01       	movw	r14, r28
    47b6:	be e2       	ldi	r27, 0x2E	; 46
    47b8:	eb 0e       	add	r14, r27
    47ba:	f1 1c       	adc	r15, r1
			printf("%c",setGLL[i]);
		}
		printf("\r\n");
	}
	
	delay_ms(30);
    47bc:	ed cf       	rjmp	.-38     	; 0x4798 <main+0xce>
    47be:	60 e1       	ldi	r22, 0x10	; 16
    47c0:	77 e2       	ldi	r23, 0x27	; 39
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	24 de       	rcall	.-952    	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND DISABLES 1hz GSV
	uint8_t setGSV[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39};
    47c8:	80 e1       	ldi	r24, 0x10	; 16
    47ca:	e0 e8       	ldi	r30, 0x80	; 128
    47cc:	f0 e2       	ldi	r31, 0x20	; 32
    47ce:	de 01       	movw	r26, r28
    47d0:	de 96       	adiw	r26, 0x3e	; 62
    47d2:	01 90       	ld	r0, Z+
    47d4:	0d 92       	st	X+, r0
    47d6:	8a 95       	dec	r24
    47d8:	e1 f7       	brne	.-8      	; 0x47d2 <main+0x108>
    47da:	0f 2e       	mov	r0, r31
    47dc:	f3 e0       	ldi	r31, 0x03	; 3
    47de:	ef 2e       	mov	r14, r31
    47e0:	f1 2c       	mov	r15, r1
    47e2:	f0 2d       	mov	r31, r0
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGSV)/sizeof(uint8_t); i++)
		{
			printf("%c",setGSV[i]);
    47e4:	0f c0       	rjmp	.+30     	; 0x4804 <main+0x13a>
    47e6:	f8 01       	movw	r30, r16
    47e8:	81 91       	ld	r24, Z+
    47ea:	8f 01       	movw	r16, r30
    47ec:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(30);
	//  THIS COMMAND DISABLES 1hz GSV
	uint8_t setGSV[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGSV)/sizeof(uint8_t); i++)
    47ee:	1c d7       	rcall	.+3640   	; 0x5628 <putchar>
    47f0:	0c 15       	cp	r16, r12
    47f2:	1d 05       	cpc	r17, r13
		{
			printf("%c",setGSV[i]);
		}
		printf("\r\n");
    47f4:	c1 f7       	brne	.-16     	; 0x47e6 <main+0x11c>
    47f6:	88 ec       	ldi	r24, 0xC8	; 200
    47f8:	90 e2       	ldi	r25, 0x20	; 32
    47fa:	1b d7       	rcall	.+3638   	; 0x5632 <puts>
    47fc:	f1 e0       	ldi	r31, 0x01	; 1
    47fe:	ef 1a       	sub	r14, r31
    4800:	f1 08       	sbc	r15, r1
	}
	
	delay_ms(30);
	//  THIS COMMAND DISABLES 1hz GSV
	uint8_t setGSV[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x39};
	for(int j=0;j<3;j++)
    4802:	41 f0       	breq	.+16     	; 0x4814 <main+0x14a>
    4804:	8e 01       	movw	r16, r28
    4806:	02 5c       	subi	r16, 0xC2	; 194
    4808:	1f 4f       	sbci	r17, 0xFF	; 255
    480a:	68 01       	movw	r12, r16
    480c:	20 e1       	ldi	r18, 0x10	; 16
    480e:	c2 0e       	add	r12, r18
    4810:	d1 1c       	adc	r13, r1
			printf("%c",setGSV[i]);
		}
		printf("\r\n");
	}
	
	delay_ms(30);
    4812:	e9 cf       	rjmp	.-46     	; 0x47e6 <main+0x11c>
    4814:	60 e1       	ldi	r22, 0x10	; 16
    4816:	77 e2       	ldi	r23, 0x27	; 39
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	f9 dd       	rcall	.-1038   	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND ENABLES 1hz GST
	uint8_t setGST[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0C, 0x69};
    481e:	80 e1       	ldi	r24, 0x10	; 16
    4820:	e0 e9       	ldi	r30, 0x90	; 144
    4822:	f0 e2       	ldi	r31, 0x20	; 32
    4824:	de 01       	movw	r26, r28
    4826:	a2 5b       	subi	r26, 0xB2	; 178
    4828:	bf 4f       	sbci	r27, 0xFF	; 255
    482a:	01 90       	ld	r0, Z+
    482c:	0d 92       	st	X+, r0
    482e:	8a 95       	dec	r24
    4830:	e1 f7       	brne	.-8      	; 0x482a <main+0x160>
    4832:	0f 2e       	mov	r0, r31
    4834:	f3 e0       	ldi	r31, 0x03	; 3
    4836:	ef 2e       	mov	r14, r31
    4838:	f1 2c       	mov	r15, r1
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGST)/sizeof(uint8_t); i++)
		{
			printf("%c",setGST[i]);
    483a:	f0 2d       	mov	r31, r0
    483c:	0f c0       	rjmp	.+30     	; 0x485c <main+0x192>
    483e:	d8 01       	movw	r26, r16
    4840:	8d 91       	ld	r24, X+
    4842:	8d 01       	movw	r16, r26
    4844:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz GST
	uint8_t setGST[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0C, 0x69};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setGST)/sizeof(uint8_t); i++)
    4846:	f0 d6       	rcall	.+3552   	; 0x5628 <putchar>
    4848:	c0 16       	cp	r12, r16
    484a:	d1 06       	cpc	r13, r17
		{
			printf("%c",setGST[i]);
		}
		printf("\r\n");
    484c:	c1 f7       	brne	.-16     	; 0x483e <main+0x174>
    484e:	88 ec       	ldi	r24, 0xC8	; 200
    4850:	90 e2       	ldi	r25, 0x20	; 32
    4852:	ef d6       	rcall	.+3550   	; 0x5632 <puts>
    4854:	b1 e0       	ldi	r27, 0x01	; 1
    4856:	eb 1a       	sub	r14, r27
	}
	
	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz GST
	uint8_t setGST[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0C, 0x69};
	for(int j=0;j<3;j++)
    4858:	f1 08       	sbc	r15, r1
    485a:	41 f0       	breq	.+16     	; 0x486c <main+0x1a2>
    485c:	8e 01       	movw	r16, r28
    485e:	02 5b       	subi	r16, 0xB2	; 178
    4860:	1f 4f       	sbci	r17, 0xFF	; 255
    4862:	68 01       	movw	r12, r16
    4864:	e0 e1       	ldi	r30, 0x10	; 16
    4866:	ce 0e       	add	r12, r30
    4868:	d1 1c       	adc	r13, r1
		}
		printf("\r\n");
	}
	

	delay_ms(30);
    486a:	e9 cf       	rjmp	.-46     	; 0x483e <main+0x174>
    486c:	60 e1       	ldi	r22, 0x10	; 16
    486e:	77 e2       	ldi	r23, 0x27	; 39
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	cd dd       	rcall	.-1126   	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND ENABLES 1hz UBX04
	uint8_t setUBX04[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF1, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0A, 0x5C};
    4876:	80 e1       	ldi	r24, 0x10	; 16
    4878:	e0 ea       	ldi	r30, 0xA0	; 160
    487a:	f0 e2       	ldi	r31, 0x20	; 32
    487c:	de 01       	movw	r26, r28
    487e:	a2 5a       	subi	r26, 0xA2	; 162
    4880:	bf 4f       	sbci	r27, 0xFF	; 255
    4882:	01 90       	ld	r0, Z+
    4884:	0d 92       	st	X+, r0
    4886:	8a 95       	dec	r24
    4888:	e1 f7       	brne	.-8      	; 0x4882 <main+0x1b8>
    488a:	0f 2e       	mov	r0, r31
    488c:	f3 e0       	ldi	r31, 0x03	; 3
    488e:	ef 2e       	mov	r14, r31
    4890:	f1 2c       	mov	r15, r1
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setUBX04)/sizeof(uint8_t); i++)
		{
			printf("%c",setUBX04[i]);
    4892:	f0 2d       	mov	r31, r0
    4894:	0f c0       	rjmp	.+30     	; 0x48b4 <main+0x1ea>
    4896:	d8 01       	movw	r26, r16
    4898:	8d 91       	ld	r24, X+
    489a:	8d 01       	movw	r16, r26
    489c:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz UBX04
	uint8_t setUBX04[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF1, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0A, 0x5C};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setUBX04)/sizeof(uint8_t); i++)
    489e:	c4 d6       	rcall	.+3464   	; 0x5628 <putchar>
    48a0:	0c 15       	cp	r16, r12
    48a2:	1d 05       	cpc	r17, r13
		{
			printf("%c",setUBX04[i]);
		}
		printf("\r\n");
    48a4:	c1 f7       	brne	.-16     	; 0x4896 <main+0x1cc>
    48a6:	88 ec       	ldi	r24, 0xC8	; 200
    48a8:	90 e2       	ldi	r25, 0x20	; 32
    48aa:	c3 d6       	rcall	.+3462   	; 0x5632 <puts>
    48ac:	b1 e0       	ldi	r27, 0x01	; 1
    48ae:	eb 1a       	sub	r14, r27
	

	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz UBX04
	uint8_t setUBX04[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF1, 0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0A, 0x5C};
	for(int j=0;j<3;j++)
    48b0:	f1 08       	sbc	r15, r1
    48b2:	41 f0       	breq	.+16     	; 0x48c4 <main+0x1fa>
    48b4:	8e 01       	movw	r16, r28
    48b6:	02 5a       	subi	r16, 0xA2	; 162
    48b8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ba:	68 01       	movw	r12, r16
    48bc:	e0 e1       	ldi	r30, 0x10	; 16
    48be:	ce 0e       	add	r12, r30
    48c0:	d1 1c       	adc	r13, r1
			printf("%c",setUBX04[i]);
		}
		printf("\r\n");
	}
	
	delay_ms(30);
    48c2:	e9 cf       	rjmp	.-46     	; 0x4896 <main+0x1cc>
    48c4:	60 e1       	ldi	r22, 0x10	; 16
    48c6:	77 e2       	ldi	r23, 0x27	; 39
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	a1 dd       	rcall	.-1214   	; 0x4410 <__portable_avr_delay_cycles>
	//  THIS COMMAND ENABLES 1hz TIM-TP
	uint8_t setTIMTPP[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x23, 0x27};
    48ce:	80 e1       	ldi	r24, 0x10	; 16
    48d0:	e0 eb       	ldi	r30, 0xB0	; 176
    48d2:	f0 e2       	ldi	r31, 0x20	; 32
    48d4:	de 01       	movw	r26, r28
    48d6:	a2 59       	subi	r26, 0x92	; 146
    48d8:	bf 4f       	sbci	r27, 0xFF	; 255
    48da:	01 90       	ld	r0, Z+
    48dc:	0d 92       	st	X+, r0
    48de:	8a 95       	dec	r24
    48e0:	e1 f7       	brne	.-8      	; 0x48da <main+0x210>
    48e2:	0f 2e       	mov	r0, r31
    48e4:	f3 e0       	ldi	r31, 0x03	; 3
    48e6:	ef 2e       	mov	r14, r31
    48e8:	f1 2c       	mov	r15, r1
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setTIMTPP)/sizeof(uint8_t); i++)
		{
			printf("%c",setTIMTPP[i]);
    48ea:	f0 2d       	mov	r31, r0
    48ec:	0f c0       	rjmp	.+30     	; 0x490c <main+0x242>
    48ee:	d8 01       	movw	r26, r16
    48f0:	8d 91       	ld	r24, X+
    48f2:	8d 01       	movw	r16, r26
    48f4:	90 e0       	ldi	r25, 0x00	; 0
	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz TIM-TP
	uint8_t setTIMTPP[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x23, 0x27};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setTIMTPP)/sizeof(uint8_t); i++)
    48f6:	98 d6       	rcall	.+3376   	; 0x5628 <putchar>
    48f8:	0c 15       	cp	r16, r12
		{
			printf("%c",setTIMTPP[i]);
		}
		printf("\r\n");
    48fa:	1d 05       	cpc	r17, r13
    48fc:	c1 f7       	brne	.-16     	; 0x48ee <main+0x224>
    48fe:	88 ec       	ldi	r24, 0xC8	; 200
    4900:	90 e2       	ldi	r25, 0x20	; 32
    4902:	97 d6       	rcall	.+3374   	; 0x5632 <puts>
    4904:	b1 e0       	ldi	r27, 0x01	; 1
    4906:	eb 1a       	sub	r14, r27
	}
	
	delay_ms(30);
	//  THIS COMMAND ENABLES 1hz TIM-TP
	uint8_t setTIMTPP[] = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x23, 0x27};
	for(int j=0;j<3;j++)
    4908:	f1 08       	sbc	r15, r1
    490a:	41 f0       	breq	.+16     	; 0x491c <main+0x252>
    490c:	8e 01       	movw	r16, r28
    490e:	02 59       	subi	r16, 0x92	; 146
    4910:	1f 4f       	sbci	r17, 0xFF	; 255
    4912:	68 01       	movw	r12, r16
    4914:	e0 e1       	ldi	r30, 0x10	; 16
    4916:	ce 0e       	add	r12, r30
    4918:	d1 1c       	adc	r13, r1
			printf("%c",setTIMTPP[i]);
		}
		printf("\r\n");
	}
	
	delay_ms(30);
    491a:	e9 cf       	rjmp	.-46     	; 0x48ee <main+0x224>
    491c:	60 e1       	ldi	r22, 0x10	; 16
    491e:	77 e2       	ldi	r23, 0x27	; 39
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	90 e0       	ldi	r25, 0x00	; 0
	//  THIS COMMAND SENDS A REQUEST FOR TIM-TP
	uint8_t setTIMTP[] = {0xB5, 0x62, 0x0D, 0x01, 0x00, 0x00, 0x0E, 0x37};
    4924:	75 dd       	rcall	.-1302   	; 0x4410 <__portable_avr_delay_cycles>
    4926:	88 e0       	ldi	r24, 0x08	; 8
    4928:	e0 ec       	ldi	r30, 0xC0	; 192
    492a:	f0 e2       	ldi	r31, 0x20	; 32
    492c:	de 01       	movw	r26, r28
    492e:	a2 58       	subi	r26, 0x82	; 130
    4930:	bf 4f       	sbci	r27, 0xFF	; 255
    4932:	01 90       	ld	r0, Z+
    4934:	0d 92       	st	X+, r0
    4936:	8a 95       	dec	r24
    4938:	e1 f7       	brne	.-8      	; 0x4932 <main+0x268>
    493a:	0f 2e       	mov	r0, r31
    493c:	f3 e0       	ldi	r31, 0x03	; 3
    493e:	ef 2e       	mov	r14, r31
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setTIMTP)/sizeof(uint8_t); i++)
		{
			printf("%c",setTIMTP[i]);
    4940:	f1 2c       	mov	r15, r1
    4942:	f0 2d       	mov	r31, r0
    4944:	14 c0       	rjmp	.+40     	; 0x496e <main+0x2a4>
    4946:	d8 01       	movw	r26, r16
    4948:	8d 91       	ld	r24, X+
    494a:	8d 01       	movw	r16, r26
	delay_ms(30);
	//  THIS COMMAND SENDS A REQUEST FOR TIM-TP
	uint8_t setTIMTP[] = {0xB5, 0x62, 0x0D, 0x01, 0x00, 0x00, 0x0E, 0x37};
	for(int j=0;j<3;j++)
	{
		for(int i=0; i<sizeof(setTIMTP)/sizeof(uint8_t); i++)
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	6c d6       	rcall	.+3288   	; 0x5628 <putchar>
    4950:	c0 16       	cp	r12, r16
		{
			printf("%c",setTIMTP[i]);
		}
		delay_ms(1);
    4952:	d1 06       	cpc	r13, r17
    4954:	c1 f7       	brne	.-16     	; 0x4946 <main+0x27c>
    4956:	6e e4       	ldi	r22, 0x4E	; 78
    4958:	71 e0       	ldi	r23, 0x01	; 1
		printf("\r\n");
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	58 dd       	rcall	.-1360   	; 0x4410 <__portable_avr_delay_cycles>
    4960:	88 ec       	ldi	r24, 0xC8	; 200
    4962:	90 e2       	ldi	r25, 0x20	; 32
    4964:	66 d6       	rcall	.+3276   	; 0x5632 <puts>
	}
	
	delay_ms(30);
	//  THIS COMMAND SENDS A REQUEST FOR TIM-TP
	uint8_t setTIMTP[] = {0xB5, 0x62, 0x0D, 0x01, 0x00, 0x00, 0x0E, 0x37};
	for(int j=0;j<3;j++)
    4966:	b1 e0       	ldi	r27, 0x01	; 1
    4968:	eb 1a       	sub	r14, r27
    496a:	f1 08       	sbc	r15, r1
    496c:	41 f0       	breq	.+16     	; 0x497e <main+0x2b4>
    496e:	8e 01       	movw	r16, r28
    4970:	02 58       	subi	r16, 0x82	; 130
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	68 01       	movw	r12, r16
		delay_ms(1);
		printf("\r\n");
	}
	
	
	delay_ms(30);
    4976:	e8 e0       	ldi	r30, 0x08	; 8
    4978:	ce 0e       	add	r12, r30
    497a:	d1 1c       	adc	r13, r1
    497c:	e4 cf       	rjmp	.-56     	; 0x4946 <main+0x27c>
    497e:	60 e1       	ldi	r22, 0x10	; 16
    4980:	77 e2       	ldi	r23, 0x27	; 39
	
	uart_sd_init();
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	90 e0       	ldi	r25, 0x00	; 0
	GPSCounter = 0;
    4986:	44 dd       	rcall	.-1400   	; 0x4410 <__portable_avr_delay_cycles>
    4988:	4e dc       	rcall	.-1892   	; 0x4226 <uart_sd_init>
	// ************** INITS ************** //
	gps_ring.head = 0;
	gps_ring.tail = 0;
	gps_ring.maxlen = 2048;
	char gps_data;
	int GPSLock = 0;
    498a:	00 e0       	ldi	r16, 0x00	; 0
	
	delay_ms(30);
	
	uart_sd_init();
	GPSCounter = 0;
	while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    498c:	10 e0       	ldi	r17, 0x00	; 0
		printf("%c", gps_data);
    498e:	c1 2c       	mov	r12, r1
    4990:	d1 2c       	mov	r13, r1
    4992:	14 c0       	rjmp	.+40     	; 0x49bc <main+0x2f2>
    4994:	89 81       	ldd	r24, Y+1	; 0x01
    4996:	08 2e       	mov	r0, r24
		GPSCounter++;
    4998:	00 0c       	add	r0, r0
    499a:	99 0b       	sbc	r25, r25
		delay_ms(1);
    499c:	45 d6       	rcall	.+3210   	; 0x5628 <putchar>
    499e:	0f 5f       	subi	r16, 0xFF	; 255
    49a0:	1f 4f       	sbci	r17, 0xFF	; 255
    49a2:	6e e4       	ldi	r22, 0x4E	; 78
    49a4:	71 e0       	ldi	r23, 0x01	; 1
		if (GPSCounter>238)
		{
			GPSLock = 1;
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	32 dd       	rcall	.-1436   	; 0x4410 <__portable_avr_delay_cycles>
    49ac:	91 e0       	ldi	r25, 0x01	; 1
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	0f 3e       	cpi	r16, 0xEF	; 239
    49b2:	11 05       	cpc	r17, r1
    49b4:	0c f4       	brge	.+2      	; 0x49b8 <main+0x2ee>
	
	delay_ms(30);
	
	uart_sd_init();
	GPSCounter = 0;
	while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	c9 2e       	mov	r12, r25
    49ba:	d8 2e       	mov	r13, r24
    49bc:	be 01       	movw	r22, r28
    49be:	6f 5f       	subi	r22, 0xFF	; 255
    49c0:	7f 4f       	sbci	r23, 0xFF	; 255
    49c2:	80 e9       	ldi	r24, 0x90	; 144
    49c4:	93 e2       	ldi	r25, 0x23	; 35
    49c6:	2f de       	rcall	.-930    	; 0x4626 <ring_pop>
			GPSLock = 1;
			}else{
			GPSLock = 0;
		}
	}
	printf("\n\n");
    49c8:	89 2b       	or	r24, r25
    49ca:	21 f3       	breq	.-56     	; 0x4994 <main+0x2ca>
    49cc:	80 ee       	ldi	r24, 0xE0	; 224
    49ce:	90 e2       	ldi	r25, 0x20	; 32
		
	delay_ms(30);
    49d0:	30 d6       	rcall	.+3168   	; 0x5632 <puts>
    49d2:	60 e1       	ldi	r22, 0x10	; 16
    49d4:	77 e2       	ldi	r23, 0x27	; 39
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	1a dd       	rcall	.-1484   	; 0x4410 <__portable_avr_delay_cycles>
	
	
	
	
	//IMU initialization
	twi_options_t m_options = {
    49dc:	7e 01       	movw	r14, r28
    49de:	f6 e8       	ldi	r31, 0x86	; 134
    49e0:	ef 0e       	add	r14, r31
    49e2:	f1 1c       	adc	r15, r1
    49e4:	0f 2e       	mov	r0, r31
    49e6:	f9 e0       	ldi	r31, 0x09	; 9
    49e8:	bf 2e       	mov	r11, r31
    49ea:	f0 2d       	mov	r31, r0
    49ec:	d7 01       	movw	r26, r14
    49ee:	eb 2d       	mov	r30, r11
    49f0:	1d 92       	st	X+, r1
    49f2:	ea 95       	dec	r30
    49f4:	e9 f7       	brne	.-6      	; 0x49f0 <main+0x326>
    49f6:	80 e8       	ldi	r24, 0x80	; 128
    49f8:	9a e1       	ldi	r25, 0x1A	; 26
    49fa:	a6 e0       	ldi	r26, 0x06	; 6
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	f7 01       	movw	r30, r14
    4a00:	80 83       	st	Z, r24
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	a2 83       	std	Z+2, r26	; 0x02
    4a06:	b3 83       	std	Z+3, r27	; 0x03
    4a08:	83 e2       	ldi	r24, 0x23	; 35
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	a0 e0       	ldi	r26, 0x00	; 0
    4a0e:	b0 e0       	ldi	r27, 0x00	; 0
    4a10:	84 83       	std	Z+4, r24	; 0x04
    4a12:	95 83       	std	Z+5, r25	; 0x05
    4a14:	a6 83       	std	Z+6, r26	; 0x06
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
	sysclk_enable_peripheral_clock(&TWIE);
    4a16:	b7 83       	std	Z+7, r27	; 0x07
    4a18:	80 ea       	ldi	r24, 0xA0	; 160
    4a1a:	94 e0       	ldi	r25, 0x04	; 4
    4a1c:	04 dd       	rcall	.-1528   	; 0x4426 <sysclk_enable_peripheral_clock>
		
	twi_master_options_t opt = {
    4a1e:	8e 01       	movw	r16, r28
    4a20:	01 57       	subi	r16, 0x71	; 113
    4a22:	1f 4f       	sbci	r17, 0xFF	; 255
    4a24:	d8 01       	movw	r26, r16
    4a26:	1d 92       	st	X+, r1
    4a28:	ba 94       	dec	r11
    4a2a:	e9 f7       	brne	.-6      	; 0x4a26 <main+0x35c>
    4a2c:	80 e5       	ldi	r24, 0x50	; 80
    4a2e:	93 ec       	ldi	r25, 0xC3	; 195
    4a30:	a0 e0       	ldi	r26, 0x00	; 0
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	f8 01       	movw	r30, r16
    4a36:	80 83       	st	Z, r24
    4a38:	91 83       	std	Z+1, r25	; 0x01
    4a3a:	a2 83       	std	Z+2, r26	; 0x02
    4a3c:	b3 83       	std	Z+3, r27	; 0x03
    4a3e:	80 e5       	ldi	r24, 0x50	; 80
    4a40:	80 87       	std	Z+8, r24	; 0x08
typedef TWI_t *twi_master_t;
typedef twi_options_t twi_master_options_t;

static inline int twi_master_setup(twi_master_t twi, twi_master_options_t *opt)
{
	opt->speed_reg = TWI_BAUD(sysclk_get_cpu_hz(),opt->speed);
    4a42:	8f e0       	ldi	r24, 0x0F	; 15
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	a0 e0       	ldi	r26, 0x00	; 0
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	84 83       	std	Z+4, r24	; 0x04
    4a4c:	95 83       	std	Z+5, r25	; 0x05
    4a4e:	a6 83       	std	Z+6, r26	; 0x06

	sysclk_enable_peripheral_clock(twi);
    4a50:	b7 83       	std	Z+7, r27	; 0x07
    4a52:	80 ea       	ldi	r24, 0xA0	; 160
    4a54:	94 e0       	ldi	r25, 0x04	; 4

	return twi_master_init(twi,opt);
    4a56:	e7 dc       	rcall	.-1586   	; 0x4426 <sysclk_enable_peripheral_clock>
    4a58:	b8 01       	movw	r22, r16
    4a5a:	80 ea       	ldi	r24, 0xA0	; 160
		.speed = 50000,
		.chip  = 0x50
	};

	twi_master_setup(&TWIE, &opt);
	twi_master_init(&TWIE, &m_options);
    4a5c:	94 e0       	ldi	r25, 0x04	; 4
    4a5e:	0e 94 6c 07 	call	0xed8	; 0xed8 <twi_master_init>
    4a62:	b7 01       	movw	r22, r14
    4a64:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    4a66:	94 e0       	ldi	r25, 0x04	; 4
    4a68:	0e 94 6c 07 	call	0xed8	; 0xed8 <twi_master_init>
    4a6c:	e0 ea       	ldi	r30, 0xA0	; 160
    4a6e:	f4 e0       	ldi	r31, 0x04	; 4
	mpu9250_t imu_e =
	{
		.twi = &TWIE,
	};
		
	init_imu(imu_e);
    4a70:	81 81       	ldd	r24, Z+1	; 0x01
    4a72:	88 60       	ori	r24, 0x08	; 8
    4a74:	81 83       	std	Z+1, r24	; 0x01
    4a76:	60 ea       	ldi	r22, 0xA0	; 160
    4a78:	74 e0       	ldi	r23, 0x04	; 4
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
		
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	uint32_t packetNumber = 0;
	
	PORTB.DIR = 0b00000111; // On Board LED
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	0e 94 48 0a 	call	0x1490	; 0x1490 <init_imu>
	PORTB.OUT = 0b00000111; // Turn LED On
    4a82:	e0 e2       	ldi	r30, 0x20	; 32
	
	printf("\nEND OF STARTUP\n");
    4a84:	f6 e0       	ldi	r31, 0x06	; 6
    4a86:	87 e0       	ldi	r24, 0x07	; 7
    4a88:	80 83       	st	Z, r24
    4a8a:	84 83       	std	Z+4, r24	; 0x04
	printf("\n\n\n\n\n\n\n\n");
    4a8c:	8a ec       	ldi	r24, 0xCA	; 202
    4a8e:	90 e2       	ldi	r25, 0x20	; 32
    4a90:	d0 d5       	rcall	.+2976   	; 0x5632 <puts>
    4a92:	8a ed       	ldi	r24, 0xDA	; 218
	

	printf("Packet #,  Pitch,   Roll,    Yaw, AccX, AccY, AccZ,GyroX,GyroY,GyroZ, MagX, MagY, MagZ,IMUTp,HPSTp,EXTTp,BATTp,PMTTp\n");
    4a94:	90 e2       	ldi	r25, 0x20	; 32
    4a96:	cd d5       	rcall	.+2970   	; 0x5632 <puts>
    4a98:	82 ee       	ldi	r24, 0xE2	; 226
    4a9a:	90 e2       	ldi	r25, 0x20	; 32


		


	uart_sd_init();
    4a9c:	ca d5       	rcall	.+2964   	; 0x5632 <puts>
    4a9e:	c3 db       	rcall	.-2170   	; 0x4226 <uart_sd_init>
	init_imu(imu_e);
		
		
	// ************** MAIN LOOP ************** //
	imu_data_t imu_data;
	uint32_t packetNumber = 0;
    4aa0:	81 2c       	mov	r8, r1
    4aa2:	91 2c       	mov	r9, r1
    4aa4:	54 01       	movw	r10, r8


	uart_sd_init();
	while(1){
		
		PORTB.OUT = 0b00000111; // Turn LED On
    4aa6:	0f 2e       	mov	r0, r31
    4aa8:	f7 e0       	ldi	r31, 0x07	; 7
    4aaa:	2f 2e       	mov	r2, r31
    4aac:	f0 2d       	mov	r31, r0
			adcValues[i] = adc_read();
		}
		
		
		uart_sd_init();
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
    4aae:	0f 2e       	mov	r0, r31
    4ab0:	fe e3       	ldi	r31, 0x3E	; 62
    4ab2:	ef 2e       	mov	r14, r31
    4ab4:	f3 e2       	ldi	r31, 0x23	; 35
    4ab6:	ff 2e       	mov	r15, r31
    4ab8:	f0 2d       	mov	r31, r0


	uart_sd_init();
	while(1){
		
		PORTB.OUT = 0b00000111; // Turn LED On
    4aba:	20 92 24 06 	sts	0x0624, r2	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
		delay_ms(80);
    4abe:	6b e2       	ldi	r22, 0x2B	; 43
    4ac0:	78 e6       	ldi	r23, 0x68	; 104
    4ac2:	80 e0       	ldi	r24, 0x00	; 0
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	a4 dc       	rcall	.-1720   	; 0x4410 <__portable_avr_delay_cycles>
    4ac8:	c1 14       	cp	r12, r1
		if (!GPSLock){
    4aca:	d1 04       	cpc	r13, r1
    4acc:	11 f4       	brne	.+4      	; 0x4ad2 <main+0x408>
    4ace:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
			PORTB.OUT = 0b00000000; // Turn LED Off
    4ad2:	40 ea       	ldi	r20, 0xA0	; 160
		}
		imu_data = imu_update(imu_e); // Reading IMU
    4ad4:	54 e0       	ldi	r21, 0x04	; 4
    4ad6:	60 e0       	ldi	r22, 0x00	; 0
    4ad8:	70 e0       	ldi	r23, 0x00	; 0
    4ada:	ce 01       	movw	r24, r28
    4adc:	88 56       	subi	r24, 0x68	; 104
    4ade:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <imu_update>
    4ae4:	c8 56       	subi	r28, 0x68	; 104
    4ae6:	df 4f       	sbci	r29, 0xFF	; 255
    4ae8:	88 81       	ld	r24, Y
    4aea:	99 81       	ldd	r25, Y+1	; 0x01
    4aec:	aa 81       	ldd	r26, Y+2	; 0x02
    4aee:	bb 81       	ldd	r27, Y+3	; 0x03
    4af0:	c8 59       	subi	r28, 0x98	; 152
    4af2:	d0 40       	sbci	r29, 0x00	; 0
    4af4:	cf 53       	subi	r28, 0x3F	; 63
    4af6:	df 4f       	sbci	r29, 0xFF	; 255
    4af8:	88 83       	st	Y, r24
    4afa:	99 83       	std	Y+1, r25	; 0x01
    4afc:	aa 83       	std	Y+2, r26	; 0x02
    4afe:	bb 83       	std	Y+3, r27	; 0x03
    4b00:	c1 5c       	subi	r28, 0xC1	; 193
    4b02:	d0 40       	sbci	r29, 0x00	; 0
    4b04:	c4 56       	subi	r28, 0x64	; 100
    4b06:	df 4f       	sbci	r29, 0xFF	; 255
    4b08:	88 81       	ld	r24, Y
    4b0a:	99 81       	ldd	r25, Y+1	; 0x01
    4b0c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b0e:	bb 81       	ldd	r27, Y+3	; 0x03
    4b10:	cc 59       	subi	r28, 0x9C	; 156
    4b12:	d0 40       	sbci	r29, 0x00	; 0
    4b14:	cb 53       	subi	r28, 0x3B	; 59
    4b16:	df 4f       	sbci	r29, 0xFF	; 255
    4b18:	88 83       	st	Y, r24
    4b1a:	99 83       	std	Y+1, r25	; 0x01
    4b1c:	aa 83       	std	Y+2, r26	; 0x02
    4b1e:	bb 83       	std	Y+3, r27	; 0x03
    4b20:	c5 5c       	subi	r28, 0xC5	; 197
    4b22:	d0 40       	sbci	r29, 0x00	; 0
    4b24:	c0 56       	subi	r28, 0x60	; 96
    4b26:	df 4f       	sbci	r29, 0xFF	; 255
    4b28:	88 81       	ld	r24, Y
    4b2a:	99 81       	ldd	r25, Y+1	; 0x01
    4b2c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b2e:	bb 81       	ldd	r27, Y+3	; 0x03
    4b30:	c0 5a       	subi	r28, 0xA0	; 160
    4b32:	d0 40       	sbci	r29, 0x00	; 0
    4b34:	c7 53       	subi	r28, 0x37	; 55
    4b36:	df 4f       	sbci	r29, 0xFF	; 255
    4b38:	88 83       	st	Y, r24
    4b3a:	99 83       	std	Y+1, r25	; 0x01
    4b3c:	aa 83       	std	Y+2, r26	; 0x02
    4b3e:	bb 83       	std	Y+3, r27	; 0x03
    4b40:	c9 5c       	subi	r28, 0xC9	; 201
    4b42:	d0 40       	sbci	r29, 0x00	; 0
    4b44:	0f 2e       	mov	r0, r31
    4b46:	fe e3       	ldi	r31, 0x3E	; 62
    4b48:	6f 2e       	mov	r6, r31
    4b4a:	f3 e2       	ldi	r31, 0x23	; 35
    4b4c:	7f 2e       	mov	r7, r31
		for (int i = 0; i < 4; i++)// Reading temp values
		{
			adc_set_pin(i+1);
    4b4e:	f0 2d       	mov	r31, r0
    4b50:	11 e0       	ldi	r17, 0x01	; 1
    4b52:	81 2f       	mov	r24, r17
			delay_ms(5);
    4b54:	0e 94 24 0a 	call	0x1448	; 0x1448 <adc_set_pin>
    4b58:	63 e8       	ldi	r22, 0x83	; 131
    4b5a:	76 e0       	ldi	r23, 0x06	; 6
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
			adcValues[i] = adc_read();
    4b60:	57 dc       	rcall	.-1874   	; 0x4410 <__portable_avr_delay_cycles>
    4b62:	0e 94 3a 0a 	call	0x1474	; 0x1474 <adc_read>
    4b66:	d3 01       	movw	r26, r6
    4b68:	8d 93       	st	X+, r24
    4b6a:	9d 93       	st	X+, r25
		delay_ms(80);
		if (!GPSLock){
			PORTB.OUT = 0b00000000; // Turn LED Off
		}
		imu_data = imu_update(imu_e); // Reading IMU
		for (int i = 0; i < 4; i++)// Reading temp values
    4b6c:	3d 01       	movw	r6, r26
    4b6e:	1f 5f       	subi	r17, 0xFF	; 255
			delay_ms(5);
			adcValues[i] = adc_read();
		}
		
		
		uart_sd_init();
    4b70:	15 30       	cpi	r17, 0x05	; 5
    4b72:	79 f7       	brne	.-34     	; 0x4b52 <main+0x488>
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
			(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)),
			(int16_t)imu_data.yaw, (int16_t)abs(((imu_data.yaw-(int16_t)imu_data.yaw)*1000)),
    4b74:	58 db       	rcall	.-2384   	; 0x4226 <uart_sd_init>
    4b76:	c7 53       	subi	r28, 0x37	; 55
    4b78:	df 4f       	sbci	r29, 0xFF	; 255
    4b7a:	68 81       	ld	r22, Y
    4b7c:	79 81       	ldd	r23, Y+1	; 0x01
    4b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b80:	9b 81       	ldd	r25, Y+3	; 0x03
    4b82:	c9 5c       	subi	r28, 0xC9	; 201
    4b84:	d0 40       	sbci	r29, 0x00	; 0
    4b86:	c1 d2       	rcall	.+1410   	; 0x510a <__fixsfsi>
    4b88:	2b 01       	movw	r4, r22
    4b8a:	3c 01       	movw	r6, r24
		
		uart_sd_init();
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
			(int16_t)imu_data.roll, (int16_t)abs(((imu_data.roll-(int16_t)imu_data.roll)*1000)),
    4b8c:	cb 53       	subi	r28, 0x3B	; 59
    4b8e:	df 4f       	sbci	r29, 0xFF	; 255
    4b90:	68 81       	ld	r22, Y
    4b92:	79 81       	ldd	r23, Y+1	; 0x01
    4b94:	8a 81       	ldd	r24, Y+2	; 0x02
    4b96:	9b 81       	ldd	r25, Y+3	; 0x03
    4b98:	c5 5c       	subi	r28, 0xC5	; 197
    4b9a:	d0 40       	sbci	r29, 0x00	; 0
    4b9c:	b6 d2       	rcall	.+1388   	; 0x510a <__fixsfsi>
    4b9e:	c7 54       	subi	r28, 0x47	; 71
    4ba0:	df 4f       	sbci	r29, 0xFF	; 255
    4ba2:	68 83       	st	Y, r22
    4ba4:	79 83       	std	Y+1, r23	; 0x01
    4ba6:	8a 83       	std	Y+2, r24	; 0x02
    4ba8:	9b 83       	std	Y+3, r25	; 0x03
    4baa:	c9 5b       	subi	r28, 0xB9	; 185
    4bac:	d0 40       	sbci	r29, 0x00	; 0
    4bae:	cf 53       	subi	r28, 0x3F	; 63
		
		
		uart_sd_init();
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
			packetNumber,
			(int16_t)imu_data.pitch, (int16_t)abs(((imu_data.pitch-(int16_t)imu_data.pitch)*1000)),
    4bb0:	df 4f       	sbci	r29, 0xFF	; 255
    4bb2:	68 81       	ld	r22, Y
    4bb4:	79 81       	ldd	r23, Y+1	; 0x01
    4bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bba:	c1 5c       	subi	r28, 0xC1	; 193
    4bbc:	d0 40       	sbci	r29, 0x00	; 0
    4bbe:	a5 d2       	rcall	.+1354   	; 0x510a <__fixsfsi>
    4bc0:	c3 54       	subi	r28, 0x43	; 67
    4bc2:	df 4f       	sbci	r29, 0xFF	; 255
    4bc4:	68 83       	st	Y, r22
    4bc6:	79 83       	std	Y+1, r23	; 0x01
    4bc8:	8a 83       	std	Y+2, r24	; 0x02
    4bca:	9b 83       	std	Y+3, r25	; 0x03
    4bcc:	cd 5b       	subi	r28, 0xBD	; 189
    4bce:	d0 40       	sbci	r29, 0x00	; 0
    4bd0:	f7 01       	movw	r30, r14
    4bd2:	87 81       	ldd	r24, Z+7	; 0x07
			adcValues[i] = adc_read();
		}
		
		
		uart_sd_init();
		printf("%8lu,%3d.%03d,%3d.%03d,%3d.%03d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\n",
    4bd4:	8f 93       	push	r24
    4bd6:	86 81       	ldd	r24, Z+6	; 0x06
    4bd8:	8f 93       	push	r24
    4bda:	85 81       	ldd	r24, Z+5	; 0x05
    4bdc:	8f 93       	push	r24
    4bde:	84 81       	ldd	r24, Z+4	; 0x04
    4be0:	8f 93       	push	r24
    4be2:	83 81       	ldd	r24, Z+3	; 0x03
    4be4:	8f 93       	push	r24
    4be6:	82 81       	ldd	r24, Z+2	; 0x02
    4be8:	8f 93       	push	r24
    4bea:	81 81       	ldd	r24, Z+1	; 0x01
    4bec:	8f 93       	push	r24
    4bee:	80 81       	ld	r24, Z
    4bf0:	8f 93       	push	r24
    4bf2:	c4 55       	subi	r28, 0x54	; 84
    4bf4:	df 4f       	sbci	r29, 0xFF	; 255
    4bf6:	88 81       	ld	r24, Y
    4bf8:	cc 5a       	subi	r28, 0xAC	; 172
    4bfa:	d0 40       	sbci	r29, 0x00	; 0
    4bfc:	8f 93       	push	r24
    4bfe:	c5 55       	subi	r28, 0x55	; 85
    4c00:	df 4f       	sbci	r29, 0xFF	; 255
    4c02:	88 81       	ld	r24, Y
    4c04:	cb 5a       	subi	r28, 0xAB	; 171
    4c06:	d0 40       	sbci	r29, 0x00	; 0
    4c08:	8f 93       	push	r24
    4c0a:	c8 54       	subi	r28, 0x48	; 72
    4c0c:	df 4f       	sbci	r29, 0xFF	; 255
    4c0e:	88 81       	ld	r24, Y
    4c10:	c8 5b       	subi	r28, 0xB8	; 184
    4c12:	d0 40       	sbci	r29, 0x00	; 0
    4c14:	8f 93       	push	r24
    4c16:	c9 54       	subi	r28, 0x49	; 73
    4c18:	df 4f       	sbci	r29, 0xFF	; 255
    4c1a:	88 81       	ld	r24, Y
    4c1c:	c7 5b       	subi	r28, 0xB7	; 183
    4c1e:	d0 40       	sbci	r29, 0x00	; 0
    4c20:	8f 93       	push	r24
    4c22:	ca 54       	subi	r28, 0x4A	; 74
    4c24:	df 4f       	sbci	r29, 0xFF	; 255
    4c26:	88 81       	ld	r24, Y
    4c28:	c6 5b       	subi	r28, 0xB6	; 182
    4c2a:	d0 40       	sbci	r29, 0x00	; 0
    4c2c:	8f 93       	push	r24
    4c2e:	cb 54       	subi	r28, 0x4B	; 75
    4c30:	df 4f       	sbci	r29, 0xFF	; 255
    4c32:	88 81       	ld	r24, Y
    4c34:	c5 5b       	subi	r28, 0xB5	; 181
    4c36:	d0 40       	sbci	r29, 0x00	; 0
    4c38:	8f 93       	push	r24
    4c3a:	cc 54       	subi	r28, 0x4C	; 76
    4c3c:	df 4f       	sbci	r29, 0xFF	; 255
    4c3e:	88 81       	ld	r24, Y
    4c40:	c4 5b       	subi	r28, 0xB4	; 180
    4c42:	d0 40       	sbci	r29, 0x00	; 0
    4c44:	8f 93       	push	r24
    4c46:	cd 54       	subi	r28, 0x4D	; 77
    4c48:	df 4f       	sbci	r29, 0xFF	; 255
    4c4a:	88 81       	ld	r24, Y
    4c4c:	c3 5b       	subi	r28, 0xB3	; 179
    4c4e:	d0 40       	sbci	r29, 0x00	; 0
    4c50:	8f 93       	push	r24
    4c52:	ce 54       	subi	r28, 0x4E	; 78
    4c54:	df 4f       	sbci	r29, 0xFF	; 255
    4c56:	88 81       	ld	r24, Y
    4c58:	c2 5b       	subi	r28, 0xB2	; 178
    4c5a:	d0 40       	sbci	r29, 0x00	; 0
    4c5c:	8f 93       	push	r24
    4c5e:	cf 54       	subi	r28, 0x4F	; 79
    4c60:	df 4f       	sbci	r29, 0xFF	; 255
    4c62:	88 81       	ld	r24, Y
    4c64:	c1 5b       	subi	r28, 0xB1	; 177
    4c66:	d0 40       	sbci	r29, 0x00	; 0
    4c68:	8f 93       	push	r24
    4c6a:	c0 55       	subi	r28, 0x50	; 80
    4c6c:	df 4f       	sbci	r29, 0xFF	; 255
    4c6e:	88 81       	ld	r24, Y
    4c70:	c0 5b       	subi	r28, 0xB0	; 176
    4c72:	d0 40       	sbci	r29, 0x00	; 0
    4c74:	8f 93       	push	r24
    4c76:	c1 55       	subi	r28, 0x51	; 81
    4c78:	df 4f       	sbci	r29, 0xFF	; 255
    4c7a:	88 81       	ld	r24, Y
    4c7c:	cf 5a       	subi	r28, 0xAF	; 175
    4c7e:	d0 40       	sbci	r29, 0x00	; 0
    4c80:	8f 93       	push	r24
    4c82:	c2 55       	subi	r28, 0x52	; 82
    4c84:	df 4f       	sbci	r29, 0xFF	; 255
    4c86:	88 81       	ld	r24, Y
    4c88:	ce 5a       	subi	r28, 0xAE	; 174
    4c8a:	d0 40       	sbci	r29, 0x00	; 0
    4c8c:	8f 93       	push	r24
    4c8e:	c3 55       	subi	r28, 0x53	; 83
    4c90:	df 4f       	sbci	r29, 0xFF	; 255
    4c92:	88 81       	ld	r24, Y
    4c94:	cd 5a       	subi	r28, 0xAD	; 173
    4c96:	d0 40       	sbci	r29, 0x00	; 0
    4c98:	8f 93       	push	r24
    4c9a:	c6 55       	subi	r28, 0x56	; 86
    4c9c:	df 4f       	sbci	r29, 0xFF	; 255
    4c9e:	88 81       	ld	r24, Y
    4ca0:	ca 5a       	subi	r28, 0xAA	; 170
    4ca2:	d0 40       	sbci	r29, 0x00	; 0
    4ca4:	8f 93       	push	r24
    4ca6:	c7 55       	subi	r28, 0x57	; 87
    4ca8:	df 4f       	sbci	r29, 0xFF	; 255
    4caa:	88 81       	ld	r24, Y
    4cac:	c9 5a       	subi	r28, 0xA9	; 169
    4cae:	d0 40       	sbci	r29, 0x00	; 0
    4cb0:	8f 93       	push	r24
    4cb2:	c8 55       	subi	r28, 0x58	; 88
    4cb4:	df 4f       	sbci	r29, 0xFF	; 255
    4cb6:	88 81       	ld	r24, Y
    4cb8:	c8 5a       	subi	r28, 0xA8	; 168
    4cba:	d0 40       	sbci	r29, 0x00	; 0
    4cbc:	8f 93       	push	r24
    4cbe:	c9 55       	subi	r28, 0x59	; 89
    4cc0:	df 4f       	sbci	r29, 0xFF	; 255
    4cc2:	88 81       	ld	r24, Y
    4cc4:	c7 5a       	subi	r28, 0xA7	; 167
    4cc6:	d0 40       	sbci	r29, 0x00	; 0
    4cc8:	8f 93       	push	r24
    4cca:	ca 55       	subi	r28, 0x5A	; 90
    4ccc:	df 4f       	sbci	r29, 0xFF	; 255
    4cce:	88 81       	ld	r24, Y
    4cd0:	c6 5a       	subi	r28, 0xA6	; 166
    4cd2:	d0 40       	sbci	r29, 0x00	; 0
    4cd4:	8f 93       	push	r24
    4cd6:	cb 55       	subi	r28, 0x5B	; 91
    4cd8:	df 4f       	sbci	r29, 0xFF	; 255
    4cda:	88 81       	ld	r24, Y
    4cdc:	c5 5a       	subi	r28, 0xA5	; 165
    4cde:	d0 40       	sbci	r29, 0x00	; 0
    4ce0:	8f 93       	push	r24
    4ce2:	b2 01       	movw	r22, r4
    4ce4:	05 2c       	mov	r0, r5
    4ce6:	00 0c       	add	r0, r0
    4ce8:	88 0b       	sbc	r24, r24
    4cea:	99 0b       	sbc	r25, r25
    4cec:	41 d2       	rcall	.+1154   	; 0x5170 <__floatsisf>
    4cee:	9b 01       	movw	r18, r22
    4cf0:	ac 01       	movw	r20, r24
    4cf2:	c7 53       	subi	r28, 0x37	; 55
    4cf4:	df 4f       	sbci	r29, 0xFF	; 255
    4cf6:	68 81       	ld	r22, Y
    4cf8:	79 81       	ldd	r23, Y+1	; 0x01
    4cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfe:	c9 5c       	subi	r28, 0xC9	; 201
    4d00:	d0 40       	sbci	r29, 0x00	; 0
    4d02:	b9 d0       	rcall	.+370    	; 0x4e76 <__subsf3>
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	4a e7       	ldi	r20, 0x7A	; 122
    4d0a:	54 e4       	ldi	r21, 0x44	; 68
    4d0c:	3d d3       	rcall	.+1658   	; 0x5388 <__mulsf3>
    4d0e:	fd d1       	rcall	.+1018   	; 0x510a <__fixsfsi>
    4d10:	9b 01       	movw	r18, r22
    4d12:	77 23       	and	r23, r23
    4d14:	24 f4       	brge	.+8      	; 0x4d1e <main+0x654>
    4d16:	22 27       	eor	r18, r18
    4d18:	33 27       	eor	r19, r19
    4d1a:	26 1b       	sub	r18, r22
    4d1c:	37 0b       	sbc	r19, r23
    4d1e:	3f 93       	push	r19
    4d20:	2f 93       	push	r18
    4d22:	5f 92       	push	r5
    4d24:	4f 92       	push	r4
    4d26:	c7 54       	subi	r28, 0x47	; 71
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	28 81       	ld	r18, Y
    4d2c:	39 81       	ldd	r19, Y+1	; 0x01
    4d2e:	c9 5b       	subi	r28, 0xB9	; 185
    4d30:	d0 40       	sbci	r29, 0x00	; 0
    4d32:	b9 01       	movw	r22, r18
    4d34:	33 0f       	add	r19, r19
    4d36:	88 0b       	sbc	r24, r24
    4d38:	99 0b       	sbc	r25, r25
    4d3a:	1a d2       	rcall	.+1076   	; 0x5170 <__floatsisf>
    4d3c:	9b 01       	movw	r18, r22
    4d3e:	ac 01       	movw	r20, r24
    4d40:	cb 53       	subi	r28, 0x3B	; 59
    4d42:	df 4f       	sbci	r29, 0xFF	; 255
    4d44:	68 81       	ld	r22, Y
    4d46:	79 81       	ldd	r23, Y+1	; 0x01
    4d48:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4c:	c5 5c       	subi	r28, 0xC5	; 197
    4d4e:	d0 40       	sbci	r29, 0x00	; 0
    4d50:	92 d0       	rcall	.+292    	; 0x4e76 <__subsf3>
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	4a e7       	ldi	r20, 0x7A	; 122
    4d58:	54 e4       	ldi	r21, 0x44	; 68
    4d5a:	16 d3       	rcall	.+1580   	; 0x5388 <__mulsf3>
    4d5c:	d6 d1       	rcall	.+940    	; 0x510a <__fixsfsi>
    4d5e:	9b 01       	movw	r18, r22
    4d60:	77 23       	and	r23, r23
    4d62:	24 f4       	brge	.+8      	; 0x4d6c <main+0x6a2>
    4d64:	22 27       	eor	r18, r18
    4d66:	33 27       	eor	r19, r19
    4d68:	26 1b       	sub	r18, r22
    4d6a:	37 0b       	sbc	r19, r23
    4d6c:	3f 93       	push	r19
    4d6e:	2f 93       	push	r18
    4d70:	c6 54       	subi	r28, 0x46	; 70
    4d72:	df 4f       	sbci	r29, 0xFF	; 255
    4d74:	38 81       	ld	r19, Y
    4d76:	ca 5b       	subi	r28, 0xBA	; 186
    4d78:	d0 40       	sbci	r29, 0x00	; 0
    4d7a:	3f 93       	push	r19
    4d7c:	c7 54       	subi	r28, 0x47	; 71
    4d7e:	df 4f       	sbci	r29, 0xFF	; 255
    4d80:	88 81       	ld	r24, Y
    4d82:	c9 5b       	subi	r28, 0xB9	; 185
    4d84:	d0 40       	sbci	r29, 0x00	; 0
    4d86:	8f 93       	push	r24
    4d88:	c3 54       	subi	r28, 0x43	; 67
    4d8a:	df 4f       	sbci	r29, 0xFF	; 255
    4d8c:	a8 81       	ld	r26, Y
    4d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    4d90:	cd 5b       	subi	r28, 0xBD	; 189
    4d92:	d0 40       	sbci	r29, 0x00	; 0
    4d94:	bd 01       	movw	r22, r26
    4d96:	bb 0f       	add	r27, r27
    4d98:	88 0b       	sbc	r24, r24
    4d9a:	99 0b       	sbc	r25, r25
    4d9c:	e9 d1       	rcall	.+978    	; 0x5170 <__floatsisf>
    4d9e:	9b 01       	movw	r18, r22
    4da0:	ac 01       	movw	r20, r24
    4da2:	cf 53       	subi	r28, 0x3F	; 63
    4da4:	df 4f       	sbci	r29, 0xFF	; 255
    4da6:	68 81       	ld	r22, Y
    4da8:	79 81       	ldd	r23, Y+1	; 0x01
    4daa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dac:	9b 81       	ldd	r25, Y+3	; 0x03
    4dae:	c1 5c       	subi	r28, 0xC1	; 193
    4db0:	d0 40       	sbci	r29, 0x00	; 0
    4db2:	61 d0       	rcall	.+194    	; 0x4e76 <__subsf3>
    4db4:	20 e0       	ldi	r18, 0x00	; 0
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	4a e7       	ldi	r20, 0x7A	; 122
    4dba:	54 e4       	ldi	r21, 0x44	; 68
    4dbc:	e5 d2       	rcall	.+1482   	; 0x5388 <__mulsf3>
    4dbe:	a5 d1       	rcall	.+842    	; 0x510a <__fixsfsi>
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	77 23       	and	r23, r23
    4dc4:	24 f4       	brge	.+8      	; 0x4dce <main+0x704>
    4dc6:	22 27       	eor	r18, r18
    4dc8:	33 27       	eor	r19, r19
    4dca:	26 1b       	sub	r18, r22
    4dcc:	37 0b       	sbc	r19, r23
    4dce:	3f 93       	push	r19
    4dd0:	2f 93       	push	r18
    4dd2:	c2 54       	subi	r28, 0x42	; 66
    4dd4:	df 4f       	sbci	r29, 0xFF	; 255
    4dd6:	b8 81       	ld	r27, Y
    4dd8:	ce 5b       	subi	r28, 0xBE	; 190
    4dda:	d0 40       	sbci	r29, 0x00	; 0
    4ddc:	bf 93       	push	r27
    4dde:	c3 54       	subi	r28, 0x43	; 67
    4de0:	df 4f       	sbci	r29, 0xFF	; 255
    4de2:	e8 81       	ld	r30, Y
    4de4:	cd 5b       	subi	r28, 0xBD	; 189
    4de6:	d0 40       	sbci	r29, 0x00	; 0
    4de8:	ef 93       	push	r30
    4dea:	bf 92       	push	r11
    4dec:	af 92       	push	r10
    4dee:	9f 92       	push	r9
    4df0:	8f 92       	push	r8
    4df2:	27 e5       	ldi	r18, 0x57	; 87
    4df4:	31 e2       	ldi	r19, 0x21	; 33
			imu_data.data.mag_x, imu_data.data.mag_y, imu_data.data.mag_z,
			imu_data.data.imu_temperature,
			adcValues[0], adcValues[1], adcValues[2], adcValues[3]);
		
		// Wait for new GPS packet
		while(ring_pop(&gps_ring, &gps_data)!=0){}
    4df6:	3f 93       	push	r19
    4df8:	2f 93       	push	r18
    4dfa:	03 d4       	rcall	.+2054   	; 0x5602 <printf>
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	de bf       	out	0x3e, r29	; 62
    4e00:	be 01       	movw	r22, r28
    4e02:	6f 5f       	subi	r22, 0xFF	; 255
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	80 e9       	ldi	r24, 0x90	; 144
    4e08:	93 e2       	ldi	r25, 0x23	; 35
    4e0a:	0d dc       	rcall	.-2022   	; 0x4626 <ring_pop>
		printf("%c", gps_data);
    4e0c:	89 2b       	or	r24, r25
    4e0e:	c1 f7       	brne	.-16     	; 0x4e00 <main+0x736>
    4e10:	89 81       	ldd	r24, Y+1	; 0x01
    4e12:	08 2e       	mov	r0, r24
    4e14:	00 0c       	add	r0, r0
    4e16:	99 0b       	sbc	r25, r25
		delay_ms(10);
    4e18:	07 d4       	rcall	.+2062   	; 0x5628 <putchar>
    4e1a:	66 e0       	ldi	r22, 0x06	; 6
    4e1c:	7d e0       	ldi	r23, 0x0D	; 13
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	f6 da       	rcall	.-2580   	; 0x4410 <__portable_avr_delay_cycles>
		
		GPSCounter = 0;
    4e24:	00 e0       	ldi	r16, 0x00	; 0
    4e26:	10 e0       	ldi	r17, 0x00	; 0
		// While the packet is coming in 
		while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    4e28:	14 c0       	rjmp	.+40     	; 0x4e52 <main+0x788>
			printf("%c", gps_data);
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	08 2e       	mov	r0, r24
    4e2e:	00 0c       	add	r0, r0
    4e30:	99 0b       	sbc	r25, r25
    4e32:	fa d3       	rcall	.+2036   	; 0x5628 <putchar>
    4e34:	0f 5f       	subi	r16, 0xFF	; 255
			GPSCounter++;
    4e36:	1f 4f       	sbci	r17, 0xFF	; 255
    4e38:	6c e1       	ldi	r22, 0x1C	; 28
			delay_us(850);
    4e3a:	71 e0       	ldi	r23, 0x01	; 1
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	e7 da       	rcall	.-2610   	; 0x4410 <__portable_avr_delay_cycles>
    4e42:	91 e0       	ldi	r25, 0x01	; 1
    4e44:	80 e0       	ldi	r24, 0x00	; 0
			if (GPSCounter>200)
			{
				GPSLock = 1;
    4e46:	09 3c       	cpi	r16, 0xC9	; 201
    4e48:	11 05       	cpc	r17, r1
    4e4a:	0c f4       	brge	.+2      	; 0x4e4e <main+0x784>
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	c9 2e       	mov	r12, r25
    4e50:	d8 2e       	mov	r13, r24
    4e52:	be 01       	movw	r22, r28
    4e54:	6f 5f       	subi	r22, 0xFF	; 255
		printf("%c", gps_data);
		delay_ms(10);
		
		GPSCounter = 0;
		// While the packet is coming in 
		while(ring_pop(&gps_ring, &gps_data)==0) { // returns 0 on success so keep going while we have data
    4e56:	7f 4f       	sbci	r23, 0xFF	; 255
    4e58:	80 e9       	ldi	r24, 0x90	; 144
    4e5a:	93 e2       	ldi	r25, 0x23	; 35
    4e5c:	e4 db       	rcall	.-2104   	; 0x4626 <ring_pop>
    4e5e:	89 2b       	or	r24, r25
    4e60:	21 f3       	breq	.-56     	; 0x4e2a <main+0x760>
    4e62:	80 ee       	ldi	r24, 0xE0	; 224
    4e64:	90 e2       	ldi	r25, 0x20	; 32
    4e66:	e5 d3       	rcall	.+1994   	; 0x5632 <puts>
				GPSLock = 1;
			}else{
				GPSLock = 0;
			}
		}
		printf("\n\n");
    4e68:	7d da       	rcall	.-2822   	; 0x4364 <uart_gps_init>
    4e6a:	bf ef       	ldi	r27, 0xFF	; 255
    4e6c:	8b 1a       	sub	r8, r27
    4e6e:	9b 0a       	sbc	r9, r27
		
		// turn sd off, gps on
		uart_gps_init();
    4e70:	ab 0a       	sbc	r10, r27
    4e72:	bb 0a       	sbc	r11, r27
		
		
		packetNumber = packetNumber + 1;
    4e74:	22 ce       	rjmp	.-956    	; 0x4aba <main+0x3f0>

00004e76 <__subsf3>:
    4e76:	50 58       	subi	r21, 0x80	; 128

00004e78 <__addsf3>:
    4e78:	bb 27       	eor	r27, r27
    4e7a:	aa 27       	eor	r26, r26
    4e7c:	0e d0       	rcall	.+28     	; 0x4e9a <__addsf3x>
	}
    4e7e:	3f c2       	rjmp	.+1150   	; 0x52fe <__fp_round>
    4e80:	30 d2       	rcall	.+1120   	; 0x52e2 <__fp_pscA>
    4e82:	30 f0       	brcs	.+12     	; 0x4e90 <__addsf3+0x18>
    4e84:	35 d2       	rcall	.+1130   	; 0x52f0 <__fp_pscB>
    4e86:	20 f0       	brcs	.+8      	; 0x4e90 <__addsf3+0x18>
    4e88:	31 f4       	brne	.+12     	; 0x4e96 <__addsf3+0x1e>
    4e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8c:	11 f4       	brne	.+4      	; 0x4e92 <__addsf3+0x1a>
    4e8e:	1e f4       	brtc	.+6      	; 0x4e96 <__addsf3+0x1e>
    4e90:	ef c1       	rjmp	.+990    	; 0x5270 <__fp_nan>
    4e92:	0e f4       	brtc	.+2      	; 0x4e96 <__addsf3+0x1e>
    4e94:	e0 95       	com	r30
    4e96:	e7 fb       	bst	r30, 7
    4e98:	e5 c1       	rjmp	.+970    	; 0x5264 <__fp_inf>

00004e9a <__addsf3x>:
    4e9a:	e9 2f       	mov	r30, r25
    4e9c:	41 d2       	rcall	.+1154   	; 0x5320 <__fp_split3>
    4e9e:	80 f3       	brcs	.-32     	; 0x4e80 <__addsf3+0x8>
    4ea0:	ba 17       	cp	r27, r26
    4ea2:	62 07       	cpc	r22, r18
    4ea4:	73 07       	cpc	r23, r19
    4ea6:	84 07       	cpc	r24, r20
    4ea8:	95 07       	cpc	r25, r21
    4eaa:	18 f0       	brcs	.+6      	; 0x4eb2 <__addsf3x+0x18>
    4eac:	71 f4       	brne	.+28     	; 0x4eca <__addsf3x+0x30>
    4eae:	9e f5       	brtc	.+102    	; 0x4f16 <__addsf3x+0x7c>
    4eb0:	59 c2       	rjmp	.+1202   	; 0x5364 <__fp_zero>
    4eb2:	0e f4       	brtc	.+2      	; 0x4eb6 <__addsf3x+0x1c>
    4eb4:	e0 95       	com	r30
    4eb6:	0b 2e       	mov	r0, r27
    4eb8:	ba 2f       	mov	r27, r26
    4eba:	a0 2d       	mov	r26, r0
    4ebc:	0b 01       	movw	r0, r22
    4ebe:	b9 01       	movw	r22, r18
    4ec0:	90 01       	movw	r18, r0
    4ec2:	0c 01       	movw	r0, r24
    4ec4:	ca 01       	movw	r24, r20
    4ec6:	a0 01       	movw	r20, r0
    4ec8:	11 24       	eor	r1, r1
    4eca:	ff 27       	eor	r31, r31
    4ecc:	59 1b       	sub	r21, r25
    4ece:	99 f0       	breq	.+38     	; 0x4ef6 <__addsf3x+0x5c>
    4ed0:	59 3f       	cpi	r21, 0xF9	; 249
    4ed2:	50 f4       	brcc	.+20     	; 0x4ee8 <__addsf3x+0x4e>
    4ed4:	50 3e       	cpi	r21, 0xE0	; 224
    4ed6:	68 f1       	brcs	.+90     	; 0x4f32 <__addsf3x+0x98>
    4ed8:	1a 16       	cp	r1, r26
    4eda:	f0 40       	sbci	r31, 0x00	; 0
    4edc:	a2 2f       	mov	r26, r18
    4ede:	23 2f       	mov	r18, r19
    4ee0:	34 2f       	mov	r19, r20
    4ee2:	44 27       	eor	r20, r20
    4ee4:	58 5f       	subi	r21, 0xF8	; 248
    4ee6:	f3 cf       	rjmp	.-26     	; 0x4ece <__addsf3x+0x34>
    4ee8:	46 95       	lsr	r20
    4eea:	37 95       	ror	r19
    4eec:	27 95       	ror	r18
    4eee:	a7 95       	ror	r26
    4ef0:	f0 40       	sbci	r31, 0x00	; 0
    4ef2:	53 95       	inc	r21
    4ef4:	c9 f7       	brne	.-14     	; 0x4ee8 <__addsf3x+0x4e>
    4ef6:	7e f4       	brtc	.+30     	; 0x4f16 <__addsf3x+0x7c>
    4ef8:	1f 16       	cp	r1, r31
    4efa:	ba 0b       	sbc	r27, r26
    4efc:	62 0b       	sbc	r22, r18
    4efe:	73 0b       	sbc	r23, r19
    4f00:	84 0b       	sbc	r24, r20
    4f02:	ba f0       	brmi	.+46     	; 0x4f32 <__addsf3x+0x98>
    4f04:	91 50       	subi	r25, 0x01	; 1
    4f06:	a1 f0       	breq	.+40     	; 0x4f30 <__addsf3x+0x96>
    4f08:	ff 0f       	add	r31, r31
    4f0a:	bb 1f       	adc	r27, r27
    4f0c:	66 1f       	adc	r22, r22
    4f0e:	77 1f       	adc	r23, r23
    4f10:	88 1f       	adc	r24, r24
    4f12:	c2 f7       	brpl	.-16     	; 0x4f04 <__addsf3x+0x6a>
    4f14:	0e c0       	rjmp	.+28     	; 0x4f32 <__addsf3x+0x98>
    4f16:	ba 0f       	add	r27, r26
    4f18:	62 1f       	adc	r22, r18
    4f1a:	73 1f       	adc	r23, r19
    4f1c:	84 1f       	adc	r24, r20
    4f1e:	48 f4       	brcc	.+18     	; 0x4f32 <__addsf3x+0x98>
    4f20:	87 95       	ror	r24
    4f22:	77 95       	ror	r23
    4f24:	67 95       	ror	r22
    4f26:	b7 95       	ror	r27
    4f28:	f7 95       	ror	r31
    4f2a:	9e 3f       	cpi	r25, 0xFE	; 254
    4f2c:	08 f0       	brcs	.+2      	; 0x4f30 <__addsf3x+0x96>
    4f2e:	b3 cf       	rjmp	.-154    	; 0x4e96 <__addsf3+0x1e>
    4f30:	93 95       	inc	r25
    4f32:	88 0f       	add	r24, r24
    4f34:	08 f0       	brcs	.+2      	; 0x4f38 <__addsf3x+0x9e>
    4f36:	99 27       	eor	r25, r25
    4f38:	ee 0f       	add	r30, r30
    4f3a:	97 95       	ror	r25
    4f3c:	87 95       	ror	r24
    4f3e:	08 95       	ret

00004f40 <asin>:
    4f40:	9f 93       	push	r25
    4f42:	9f 77       	andi	r25, 0x7F	; 127
    4f44:	ee e3       	ldi	r30, 0x3E	; 62
    4f46:	89 37       	cpi	r24, 0x79	; 121
    4f48:	9e 07       	cpc	r25, r30
    4f4a:	20 f4       	brcc	.+8      	; 0x4f54 <asin+0x14>
    4f4c:	ec ef       	ldi	r30, 0xFC	; 252
    4f4e:	f1 e0       	ldi	r31, 0x01	; 1
    4f50:	b7 d1       	rcall	.+878    	; 0x52c0 <__fp_powsodd>
    4f52:	09 c0       	rjmp	.+18     	; 0x4f66 <asin+0x26>
    4f54:	48 d1       	rcall	.+656    	; 0x51e6 <__fp_arccos>
    4f56:	90 58       	subi	r25, 0x80	; 128
    4f58:	a2 ea       	ldi	r26, 0xA2	; 162
    4f5a:	2a ed       	ldi	r18, 0xDA	; 218
    4f5c:	3f e0       	ldi	r19, 0x0F	; 15
    4f5e:	49 ec       	ldi	r20, 0xC9	; 201
    4f60:	5f e3       	ldi	r21, 0x3F	; 63
    4f62:	9b df       	rcall	.-202    	; 0x4e9a <__addsf3x>
    4f64:	cc d1       	rcall	.+920    	; 0x52fe <__fp_round>
    4f66:	0f 90       	pop	r0
    4f68:	07 fc       	sbrc	r0, 7
    4f6a:	90 58       	subi	r25, 0x80	; 128
    4f6c:	08 95       	ret
    4f6e:	b9 d1       	rcall	.+882    	; 0x52e2 <__fp_pscA>
    4f70:	58 f0       	brcs	.+22     	; 0x4f88 <asin+0x48>
    4f72:	80 e8       	ldi	r24, 0x80	; 128
    4f74:	91 e0       	ldi	r25, 0x01	; 1
    4f76:	09 f4       	brne	.+2      	; 0x4f7a <asin+0x3a>
    4f78:	9e ef       	ldi	r25, 0xFE	; 254
    4f7a:	ba d1       	rcall	.+884    	; 0x52f0 <__fp_pscB>
    4f7c:	28 f0       	brcs	.+10     	; 0x4f88 <asin+0x48>
    4f7e:	40 e8       	ldi	r20, 0x80	; 128
    4f80:	51 e0       	ldi	r21, 0x01	; 1
    4f82:	59 f4       	brne	.+22     	; 0x4f9a <atan2+0xe>
    4f84:	5e ef       	ldi	r21, 0xFE	; 254
    4f86:	09 c0       	rjmp	.+18     	; 0x4f9a <atan2+0xe>
    4f88:	73 c1       	rjmp	.+742    	; 0x5270 <__fp_nan>
    4f8a:	ec c1       	rjmp	.+984    	; 0x5364 <__fp_zero>

00004f8c <atan2>:
    4f8c:	e9 2f       	mov	r30, r25
    4f8e:	e0 78       	andi	r30, 0x80	; 128
    4f90:	c7 d1       	rcall	.+910    	; 0x5320 <__fp_split3>
    4f92:	68 f3       	brcs	.-38     	; 0x4f6e <asin+0x2e>
    4f94:	09 2e       	mov	r0, r25
    4f96:	05 2a       	or	r0, r21
    4f98:	c1 f3       	breq	.-16     	; 0x4f8a <asin+0x4a>
    4f9a:	26 17       	cp	r18, r22
    4f9c:	37 07       	cpc	r19, r23
    4f9e:	48 07       	cpc	r20, r24
    4fa0:	59 07       	cpc	r21, r25
    4fa2:	38 f0       	brcs	.+14     	; 0x4fb2 <atan2+0x26>
    4fa4:	0e 2e       	mov	r0, r30
    4fa6:	07 f8       	bld	r0, 7
    4fa8:	e0 25       	eor	r30, r0
    4faa:	69 f0       	breq	.+26     	; 0x4fc6 <atan2+0x3a>
    4fac:	e0 25       	eor	r30, r0
    4fae:	e0 64       	ori	r30, 0x40	; 64
    4fb0:	0a c0       	rjmp	.+20     	; 0x4fc6 <atan2+0x3a>
    4fb2:	ef 63       	ori	r30, 0x3F	; 63
    4fb4:	07 f8       	bld	r0, 7
    4fb6:	00 94       	com	r0
    4fb8:	07 fa       	bst	r0, 7
    4fba:	db 01       	movw	r26, r22
    4fbc:	b9 01       	movw	r22, r18
    4fbe:	9d 01       	movw	r18, r26
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	ca 01       	movw	r24, r20
    4fc4:	ad 01       	movw	r20, r26
    4fc6:	ef 93       	push	r30
    4fc8:	47 d0       	rcall	.+142    	; 0x5058 <__divsf3_pse>
    4fca:	99 d1       	rcall	.+818    	; 0x52fe <__fp_round>
    4fcc:	0a d0       	rcall	.+20     	; 0x4fe2 <atan>
    4fce:	5f 91       	pop	r21
    4fd0:	55 23       	and	r21, r21
    4fd2:	31 f0       	breq	.+12     	; 0x4fe0 <atan2+0x54>
    4fd4:	2b ed       	ldi	r18, 0xDB	; 219
    4fd6:	3f e0       	ldi	r19, 0x0F	; 15
    4fd8:	49 e4       	ldi	r20, 0x49	; 73
    4fda:	50 fd       	sbrc	r21, 0
    4fdc:	49 ec       	ldi	r20, 0xC9	; 201
    4fde:	4c cf       	rjmp	.-360    	; 0x4e78 <__addsf3>
    4fe0:	08 95       	ret

00004fe2 <atan>:
    4fe2:	df 93       	push	r29
    4fe4:	dd 27       	eor	r29, r29
    4fe6:	b9 2f       	mov	r27, r25
    4fe8:	bf 77       	andi	r27, 0x7F	; 127
    4fea:	40 e8       	ldi	r20, 0x80	; 128
    4fec:	5f e3       	ldi	r21, 0x3F	; 63
    4fee:	16 16       	cp	r1, r22
    4ff0:	17 06       	cpc	r1, r23
    4ff2:	48 07       	cpc	r20, r24
    4ff4:	5b 07       	cpc	r21, r27
    4ff6:	10 f4       	brcc	.+4      	; 0x4ffc <atan+0x1a>
    4ff8:	d9 2f       	mov	r29, r25
    4ffa:	bf d1       	rcall	.+894    	; 0x537a <inverse>
    4ffc:	9f 93       	push	r25
    4ffe:	8f 93       	push	r24
    5000:	7f 93       	push	r23
    5002:	6f 93       	push	r22
    5004:	66 d2       	rcall	.+1228   	; 0x54d2 <square>
    5006:	e0 e1       	ldi	r30, 0x10	; 16
    5008:	f2 e0       	ldi	r31, 0x02	; 2
    500a:	35 d1       	rcall	.+618    	; 0x5276 <__fp_powser>
    500c:	78 d1       	rcall	.+752    	; 0x52fe <__fp_round>
    500e:	2f 91       	pop	r18
    5010:	3f 91       	pop	r19
    5012:	4f 91       	pop	r20
    5014:	5f 91       	pop	r21
    5016:	c4 d1       	rcall	.+904    	; 0x53a0 <__mulsf3x>
    5018:	dd 23       	and	r29, r29
    501a:	49 f0       	breq	.+18     	; 0x502e <atan+0x4c>
    501c:	90 58       	subi	r25, 0x80	; 128
    501e:	a2 ea       	ldi	r26, 0xA2	; 162
    5020:	2a ed       	ldi	r18, 0xDA	; 218
    5022:	3f e0       	ldi	r19, 0x0F	; 15
    5024:	49 ec       	ldi	r20, 0xC9	; 201
    5026:	5f e3       	ldi	r21, 0x3F	; 63
    5028:	d0 78       	andi	r29, 0x80	; 128
    502a:	5d 27       	eor	r21, r29
    502c:	36 df       	rcall	.-404    	; 0x4e9a <__addsf3x>
    502e:	df 91       	pop	r29
    5030:	66 c1       	rjmp	.+716    	; 0x52fe <__fp_round>

00005032 <__cmpsf2>:
    5032:	f4 d0       	rcall	.+488    	; 0x521c <__fp_cmp>
    5034:	08 f4       	brcc	.+2      	; 0x5038 <__cmpsf2+0x6>
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	08 95       	ret

0000503a <__divsf3>:
    503a:	0c d0       	rcall	.+24     	; 0x5054 <__divsf3x>
    503c:	60 c1       	rjmp	.+704    	; 0x52fe <__fp_round>
    503e:	58 d1       	rcall	.+688    	; 0x52f0 <__fp_pscB>
    5040:	40 f0       	brcs	.+16     	; 0x5052 <__divsf3+0x18>
    5042:	4f d1       	rcall	.+670    	; 0x52e2 <__fp_pscA>
    5044:	30 f0       	brcs	.+12     	; 0x5052 <__divsf3+0x18>
    5046:	21 f4       	brne	.+8      	; 0x5050 <__divsf3+0x16>
    5048:	5f 3f       	cpi	r21, 0xFF	; 255
    504a:	19 f0       	breq	.+6      	; 0x5052 <__divsf3+0x18>
    504c:	0b c1       	rjmp	.+534    	; 0x5264 <__fp_inf>
    504e:	51 11       	cpse	r21, r1
    5050:	8a c1       	rjmp	.+788    	; 0x5366 <__fp_szero>
    5052:	0e c1       	rjmp	.+540    	; 0x5270 <__fp_nan>

00005054 <__divsf3x>:
    5054:	65 d1       	rcall	.+714    	; 0x5320 <__fp_split3>
    5056:	98 f3       	brcs	.-26     	; 0x503e <__divsf3+0x4>

00005058 <__divsf3_pse>:
    5058:	99 23       	and	r25, r25
    505a:	c9 f3       	breq	.-14     	; 0x504e <__divsf3+0x14>
    505c:	55 23       	and	r21, r21
    505e:	b1 f3       	breq	.-20     	; 0x504c <__divsf3+0x12>
    5060:	95 1b       	sub	r25, r21
    5062:	55 0b       	sbc	r21, r21
    5064:	bb 27       	eor	r27, r27
    5066:	aa 27       	eor	r26, r26
    5068:	62 17       	cp	r22, r18
    506a:	73 07       	cpc	r23, r19
    506c:	84 07       	cpc	r24, r20
    506e:	38 f0       	brcs	.+14     	; 0x507e <__divsf3_pse+0x26>
    5070:	9f 5f       	subi	r25, 0xFF	; 255
    5072:	5f 4f       	sbci	r21, 0xFF	; 255
    5074:	22 0f       	add	r18, r18
    5076:	33 1f       	adc	r19, r19
    5078:	44 1f       	adc	r20, r20
    507a:	aa 1f       	adc	r26, r26
    507c:	a9 f3       	breq	.-22     	; 0x5068 <__divsf3_pse+0x10>
    507e:	33 d0       	rcall	.+102    	; 0x50e6 <__divsf3_pse+0x8e>
    5080:	0e 2e       	mov	r0, r30
    5082:	3a f0       	brmi	.+14     	; 0x5092 <__divsf3_pse+0x3a>
    5084:	e0 e8       	ldi	r30, 0x80	; 128
    5086:	30 d0       	rcall	.+96     	; 0x50e8 <__divsf3_pse+0x90>
    5088:	91 50       	subi	r25, 0x01	; 1
    508a:	50 40       	sbci	r21, 0x00	; 0
    508c:	e6 95       	lsr	r30
    508e:	00 1c       	adc	r0, r0
    5090:	ca f7       	brpl	.-14     	; 0x5084 <__divsf3_pse+0x2c>
    5092:	29 d0       	rcall	.+82     	; 0x50e6 <__divsf3_pse+0x8e>
    5094:	fe 2f       	mov	r31, r30
    5096:	27 d0       	rcall	.+78     	; 0x50e6 <__divsf3_pse+0x8e>
    5098:	66 0f       	add	r22, r22
    509a:	77 1f       	adc	r23, r23
    509c:	88 1f       	adc	r24, r24
    509e:	bb 1f       	adc	r27, r27
    50a0:	26 17       	cp	r18, r22
    50a2:	37 07       	cpc	r19, r23
    50a4:	48 07       	cpc	r20, r24
    50a6:	ab 07       	cpc	r26, r27
    50a8:	b0 e8       	ldi	r27, 0x80	; 128
    50aa:	09 f0       	breq	.+2      	; 0x50ae <__divsf3_pse+0x56>
    50ac:	bb 0b       	sbc	r27, r27
    50ae:	80 2d       	mov	r24, r0
    50b0:	bf 01       	movw	r22, r30
    50b2:	ff 27       	eor	r31, r31
    50b4:	93 58       	subi	r25, 0x83	; 131
    50b6:	5f 4f       	sbci	r21, 0xFF	; 255
    50b8:	2a f0       	brmi	.+10     	; 0x50c4 <__divsf3_pse+0x6c>
    50ba:	9e 3f       	cpi	r25, 0xFE	; 254
    50bc:	51 05       	cpc	r21, r1
    50be:	68 f0       	brcs	.+26     	; 0x50da <__divsf3_pse+0x82>
    50c0:	d1 c0       	rjmp	.+418    	; 0x5264 <__fp_inf>
    50c2:	51 c1       	rjmp	.+674    	; 0x5366 <__fp_szero>
    50c4:	5f 3f       	cpi	r21, 0xFF	; 255
    50c6:	ec f3       	brlt	.-6      	; 0x50c2 <__divsf3_pse+0x6a>
    50c8:	98 3e       	cpi	r25, 0xE8	; 232
    50ca:	dc f3       	brlt	.-10     	; 0x50c2 <__divsf3_pse+0x6a>
    50cc:	86 95       	lsr	r24
    50ce:	77 95       	ror	r23
    50d0:	67 95       	ror	r22
    50d2:	b7 95       	ror	r27
    50d4:	f7 95       	ror	r31
    50d6:	9f 5f       	subi	r25, 0xFF	; 255
    50d8:	c9 f7       	brne	.-14     	; 0x50cc <__divsf3_pse+0x74>
    50da:	88 0f       	add	r24, r24
    50dc:	91 1d       	adc	r25, r1
    50de:	96 95       	lsr	r25
    50e0:	87 95       	ror	r24
    50e2:	97 f9       	bld	r25, 7
    50e4:	08 95       	ret
    50e6:	e1 e0       	ldi	r30, 0x01	; 1
    50e8:	66 0f       	add	r22, r22
    50ea:	77 1f       	adc	r23, r23
    50ec:	88 1f       	adc	r24, r24
    50ee:	bb 1f       	adc	r27, r27
    50f0:	62 17       	cp	r22, r18
    50f2:	73 07       	cpc	r23, r19
    50f4:	84 07       	cpc	r24, r20
    50f6:	ba 07       	cpc	r27, r26
    50f8:	20 f0       	brcs	.+8      	; 0x5102 <__divsf3_pse+0xaa>
    50fa:	62 1b       	sub	r22, r18
    50fc:	73 0b       	sbc	r23, r19
    50fe:	84 0b       	sbc	r24, r20
    5100:	ba 0b       	sbc	r27, r26
    5102:	ee 1f       	adc	r30, r30
    5104:	88 f7       	brcc	.-30     	; 0x50e8 <__divsf3_pse+0x90>
    5106:	e0 95       	com	r30
    5108:	08 95       	ret

0000510a <__fixsfsi>:
    510a:	04 d0       	rcall	.+8      	; 0x5114 <__fixunssfsi>
    510c:	68 94       	set
    510e:	b1 11       	cpse	r27, r1
    5110:	2a c1       	rjmp	.+596    	; 0x5366 <__fp_szero>
    5112:	08 95       	ret

00005114 <__fixunssfsi>:
    5114:	0d d1       	rcall	.+538    	; 0x5330 <__fp_splitA>
    5116:	88 f0       	brcs	.+34     	; 0x513a <__fixunssfsi+0x26>
    5118:	9f 57       	subi	r25, 0x7F	; 127
    511a:	90 f0       	brcs	.+36     	; 0x5140 <__fixunssfsi+0x2c>
    511c:	b9 2f       	mov	r27, r25
    511e:	99 27       	eor	r25, r25
    5120:	b7 51       	subi	r27, 0x17	; 23
    5122:	a0 f0       	brcs	.+40     	; 0x514c <__fixunssfsi+0x38>
    5124:	d1 f0       	breq	.+52     	; 0x515a <__fixunssfsi+0x46>
    5126:	66 0f       	add	r22, r22
    5128:	77 1f       	adc	r23, r23
    512a:	88 1f       	adc	r24, r24
    512c:	99 1f       	adc	r25, r25
    512e:	1a f0       	brmi	.+6      	; 0x5136 <__fixunssfsi+0x22>
    5130:	ba 95       	dec	r27
    5132:	c9 f7       	brne	.-14     	; 0x5126 <__fixunssfsi+0x12>
    5134:	12 c0       	rjmp	.+36     	; 0x515a <__fixunssfsi+0x46>
    5136:	b1 30       	cpi	r27, 0x01	; 1
    5138:	81 f0       	breq	.+32     	; 0x515a <__fixunssfsi+0x46>
    513a:	14 d1       	rcall	.+552    	; 0x5364 <__fp_zero>
    513c:	b1 e0       	ldi	r27, 0x01	; 1
    513e:	08 95       	ret
    5140:	11 c1       	rjmp	.+546    	; 0x5364 <__fp_zero>
    5142:	67 2f       	mov	r22, r23
    5144:	78 2f       	mov	r23, r24
    5146:	88 27       	eor	r24, r24
    5148:	b8 5f       	subi	r27, 0xF8	; 248
    514a:	39 f0       	breq	.+14     	; 0x515a <__fixunssfsi+0x46>
    514c:	b9 3f       	cpi	r27, 0xF9	; 249
    514e:	cc f3       	brlt	.-14     	; 0x5142 <__fixunssfsi+0x2e>
    5150:	86 95       	lsr	r24
    5152:	77 95       	ror	r23
    5154:	67 95       	ror	r22
    5156:	b3 95       	inc	r27
    5158:	d9 f7       	brne	.-10     	; 0x5150 <__fixunssfsi+0x3c>
    515a:	3e f4       	brtc	.+14     	; 0x516a <__fixunssfsi+0x56>
    515c:	90 95       	com	r25
    515e:	80 95       	com	r24
    5160:	70 95       	com	r23
    5162:	61 95       	neg	r22
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	8f 4f       	sbci	r24, 0xFF	; 255
    5168:	9f 4f       	sbci	r25, 0xFF	; 255
    516a:	08 95       	ret

0000516c <__floatunsisf>:
    516c:	e8 94       	clt
    516e:	09 c0       	rjmp	.+18     	; 0x5182 <__floatsisf+0x12>

00005170 <__floatsisf>:
    5170:	97 fb       	bst	r25, 7
    5172:	3e f4       	brtc	.+14     	; 0x5182 <__floatsisf+0x12>
    5174:	90 95       	com	r25
    5176:	80 95       	com	r24
    5178:	70 95       	com	r23
    517a:	61 95       	neg	r22
    517c:	7f 4f       	sbci	r23, 0xFF	; 255
    517e:	8f 4f       	sbci	r24, 0xFF	; 255
    5180:	9f 4f       	sbci	r25, 0xFF	; 255
    5182:	99 23       	and	r25, r25
    5184:	a9 f0       	breq	.+42     	; 0x51b0 <__floatsisf+0x40>
    5186:	f9 2f       	mov	r31, r25
    5188:	96 e9       	ldi	r25, 0x96	; 150
    518a:	bb 27       	eor	r27, r27
    518c:	93 95       	inc	r25
    518e:	f6 95       	lsr	r31
    5190:	87 95       	ror	r24
    5192:	77 95       	ror	r23
    5194:	67 95       	ror	r22
    5196:	b7 95       	ror	r27
    5198:	f1 11       	cpse	r31, r1
    519a:	f8 cf       	rjmp	.-16     	; 0x518c <__floatsisf+0x1c>
    519c:	fa f4       	brpl	.+62     	; 0x51dc <__floatsisf+0x6c>
    519e:	bb 0f       	add	r27, r27
    51a0:	11 f4       	brne	.+4      	; 0x51a6 <__floatsisf+0x36>
    51a2:	60 ff       	sbrs	r22, 0
    51a4:	1b c0       	rjmp	.+54     	; 0x51dc <__floatsisf+0x6c>
    51a6:	6f 5f       	subi	r22, 0xFF	; 255
    51a8:	7f 4f       	sbci	r23, 0xFF	; 255
    51aa:	8f 4f       	sbci	r24, 0xFF	; 255
    51ac:	9f 4f       	sbci	r25, 0xFF	; 255
    51ae:	16 c0       	rjmp	.+44     	; 0x51dc <__floatsisf+0x6c>
    51b0:	88 23       	and	r24, r24
    51b2:	11 f0       	breq	.+4      	; 0x51b8 <__floatsisf+0x48>
    51b4:	96 e9       	ldi	r25, 0x96	; 150
    51b6:	11 c0       	rjmp	.+34     	; 0x51da <__floatsisf+0x6a>
    51b8:	77 23       	and	r23, r23
    51ba:	21 f0       	breq	.+8      	; 0x51c4 <__floatsisf+0x54>
    51bc:	9e e8       	ldi	r25, 0x8E	; 142
    51be:	87 2f       	mov	r24, r23
    51c0:	76 2f       	mov	r23, r22
    51c2:	05 c0       	rjmp	.+10     	; 0x51ce <__floatsisf+0x5e>
    51c4:	66 23       	and	r22, r22
    51c6:	71 f0       	breq	.+28     	; 0x51e4 <__floatsisf+0x74>
    51c8:	96 e8       	ldi	r25, 0x86	; 134
    51ca:	86 2f       	mov	r24, r22
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	60 e0       	ldi	r22, 0x00	; 0
    51d0:	2a f0       	brmi	.+10     	; 0x51dc <__floatsisf+0x6c>
    51d2:	9a 95       	dec	r25
    51d4:	66 0f       	add	r22, r22
    51d6:	77 1f       	adc	r23, r23
    51d8:	88 1f       	adc	r24, r24
    51da:	da f7       	brpl	.-10     	; 0x51d2 <__floatsisf+0x62>
    51dc:	88 0f       	add	r24, r24
    51de:	96 95       	lsr	r25
    51e0:	87 95       	ror	r24
    51e2:	97 f9       	bld	r25, 7
    51e4:	08 95       	ret

000051e6 <__fp_arccos>:
    51e6:	df 93       	push	r29
    51e8:	cf 93       	push	r28
    51ea:	1f 93       	push	r17
    51ec:	0f 93       	push	r16
    51ee:	8b 01       	movw	r16, r22
    51f0:	ec 01       	movw	r28, r24
    51f2:	ed e3       	ldi	r30, 0x3D	; 61
    51f4:	f2 e0       	ldi	r31, 0x02	; 2
    51f6:	3f d0       	rcall	.+126    	; 0x5276 <__fp_powser>
    51f8:	82 d0       	rcall	.+260    	; 0x52fe <__fp_round>
    51fa:	98 01       	movw	r18, r16
    51fc:	ae 01       	movw	r20, r28
    51fe:	8b 01       	movw	r16, r22
    5200:	ec 01       	movw	r28, r24
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	70 e0       	ldi	r23, 0x00	; 0
    5206:	80 e8       	ldi	r24, 0x80	; 128
    5208:	9f e3       	ldi	r25, 0x3F	; 63
    520a:	35 de       	rcall	.-918    	; 0x4e76 <__subsf3>
    520c:	24 d1       	rcall	.+584    	; 0x5456 <sqrt>
    520e:	98 01       	movw	r18, r16
    5210:	ae 01       	movw	r20, r28
    5212:	0f 91       	pop	r16
    5214:	1f 91       	pop	r17
    5216:	cf 91       	pop	r28
    5218:	df 91       	pop	r29
    521a:	c2 c0       	rjmp	.+388    	; 0x53a0 <__mulsf3x>

0000521c <__fp_cmp>:
    521c:	99 0f       	add	r25, r25
    521e:	00 08       	sbc	r0, r0
    5220:	55 0f       	add	r21, r21
    5222:	aa 0b       	sbc	r26, r26
    5224:	e0 e8       	ldi	r30, 0x80	; 128
    5226:	fe ef       	ldi	r31, 0xFE	; 254
    5228:	16 16       	cp	r1, r22
    522a:	17 06       	cpc	r1, r23
    522c:	e8 07       	cpc	r30, r24
    522e:	f9 07       	cpc	r31, r25
    5230:	c0 f0       	brcs	.+48     	; 0x5262 <__fp_cmp+0x46>
    5232:	12 16       	cp	r1, r18
    5234:	13 06       	cpc	r1, r19
    5236:	e4 07       	cpc	r30, r20
    5238:	f5 07       	cpc	r31, r21
    523a:	98 f0       	brcs	.+38     	; 0x5262 <__fp_cmp+0x46>
    523c:	62 1b       	sub	r22, r18
    523e:	73 0b       	sbc	r23, r19
    5240:	84 0b       	sbc	r24, r20
    5242:	95 0b       	sbc	r25, r21
    5244:	39 f4       	brne	.+14     	; 0x5254 <__fp_cmp+0x38>
    5246:	0a 26       	eor	r0, r26
    5248:	61 f0       	breq	.+24     	; 0x5262 <__fp_cmp+0x46>
    524a:	23 2b       	or	r18, r19
    524c:	24 2b       	or	r18, r20
    524e:	25 2b       	or	r18, r21
    5250:	21 f4       	brne	.+8      	; 0x525a <__fp_cmp+0x3e>
    5252:	08 95       	ret
    5254:	0a 26       	eor	r0, r26
    5256:	09 f4       	brne	.+2      	; 0x525a <__fp_cmp+0x3e>
    5258:	a1 40       	sbci	r26, 0x01	; 1
    525a:	a6 95       	lsr	r26
    525c:	8f ef       	ldi	r24, 0xFF	; 255
    525e:	81 1d       	adc	r24, r1
    5260:	81 1d       	adc	r24, r1
    5262:	08 95       	ret

00005264 <__fp_inf>:
    5264:	97 f9       	bld	r25, 7
    5266:	9f 67       	ori	r25, 0x7F	; 127
    5268:	80 e8       	ldi	r24, 0x80	; 128
    526a:	70 e0       	ldi	r23, 0x00	; 0
    526c:	60 e0       	ldi	r22, 0x00	; 0
    526e:	08 95       	ret

00005270 <__fp_nan>:
    5270:	9f ef       	ldi	r25, 0xFF	; 255
    5272:	80 ec       	ldi	r24, 0xC0	; 192
    5274:	08 95       	ret

00005276 <__fp_powser>:
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	1f 93       	push	r17
    527c:	0f 93       	push	r16
    527e:	ff 92       	push	r15
    5280:	ef 92       	push	r14
    5282:	df 92       	push	r13
    5284:	7b 01       	movw	r14, r22
    5286:	8c 01       	movw	r16, r24
    5288:	68 94       	set
    528a:	05 c0       	rjmp	.+10     	; 0x5296 <__fp_powser+0x20>
    528c:	da 2e       	mov	r13, r26
    528e:	ef 01       	movw	r28, r30
    5290:	87 d0       	rcall	.+270    	; 0x53a0 <__mulsf3x>
    5292:	fe 01       	movw	r30, r28
    5294:	e8 94       	clt
    5296:	a5 91       	lpm	r26, Z+
    5298:	25 91       	lpm	r18, Z+
    529a:	35 91       	lpm	r19, Z+
    529c:	45 91       	lpm	r20, Z+
    529e:	55 91       	lpm	r21, Z+
    52a0:	ae f3       	brts	.-22     	; 0x528c <__fp_powser+0x16>
    52a2:	ef 01       	movw	r28, r30
    52a4:	fa dd       	rcall	.-1036   	; 0x4e9a <__addsf3x>
    52a6:	fe 01       	movw	r30, r28
    52a8:	97 01       	movw	r18, r14
    52aa:	a8 01       	movw	r20, r16
    52ac:	da 94       	dec	r13
    52ae:	79 f7       	brne	.-34     	; 0x528e <__fp_powser+0x18>
    52b0:	df 90       	pop	r13
    52b2:	ef 90       	pop	r14
    52b4:	ff 90       	pop	r15
    52b6:	0f 91       	pop	r16
    52b8:	1f 91       	pop	r17
    52ba:	cf 91       	pop	r28
    52bc:	df 91       	pop	r29
    52be:	08 95       	ret

000052c0 <__fp_powsodd>:
    52c0:	9f 93       	push	r25
    52c2:	8f 93       	push	r24
    52c4:	7f 93       	push	r23
    52c6:	6f 93       	push	r22
    52c8:	ff 93       	push	r31
    52ca:	ef 93       	push	r30
    52cc:	9b 01       	movw	r18, r22
    52ce:	ac 01       	movw	r20, r24
    52d0:	5b d0       	rcall	.+182    	; 0x5388 <__mulsf3>
    52d2:	ef 91       	pop	r30
    52d4:	ff 91       	pop	r31
    52d6:	cf df       	rcall	.-98     	; 0x5276 <__fp_powser>
    52d8:	2f 91       	pop	r18
    52da:	3f 91       	pop	r19
    52dc:	4f 91       	pop	r20
    52de:	5f 91       	pop	r21
    52e0:	53 c0       	rjmp	.+166    	; 0x5388 <__mulsf3>

000052e2 <__fp_pscA>:
    52e2:	00 24       	eor	r0, r0
    52e4:	0a 94       	dec	r0
    52e6:	16 16       	cp	r1, r22
    52e8:	17 06       	cpc	r1, r23
    52ea:	18 06       	cpc	r1, r24
    52ec:	09 06       	cpc	r0, r25
    52ee:	08 95       	ret

000052f0 <__fp_pscB>:
    52f0:	00 24       	eor	r0, r0
    52f2:	0a 94       	dec	r0
    52f4:	12 16       	cp	r1, r18
    52f6:	13 06       	cpc	r1, r19
    52f8:	14 06       	cpc	r1, r20
    52fa:	05 06       	cpc	r0, r21
    52fc:	08 95       	ret

000052fe <__fp_round>:
    52fe:	09 2e       	mov	r0, r25
    5300:	03 94       	inc	r0
    5302:	00 0c       	add	r0, r0
    5304:	11 f4       	brne	.+4      	; 0x530a <__fp_round+0xc>
    5306:	88 23       	and	r24, r24
    5308:	52 f0       	brmi	.+20     	; 0x531e <__fp_round+0x20>
    530a:	bb 0f       	add	r27, r27
    530c:	40 f4       	brcc	.+16     	; 0x531e <__fp_round+0x20>
    530e:	bf 2b       	or	r27, r31
    5310:	11 f4       	brne	.+4      	; 0x5316 <__fp_round+0x18>
    5312:	60 ff       	sbrs	r22, 0
    5314:	04 c0       	rjmp	.+8      	; 0x531e <__fp_round+0x20>
    5316:	6f 5f       	subi	r22, 0xFF	; 255
    5318:	7f 4f       	sbci	r23, 0xFF	; 255
    531a:	8f 4f       	sbci	r24, 0xFF	; 255
    531c:	9f 4f       	sbci	r25, 0xFF	; 255
    531e:	08 95       	ret

00005320 <__fp_split3>:
    5320:	57 fd       	sbrc	r21, 7
    5322:	90 58       	subi	r25, 0x80	; 128
    5324:	44 0f       	add	r20, r20
    5326:	55 1f       	adc	r21, r21
    5328:	59 f0       	breq	.+22     	; 0x5340 <__fp_splitA+0x10>
    532a:	5f 3f       	cpi	r21, 0xFF	; 255
    532c:	71 f0       	breq	.+28     	; 0x534a <__fp_splitA+0x1a>
    532e:	47 95       	ror	r20

00005330 <__fp_splitA>:
    5330:	88 0f       	add	r24, r24
    5332:	97 fb       	bst	r25, 7
    5334:	99 1f       	adc	r25, r25
    5336:	61 f0       	breq	.+24     	; 0x5350 <__fp_splitA+0x20>
    5338:	9f 3f       	cpi	r25, 0xFF	; 255
    533a:	79 f0       	breq	.+30     	; 0x535a <__fp_splitA+0x2a>
    533c:	87 95       	ror	r24
    533e:	08 95       	ret
    5340:	12 16       	cp	r1, r18
    5342:	13 06       	cpc	r1, r19
    5344:	14 06       	cpc	r1, r20
    5346:	55 1f       	adc	r21, r21
    5348:	f2 cf       	rjmp	.-28     	; 0x532e <__fp_split3+0xe>
    534a:	46 95       	lsr	r20
    534c:	f1 df       	rcall	.-30     	; 0x5330 <__fp_splitA>
    534e:	08 c0       	rjmp	.+16     	; 0x5360 <__fp_splitA+0x30>
    5350:	16 16       	cp	r1, r22
    5352:	17 06       	cpc	r1, r23
    5354:	18 06       	cpc	r1, r24
    5356:	99 1f       	adc	r25, r25
    5358:	f1 cf       	rjmp	.-30     	; 0x533c <__fp_splitA+0xc>
    535a:	86 95       	lsr	r24
    535c:	71 05       	cpc	r23, r1
    535e:	61 05       	cpc	r22, r1
    5360:	08 94       	sec
    5362:	08 95       	ret

00005364 <__fp_zero>:
    5364:	e8 94       	clt

00005366 <__fp_szero>:
    5366:	bb 27       	eor	r27, r27
    5368:	66 27       	eor	r22, r22
    536a:	77 27       	eor	r23, r23
    536c:	cb 01       	movw	r24, r22
    536e:	97 f9       	bld	r25, 7
    5370:	08 95       	ret

00005372 <__gesf2>:
    5372:	54 df       	rcall	.-344    	; 0x521c <__fp_cmp>
    5374:	08 f4       	brcc	.+2      	; 0x5378 <__gesf2+0x6>
    5376:	8f ef       	ldi	r24, 0xFF	; 255
    5378:	08 95       	ret

0000537a <inverse>:
    537a:	9b 01       	movw	r18, r22
    537c:	ac 01       	movw	r20, r24
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	70 e0       	ldi	r23, 0x00	; 0
    5382:	80 e8       	ldi	r24, 0x80	; 128
    5384:	9f e3       	ldi	r25, 0x3F	; 63
    5386:	59 ce       	rjmp	.-846    	; 0x503a <__divsf3>

00005388 <__mulsf3>:
    5388:	0b d0       	rcall	.+22     	; 0x53a0 <__mulsf3x>
    538a:	b9 cf       	rjmp	.-142    	; 0x52fe <__fp_round>
    538c:	aa df       	rcall	.-172    	; 0x52e2 <__fp_pscA>
    538e:	28 f0       	brcs	.+10     	; 0x539a <__mulsf3+0x12>
    5390:	af df       	rcall	.-162    	; 0x52f0 <__fp_pscB>
    5392:	18 f0       	brcs	.+6      	; 0x539a <__mulsf3+0x12>
    5394:	95 23       	and	r25, r21
    5396:	09 f0       	breq	.+2      	; 0x539a <__mulsf3+0x12>
    5398:	65 cf       	rjmp	.-310    	; 0x5264 <__fp_inf>
    539a:	6a cf       	rjmp	.-300    	; 0x5270 <__fp_nan>
    539c:	11 24       	eor	r1, r1
    539e:	e3 cf       	rjmp	.-58     	; 0x5366 <__fp_szero>

000053a0 <__mulsf3x>:
    53a0:	bf df       	rcall	.-130    	; 0x5320 <__fp_split3>
    53a2:	a0 f3       	brcs	.-24     	; 0x538c <__mulsf3+0x4>

000053a4 <__mulsf3_pse>:
    53a4:	95 9f       	mul	r25, r21
    53a6:	d1 f3       	breq	.-12     	; 0x539c <__mulsf3+0x14>
    53a8:	95 0f       	add	r25, r21
    53aa:	50 e0       	ldi	r21, 0x00	; 0
    53ac:	55 1f       	adc	r21, r21
    53ae:	62 9f       	mul	r22, r18
    53b0:	f0 01       	movw	r30, r0
    53b2:	72 9f       	mul	r23, r18
    53b4:	bb 27       	eor	r27, r27
    53b6:	f0 0d       	add	r31, r0
    53b8:	b1 1d       	adc	r27, r1
    53ba:	63 9f       	mul	r22, r19
    53bc:	aa 27       	eor	r26, r26
    53be:	f0 0d       	add	r31, r0
    53c0:	b1 1d       	adc	r27, r1
    53c2:	aa 1f       	adc	r26, r26
    53c4:	64 9f       	mul	r22, r20
    53c6:	66 27       	eor	r22, r22
    53c8:	b0 0d       	add	r27, r0
    53ca:	a1 1d       	adc	r26, r1
    53cc:	66 1f       	adc	r22, r22
    53ce:	82 9f       	mul	r24, r18
    53d0:	22 27       	eor	r18, r18
    53d2:	b0 0d       	add	r27, r0
    53d4:	a1 1d       	adc	r26, r1
    53d6:	62 1f       	adc	r22, r18
    53d8:	73 9f       	mul	r23, r19
    53da:	b0 0d       	add	r27, r0
    53dc:	a1 1d       	adc	r26, r1
    53de:	62 1f       	adc	r22, r18
    53e0:	83 9f       	mul	r24, r19
    53e2:	a0 0d       	add	r26, r0
    53e4:	61 1d       	adc	r22, r1
    53e6:	22 1f       	adc	r18, r18
    53e8:	74 9f       	mul	r23, r20
    53ea:	33 27       	eor	r19, r19
    53ec:	a0 0d       	add	r26, r0
    53ee:	61 1d       	adc	r22, r1
    53f0:	23 1f       	adc	r18, r19
    53f2:	84 9f       	mul	r24, r20
    53f4:	60 0d       	add	r22, r0
    53f6:	21 1d       	adc	r18, r1
    53f8:	82 2f       	mov	r24, r18
    53fa:	76 2f       	mov	r23, r22
    53fc:	6a 2f       	mov	r22, r26
    53fe:	11 24       	eor	r1, r1
    5400:	9f 57       	subi	r25, 0x7F	; 127
    5402:	50 40       	sbci	r21, 0x00	; 0
    5404:	8a f0       	brmi	.+34     	; 0x5428 <__mulsf3_pse+0x84>
    5406:	e1 f0       	breq	.+56     	; 0x5440 <__mulsf3_pse+0x9c>
    5408:	88 23       	and	r24, r24
    540a:	4a f0       	brmi	.+18     	; 0x541e <__mulsf3_pse+0x7a>
    540c:	ee 0f       	add	r30, r30
    540e:	ff 1f       	adc	r31, r31
    5410:	bb 1f       	adc	r27, r27
    5412:	66 1f       	adc	r22, r22
    5414:	77 1f       	adc	r23, r23
    5416:	88 1f       	adc	r24, r24
    5418:	91 50       	subi	r25, 0x01	; 1
    541a:	50 40       	sbci	r21, 0x00	; 0
    541c:	a9 f7       	brne	.-22     	; 0x5408 <__mulsf3_pse+0x64>
    541e:	9e 3f       	cpi	r25, 0xFE	; 254
    5420:	51 05       	cpc	r21, r1
    5422:	70 f0       	brcs	.+28     	; 0x5440 <__mulsf3_pse+0x9c>
    5424:	1f cf       	rjmp	.-450    	; 0x5264 <__fp_inf>
    5426:	9f cf       	rjmp	.-194    	; 0x5366 <__fp_szero>
    5428:	5f 3f       	cpi	r21, 0xFF	; 255
    542a:	ec f3       	brlt	.-6      	; 0x5426 <__mulsf3_pse+0x82>
    542c:	98 3e       	cpi	r25, 0xE8	; 232
    542e:	dc f3       	brlt	.-10     	; 0x5426 <__mulsf3_pse+0x82>
    5430:	86 95       	lsr	r24
    5432:	77 95       	ror	r23
    5434:	67 95       	ror	r22
    5436:	b7 95       	ror	r27
    5438:	f7 95       	ror	r31
    543a:	e7 95       	ror	r30
    543c:	9f 5f       	subi	r25, 0xFF	; 255
    543e:	c1 f7       	brne	.-16     	; 0x5430 <__mulsf3_pse+0x8c>
    5440:	fe 2b       	or	r31, r30
    5442:	88 0f       	add	r24, r24
    5444:	91 1d       	adc	r25, r1
    5446:	96 95       	lsr	r25
    5448:	87 95       	ror	r24
    544a:	97 f9       	bld	r25, 7
    544c:	08 95       	ret
    544e:	11 f4       	brne	.+4      	; 0x5454 <__mulsf3_pse+0xb0>
    5450:	0e f4       	brtc	.+2      	; 0x5454 <__mulsf3_pse+0xb0>
    5452:	0e cf       	rjmp	.-484    	; 0x5270 <__fp_nan>
    5454:	41 c0       	rjmp	.+130    	; 0x54d8 <__fp_mpack>

00005456 <sqrt>:
    5456:	6c df       	rcall	.-296    	; 0x5330 <__fp_splitA>
    5458:	d0 f3       	brcs	.-12     	; 0x544e <__mulsf3_pse+0xaa>
    545a:	99 23       	and	r25, r25
    545c:	d9 f3       	breq	.-10     	; 0x5454 <__mulsf3_pse+0xb0>
    545e:	ce f3       	brts	.-14     	; 0x5452 <__mulsf3_pse+0xae>
    5460:	9f 57       	subi	r25, 0x7F	; 127
    5462:	55 0b       	sbc	r21, r21
    5464:	87 ff       	sbrs	r24, 7
    5466:	46 d0       	rcall	.+140    	; 0x54f4 <__fp_norm2>
    5468:	00 24       	eor	r0, r0
    546a:	a0 e6       	ldi	r26, 0x60	; 96
    546c:	40 ea       	ldi	r20, 0xA0	; 160
    546e:	90 01       	movw	r18, r0
    5470:	80 58       	subi	r24, 0x80	; 128
    5472:	56 95       	lsr	r21
    5474:	97 95       	ror	r25
    5476:	28 f4       	brcc	.+10     	; 0x5482 <sqrt+0x2c>
    5478:	80 5c       	subi	r24, 0xC0	; 192
    547a:	66 0f       	add	r22, r22
    547c:	77 1f       	adc	r23, r23
    547e:	88 1f       	adc	r24, r24
    5480:	20 f0       	brcs	.+8      	; 0x548a <sqrt+0x34>
    5482:	26 17       	cp	r18, r22
    5484:	37 07       	cpc	r19, r23
    5486:	48 07       	cpc	r20, r24
    5488:	30 f4       	brcc	.+12     	; 0x5496 <sqrt+0x40>
    548a:	62 1b       	sub	r22, r18
    548c:	73 0b       	sbc	r23, r19
    548e:	84 0b       	sbc	r24, r20
    5490:	20 29       	or	r18, r0
    5492:	31 29       	or	r19, r1
    5494:	4a 2b       	or	r20, r26
    5496:	a6 95       	lsr	r26
    5498:	17 94       	ror	r1
    549a:	07 94       	ror	r0
    549c:	20 25       	eor	r18, r0
    549e:	31 25       	eor	r19, r1
    54a0:	4a 27       	eor	r20, r26
    54a2:	58 f7       	brcc	.-42     	; 0x547a <sqrt+0x24>
    54a4:	66 0f       	add	r22, r22
    54a6:	77 1f       	adc	r23, r23
    54a8:	88 1f       	adc	r24, r24
    54aa:	20 f0       	brcs	.+8      	; 0x54b4 <sqrt+0x5e>
    54ac:	26 17       	cp	r18, r22
    54ae:	37 07       	cpc	r19, r23
    54b0:	48 07       	cpc	r20, r24
    54b2:	30 f4       	brcc	.+12     	; 0x54c0 <sqrt+0x6a>
    54b4:	62 0b       	sbc	r22, r18
    54b6:	73 0b       	sbc	r23, r19
    54b8:	84 0b       	sbc	r24, r20
    54ba:	20 0d       	add	r18, r0
    54bc:	31 1d       	adc	r19, r1
    54be:	41 1d       	adc	r20, r1
    54c0:	a0 95       	com	r26
    54c2:	81 f7       	brne	.-32     	; 0x54a4 <sqrt+0x4e>
    54c4:	b9 01       	movw	r22, r18
    54c6:	84 2f       	mov	r24, r20
    54c8:	91 58       	subi	r25, 0x81	; 129
    54ca:	88 0f       	add	r24, r24
    54cc:	96 95       	lsr	r25
    54ce:	87 95       	ror	r24
    54d0:	08 95       	ret

000054d2 <square>:
    54d2:	9b 01       	movw	r18, r22
    54d4:	ac 01       	movw	r20, r24
    54d6:	58 cf       	rjmp	.-336    	; 0x5388 <__mulsf3>

000054d8 <__fp_mpack>:
    54d8:	9f 3f       	cpi	r25, 0xFF	; 255
    54da:	31 f0       	breq	.+12     	; 0x54e8 <__fp_mpack_finite+0xc>

000054dc <__fp_mpack_finite>:
    54dc:	91 50       	subi	r25, 0x01	; 1
    54de:	20 f4       	brcc	.+8      	; 0x54e8 <__fp_mpack_finite+0xc>
    54e0:	87 95       	ror	r24
    54e2:	77 95       	ror	r23
    54e4:	67 95       	ror	r22
    54e6:	b7 95       	ror	r27
    54e8:	88 0f       	add	r24, r24
    54ea:	91 1d       	adc	r25, r1
    54ec:	96 95       	lsr	r25
    54ee:	87 95       	ror	r24
    54f0:	97 f9       	bld	r25, 7
    54f2:	08 95       	ret

000054f4 <__fp_norm2>:
    54f4:	91 50       	subi	r25, 0x01	; 1
    54f6:	50 40       	sbci	r21, 0x00	; 0
    54f8:	66 0f       	add	r22, r22
    54fa:	77 1f       	adc	r23, r23
    54fc:	88 1f       	adc	r24, r24
    54fe:	d2 f7       	brpl	.-12     	; 0x54f4 <__fp_norm2>
    5500:	08 95       	ret

00005502 <__udivmodhi4>:
    5502:	aa 1b       	sub	r26, r26
    5504:	bb 1b       	sub	r27, r27
    5506:	51 e1       	ldi	r21, 0x11	; 17
    5508:	07 c0       	rjmp	.+14     	; 0x5518 <__udivmodhi4_ep>

0000550a <__udivmodhi4_loop>:
    550a:	aa 1f       	adc	r26, r26
    550c:	bb 1f       	adc	r27, r27
    550e:	a6 17       	cp	r26, r22
    5510:	b7 07       	cpc	r27, r23
    5512:	10 f0       	brcs	.+4      	; 0x5518 <__udivmodhi4_ep>
    5514:	a6 1b       	sub	r26, r22
    5516:	b7 0b       	sbc	r27, r23

00005518 <__udivmodhi4_ep>:
    5518:	88 1f       	adc	r24, r24
    551a:	99 1f       	adc	r25, r25
    551c:	5a 95       	dec	r21
    551e:	a9 f7       	brne	.-22     	; 0x550a <__udivmodhi4_loop>
    5520:	80 95       	com	r24
    5522:	90 95       	com	r25
    5524:	bc 01       	movw	r22, r24
    5526:	cd 01       	movw	r24, r26
    5528:	08 95       	ret

0000552a <__udivmodsi4>:
    552a:	a1 e2       	ldi	r26, 0x21	; 33
    552c:	1a 2e       	mov	r1, r26
    552e:	aa 1b       	sub	r26, r26
    5530:	bb 1b       	sub	r27, r27
    5532:	fd 01       	movw	r30, r26
    5534:	0d c0       	rjmp	.+26     	; 0x5550 <__udivmodsi4_ep>

00005536 <__udivmodsi4_loop>:
    5536:	aa 1f       	adc	r26, r26
    5538:	bb 1f       	adc	r27, r27
    553a:	ee 1f       	adc	r30, r30
    553c:	ff 1f       	adc	r31, r31
    553e:	a2 17       	cp	r26, r18
    5540:	b3 07       	cpc	r27, r19
    5542:	e4 07       	cpc	r30, r20
    5544:	f5 07       	cpc	r31, r21
    5546:	20 f0       	brcs	.+8      	; 0x5550 <__udivmodsi4_ep>
    5548:	a2 1b       	sub	r26, r18
    554a:	b3 0b       	sbc	r27, r19
    554c:	e4 0b       	sbc	r30, r20
    554e:	f5 0b       	sbc	r31, r21

00005550 <__udivmodsi4_ep>:
    5550:	66 1f       	adc	r22, r22
    5552:	77 1f       	adc	r23, r23
    5554:	88 1f       	adc	r24, r24
    5556:	99 1f       	adc	r25, r25
    5558:	1a 94       	dec	r1
    555a:	69 f7       	brne	.-38     	; 0x5536 <__udivmodsi4_loop>
    555c:	60 95       	com	r22
    555e:	70 95       	com	r23
    5560:	80 95       	com	r24
    5562:	90 95       	com	r25
    5564:	9b 01       	movw	r18, r22
    5566:	ac 01       	movw	r20, r24
    5568:	bd 01       	movw	r22, r26
    556a:	cf 01       	movw	r24, r30
    556c:	08 95       	ret

0000556e <fdevopen>:
    556e:	0f 93       	push	r16
    5570:	1f 93       	push	r17
    5572:	cf 93       	push	r28
    5574:	df 93       	push	r29
    5576:	00 97       	sbiw	r24, 0x00	; 0
    5578:	31 f4       	brne	.+12     	; 0x5586 <fdevopen+0x18>
    557a:	61 15       	cp	r22, r1
    557c:	71 05       	cpc	r23, r1
    557e:	19 f4       	brne	.+6      	; 0x5586 <fdevopen+0x18>
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	39 c0       	rjmp	.+114    	; 0x55f8 <fdevopen+0x8a>
    5586:	8b 01       	movw	r16, r22
    5588:	ec 01       	movw	r28, r24
    558a:	6e e0       	ldi	r22, 0x0E	; 14
    558c:	70 e0       	ldi	r23, 0x00	; 0
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	51 d2       	rcall	.+1186   	; 0x5a36 <calloc>
    5594:	fc 01       	movw	r30, r24
    5596:	89 2b       	or	r24, r25
    5598:	99 f3       	breq	.-26     	; 0x5580 <fdevopen+0x12>
    559a:	80 e8       	ldi	r24, 0x80	; 128
    559c:	83 83       	std	Z+3, r24	; 0x03
    559e:	01 15       	cp	r16, r1
    55a0:	11 05       	cpc	r17, r1
    55a2:	71 f0       	breq	.+28     	; 0x55c0 <fdevopen+0x52>
    55a4:	02 87       	std	Z+10, r16	; 0x0a
    55a6:	13 87       	std	Z+11, r17	; 0x0b
    55a8:	81 e8       	ldi	r24, 0x81	; 129
    55aa:	83 83       	std	Z+3, r24	; 0x03
    55ac:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <__iob>
    55b0:	90 91 ab 2c 	lds	r25, 0x2CAB	; 0x802cab <__iob+0x1>
    55b4:	89 2b       	or	r24, r25
    55b6:	21 f4       	brne	.+8      	; 0x55c0 <fdevopen+0x52>
    55b8:	e0 93 aa 2c 	sts	0x2CAA, r30	; 0x802caa <__iob>
    55bc:	f0 93 ab 2c 	sts	0x2CAB, r31	; 0x802cab <__iob+0x1>
    55c0:	20 97       	sbiw	r28, 0x00	; 0
    55c2:	c9 f0       	breq	.+50     	; 0x55f6 <fdevopen+0x88>
    55c4:	c0 87       	std	Z+8, r28	; 0x08
    55c6:	d1 87       	std	Z+9, r29	; 0x09
    55c8:	83 81       	ldd	r24, Z+3	; 0x03
    55ca:	82 60       	ori	r24, 0x02	; 2
    55cc:	83 83       	std	Z+3, r24	; 0x03
    55ce:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <__iob+0x2>
    55d2:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <__iob+0x3>
    55d6:	89 2b       	or	r24, r25
    55d8:	71 f4       	brne	.+28     	; 0x55f6 <fdevopen+0x88>
    55da:	e0 93 ac 2c 	sts	0x2CAC, r30	; 0x802cac <__iob+0x2>
    55de:	f0 93 ad 2c 	sts	0x2CAD, r31	; 0x802cad <__iob+0x3>
    55e2:	80 91 ae 2c 	lds	r24, 0x2CAE	; 0x802cae <__iob+0x4>
    55e6:	90 91 af 2c 	lds	r25, 0x2CAF	; 0x802caf <__iob+0x5>
    55ea:	89 2b       	or	r24, r25
    55ec:	21 f4       	brne	.+8      	; 0x55f6 <fdevopen+0x88>
    55ee:	e0 93 ae 2c 	sts	0x2CAE, r30	; 0x802cae <__iob+0x4>
    55f2:	f0 93 af 2c 	sts	0x2CAF, r31	; 0x802caf <__iob+0x5>
    55f6:	cf 01       	movw	r24, r30
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	1f 91       	pop	r17
    55fe:	0f 91       	pop	r16
    5600:	08 95       	ret

00005602 <printf>:
    5602:	a0 e0       	ldi	r26, 0x00	; 0
    5604:	b0 e0       	ldi	r27, 0x00	; 0
    5606:	e6 e0       	ldi	r30, 0x06	; 6
    5608:	fb e2       	ldi	r31, 0x2B	; 43
    560a:	17 c4       	rjmp	.+2094   	; 0x5e3a <__prologue_saves__+0x20>
    560c:	ae 01       	movw	r20, r28
    560e:	4b 5f       	subi	r20, 0xFB	; 251
    5610:	5f 4f       	sbci	r21, 0xFF	; 255
    5612:	fa 01       	movw	r30, r20
    5614:	61 91       	ld	r22, Z+
    5616:	71 91       	ld	r23, Z+
    5618:	af 01       	movw	r20, r30
    561a:	80 91 ac 2c 	lds	r24, 0x2CAC	; 0x802cac <__iob+0x2>
    561e:	90 91 ad 2c 	lds	r25, 0x2CAD	; 0x802cad <__iob+0x3>
    5622:	37 d0       	rcall	.+110    	; 0x5692 <vfprintf>
    5624:	e2 e0       	ldi	r30, 0x02	; 2
    5626:	22 c4       	rjmp	.+2116   	; 0x5e6c <__epilogue_restores__+0x20>

00005628 <putchar>:
    5628:	60 91 ac 2c 	lds	r22, 0x2CAC	; 0x802cac <__iob+0x2>
    562c:	70 91 ad 2c 	lds	r23, 0x2CAD	; 0x802cad <__iob+0x3>
    5630:	5a c3       	rjmp	.+1716   	; 0x5ce6 <fputc>

00005632 <puts>:
    5632:	0f 93       	push	r16
    5634:	1f 93       	push	r17
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	e0 91 ac 2c 	lds	r30, 0x2CAC	; 0x802cac <__iob+0x2>
    563e:	f0 91 ad 2c 	lds	r31, 0x2CAD	; 0x802cad <__iob+0x3>
    5642:	23 81       	ldd	r18, Z+3	; 0x03
    5644:	21 ff       	sbrs	r18, 1
    5646:	1b c0       	rjmp	.+54     	; 0x567e <puts+0x4c>
    5648:	8c 01       	movw	r16, r24
    564a:	d0 e0       	ldi	r29, 0x00	; 0
    564c:	c0 e0       	ldi	r28, 0x00	; 0
    564e:	f8 01       	movw	r30, r16
    5650:	81 91       	ld	r24, Z+
    5652:	8f 01       	movw	r16, r30
    5654:	60 91 ac 2c 	lds	r22, 0x2CAC	; 0x802cac <__iob+0x2>
    5658:	70 91 ad 2c 	lds	r23, 0x2CAD	; 0x802cad <__iob+0x3>
    565c:	db 01       	movw	r26, r22
    565e:	18 96       	adiw	r26, 0x08	; 8
    5660:	ed 91       	ld	r30, X+
    5662:	fc 91       	ld	r31, X
    5664:	19 97       	sbiw	r26, 0x09	; 9
    5666:	88 23       	and	r24, r24
    5668:	31 f0       	breq	.+12     	; 0x5676 <puts+0x44>
    566a:	09 95       	icall
    566c:	89 2b       	or	r24, r25
    566e:	79 f3       	breq	.-34     	; 0x564e <puts+0x1c>
    5670:	df ef       	ldi	r29, 0xFF	; 255
    5672:	cf ef       	ldi	r28, 0xFF	; 255
    5674:	ec cf       	rjmp	.-40     	; 0x564e <puts+0x1c>
    5676:	8a e0       	ldi	r24, 0x0A	; 10
    5678:	09 95       	icall
    567a:	89 2b       	or	r24, r25
    567c:	19 f0       	breq	.+6      	; 0x5684 <puts+0x52>
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	9f ef       	ldi	r25, 0xFF	; 255
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <puts+0x56>
    5684:	8d 2f       	mov	r24, r29
    5686:	9c 2f       	mov	r25, r28
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	1f 91       	pop	r17
    568e:	0f 91       	pop	r16
    5690:	08 95       	ret

00005692 <vfprintf>:
    5692:	ab e0       	ldi	r26, 0x0B	; 11
    5694:	b0 e0       	ldi	r27, 0x00	; 0
    5696:	ee e4       	ldi	r30, 0x4E	; 78
    5698:	fb e2       	ldi	r31, 0x2B	; 43
    569a:	bf c3       	rjmp	.+1918   	; 0x5e1a <__prologue_saves__>
    569c:	6c 01       	movw	r12, r24
    569e:	7b 01       	movw	r14, r22
    56a0:	8a 01       	movw	r16, r20
    56a2:	fc 01       	movw	r30, r24
    56a4:	16 82       	std	Z+6, r1	; 0x06
    56a6:	17 82       	std	Z+7, r1	; 0x07
    56a8:	83 81       	ldd	r24, Z+3	; 0x03
    56aa:	81 ff       	sbrs	r24, 1
    56ac:	bf c1       	rjmp	.+894    	; 0x5a2c <vfprintf+0x39a>
    56ae:	ce 01       	movw	r24, r28
    56b0:	01 96       	adiw	r24, 0x01	; 1
    56b2:	3c 01       	movw	r6, r24
    56b4:	f6 01       	movw	r30, r12
    56b6:	93 81       	ldd	r25, Z+3	; 0x03
    56b8:	f7 01       	movw	r30, r14
    56ba:	93 fd       	sbrc	r25, 3
    56bc:	85 91       	lpm	r24, Z+
    56be:	93 ff       	sbrs	r25, 3
    56c0:	81 91       	ld	r24, Z+
    56c2:	7f 01       	movw	r14, r30
    56c4:	88 23       	and	r24, r24
    56c6:	09 f4       	brne	.+2      	; 0x56ca <vfprintf+0x38>
    56c8:	ad c1       	rjmp	.+858    	; 0x5a24 <vfprintf+0x392>
    56ca:	85 32       	cpi	r24, 0x25	; 37
    56cc:	39 f4       	brne	.+14     	; 0x56dc <vfprintf+0x4a>
    56ce:	93 fd       	sbrc	r25, 3
    56d0:	85 91       	lpm	r24, Z+
    56d2:	93 ff       	sbrs	r25, 3
    56d4:	81 91       	ld	r24, Z+
    56d6:	7f 01       	movw	r14, r30
    56d8:	85 32       	cpi	r24, 0x25	; 37
    56da:	21 f4       	brne	.+8      	; 0x56e4 <vfprintf+0x52>
    56dc:	b6 01       	movw	r22, r12
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	02 d3       	rcall	.+1540   	; 0x5ce6 <fputc>
    56e2:	e8 cf       	rjmp	.-48     	; 0x56b4 <vfprintf+0x22>
    56e4:	91 2c       	mov	r9, r1
    56e6:	21 2c       	mov	r2, r1
    56e8:	31 2c       	mov	r3, r1
    56ea:	ff e1       	ldi	r31, 0x1F	; 31
    56ec:	f3 15       	cp	r31, r3
    56ee:	d8 f0       	brcs	.+54     	; 0x5726 <vfprintf+0x94>
    56f0:	8b 32       	cpi	r24, 0x2B	; 43
    56f2:	79 f0       	breq	.+30     	; 0x5712 <vfprintf+0x80>
    56f4:	38 f4       	brcc	.+14     	; 0x5704 <vfprintf+0x72>
    56f6:	80 32       	cpi	r24, 0x20	; 32
    56f8:	79 f0       	breq	.+30     	; 0x5718 <vfprintf+0x86>
    56fa:	83 32       	cpi	r24, 0x23	; 35
    56fc:	a1 f4       	brne	.+40     	; 0x5726 <vfprintf+0x94>
    56fe:	23 2d       	mov	r18, r3
    5700:	20 61       	ori	r18, 0x10	; 16
    5702:	1d c0       	rjmp	.+58     	; 0x573e <vfprintf+0xac>
    5704:	8d 32       	cpi	r24, 0x2D	; 45
    5706:	61 f0       	breq	.+24     	; 0x5720 <vfprintf+0x8e>
    5708:	80 33       	cpi	r24, 0x30	; 48
    570a:	69 f4       	brne	.+26     	; 0x5726 <vfprintf+0x94>
    570c:	23 2d       	mov	r18, r3
    570e:	21 60       	ori	r18, 0x01	; 1
    5710:	16 c0       	rjmp	.+44     	; 0x573e <vfprintf+0xac>
    5712:	83 2d       	mov	r24, r3
    5714:	82 60       	ori	r24, 0x02	; 2
    5716:	38 2e       	mov	r3, r24
    5718:	e3 2d       	mov	r30, r3
    571a:	e4 60       	ori	r30, 0x04	; 4
    571c:	3e 2e       	mov	r3, r30
    571e:	2a c0       	rjmp	.+84     	; 0x5774 <vfprintf+0xe2>
    5720:	f3 2d       	mov	r31, r3
    5722:	f8 60       	ori	r31, 0x08	; 8
    5724:	1d c0       	rjmp	.+58     	; 0x5760 <vfprintf+0xce>
    5726:	37 fc       	sbrc	r3, 7
    5728:	2d c0       	rjmp	.+90     	; 0x5784 <vfprintf+0xf2>
    572a:	20 ed       	ldi	r18, 0xD0	; 208
    572c:	28 0f       	add	r18, r24
    572e:	2a 30       	cpi	r18, 0x0A	; 10
    5730:	40 f0       	brcs	.+16     	; 0x5742 <vfprintf+0xb0>
    5732:	8e 32       	cpi	r24, 0x2E	; 46
    5734:	b9 f4       	brne	.+46     	; 0x5764 <vfprintf+0xd2>
    5736:	36 fc       	sbrc	r3, 6
    5738:	75 c1       	rjmp	.+746    	; 0x5a24 <vfprintf+0x392>
    573a:	23 2d       	mov	r18, r3
    573c:	20 64       	ori	r18, 0x40	; 64
    573e:	32 2e       	mov	r3, r18
    5740:	19 c0       	rjmp	.+50     	; 0x5774 <vfprintf+0xe2>
    5742:	36 fe       	sbrs	r3, 6
    5744:	06 c0       	rjmp	.+12     	; 0x5752 <vfprintf+0xc0>
    5746:	8a e0       	ldi	r24, 0x0A	; 10
    5748:	98 9e       	mul	r9, r24
    574a:	20 0d       	add	r18, r0
    574c:	11 24       	eor	r1, r1
    574e:	92 2e       	mov	r9, r18
    5750:	11 c0       	rjmp	.+34     	; 0x5774 <vfprintf+0xe2>
    5752:	ea e0       	ldi	r30, 0x0A	; 10
    5754:	2e 9e       	mul	r2, r30
    5756:	20 0d       	add	r18, r0
    5758:	11 24       	eor	r1, r1
    575a:	22 2e       	mov	r2, r18
    575c:	f3 2d       	mov	r31, r3
    575e:	f0 62       	ori	r31, 0x20	; 32
    5760:	3f 2e       	mov	r3, r31
    5762:	08 c0       	rjmp	.+16     	; 0x5774 <vfprintf+0xe2>
    5764:	8c 36       	cpi	r24, 0x6C	; 108
    5766:	21 f4       	brne	.+8      	; 0x5770 <vfprintf+0xde>
    5768:	83 2d       	mov	r24, r3
    576a:	80 68       	ori	r24, 0x80	; 128
    576c:	38 2e       	mov	r3, r24
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <vfprintf+0xe2>
    5770:	88 36       	cpi	r24, 0x68	; 104
    5772:	41 f4       	brne	.+16     	; 0x5784 <vfprintf+0xf2>
    5774:	f7 01       	movw	r30, r14
    5776:	93 fd       	sbrc	r25, 3
    5778:	85 91       	lpm	r24, Z+
    577a:	93 ff       	sbrs	r25, 3
    577c:	81 91       	ld	r24, Z+
    577e:	7f 01       	movw	r14, r30
    5780:	81 11       	cpse	r24, r1
    5782:	b3 cf       	rjmp	.-154    	; 0x56ea <vfprintf+0x58>
    5784:	98 2f       	mov	r25, r24
    5786:	9f 7d       	andi	r25, 0xDF	; 223
    5788:	95 54       	subi	r25, 0x45	; 69
    578a:	93 30       	cpi	r25, 0x03	; 3
    578c:	28 f4       	brcc	.+10     	; 0x5798 <vfprintf+0x106>
    578e:	0c 5f       	subi	r16, 0xFC	; 252
    5790:	1f 4f       	sbci	r17, 0xFF	; 255
    5792:	9f e3       	ldi	r25, 0x3F	; 63
    5794:	99 83       	std	Y+1, r25	; 0x01
    5796:	0d c0       	rjmp	.+26     	; 0x57b2 <vfprintf+0x120>
    5798:	83 36       	cpi	r24, 0x63	; 99
    579a:	31 f0       	breq	.+12     	; 0x57a8 <vfprintf+0x116>
    579c:	83 37       	cpi	r24, 0x73	; 115
    579e:	71 f0       	breq	.+28     	; 0x57bc <vfprintf+0x12a>
    57a0:	83 35       	cpi	r24, 0x53	; 83
    57a2:	09 f0       	breq	.+2      	; 0x57a6 <vfprintf+0x114>
    57a4:	55 c0       	rjmp	.+170    	; 0x5850 <vfprintf+0x1be>
    57a6:	20 c0       	rjmp	.+64     	; 0x57e8 <vfprintf+0x156>
    57a8:	f8 01       	movw	r30, r16
    57aa:	80 81       	ld	r24, Z
    57ac:	89 83       	std	Y+1, r24	; 0x01
    57ae:	0e 5f       	subi	r16, 0xFE	; 254
    57b0:	1f 4f       	sbci	r17, 0xFF	; 255
    57b2:	88 24       	eor	r8, r8
    57b4:	83 94       	inc	r8
    57b6:	91 2c       	mov	r9, r1
    57b8:	53 01       	movw	r10, r6
    57ba:	12 c0       	rjmp	.+36     	; 0x57e0 <vfprintf+0x14e>
    57bc:	28 01       	movw	r4, r16
    57be:	f2 e0       	ldi	r31, 0x02	; 2
    57c0:	4f 0e       	add	r4, r31
    57c2:	51 1c       	adc	r5, r1
    57c4:	f8 01       	movw	r30, r16
    57c6:	a0 80       	ld	r10, Z
    57c8:	b1 80       	ldd	r11, Z+1	; 0x01
    57ca:	36 fe       	sbrs	r3, 6
    57cc:	03 c0       	rjmp	.+6      	; 0x57d4 <vfprintf+0x142>
    57ce:	69 2d       	mov	r22, r9
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	02 c0       	rjmp	.+4      	; 0x57d8 <vfprintf+0x146>
    57d4:	6f ef       	ldi	r22, 0xFF	; 255
    57d6:	7f ef       	ldi	r23, 0xFF	; 255
    57d8:	c5 01       	movw	r24, r10
    57da:	7a d2       	rcall	.+1268   	; 0x5cd0 <strnlen>
    57dc:	4c 01       	movw	r8, r24
    57de:	82 01       	movw	r16, r4
    57e0:	f3 2d       	mov	r31, r3
    57e2:	ff 77       	andi	r31, 0x7F	; 127
    57e4:	3f 2e       	mov	r3, r31
    57e6:	15 c0       	rjmp	.+42     	; 0x5812 <vfprintf+0x180>
    57e8:	28 01       	movw	r4, r16
    57ea:	22 e0       	ldi	r18, 0x02	; 2
    57ec:	42 0e       	add	r4, r18
    57ee:	51 1c       	adc	r5, r1
    57f0:	f8 01       	movw	r30, r16
    57f2:	a0 80       	ld	r10, Z
    57f4:	b1 80       	ldd	r11, Z+1	; 0x01
    57f6:	36 fe       	sbrs	r3, 6
    57f8:	03 c0       	rjmp	.+6      	; 0x5800 <vfprintf+0x16e>
    57fa:	69 2d       	mov	r22, r9
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	02 c0       	rjmp	.+4      	; 0x5804 <vfprintf+0x172>
    5800:	6f ef       	ldi	r22, 0xFF	; 255
    5802:	7f ef       	ldi	r23, 0xFF	; 255
    5804:	c5 01       	movw	r24, r10
    5806:	52 d2       	rcall	.+1188   	; 0x5cac <strnlen_P>
    5808:	4c 01       	movw	r8, r24
    580a:	f3 2d       	mov	r31, r3
    580c:	f0 68       	ori	r31, 0x80	; 128
    580e:	3f 2e       	mov	r3, r31
    5810:	82 01       	movw	r16, r4
    5812:	33 fc       	sbrc	r3, 3
    5814:	19 c0       	rjmp	.+50     	; 0x5848 <vfprintf+0x1b6>
    5816:	82 2d       	mov	r24, r2
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	88 16       	cp	r8, r24
    581c:	99 06       	cpc	r9, r25
    581e:	a0 f4       	brcc	.+40     	; 0x5848 <vfprintf+0x1b6>
    5820:	b6 01       	movw	r22, r12
    5822:	80 e2       	ldi	r24, 0x20	; 32
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	5f d2       	rcall	.+1214   	; 0x5ce6 <fputc>
    5828:	2a 94       	dec	r2
    582a:	f5 cf       	rjmp	.-22     	; 0x5816 <vfprintf+0x184>
    582c:	f5 01       	movw	r30, r10
    582e:	37 fc       	sbrc	r3, 7
    5830:	85 91       	lpm	r24, Z+
    5832:	37 fe       	sbrs	r3, 7
    5834:	81 91       	ld	r24, Z+
    5836:	5f 01       	movw	r10, r30
    5838:	b6 01       	movw	r22, r12
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	54 d2       	rcall	.+1192   	; 0x5ce6 <fputc>
    583e:	21 10       	cpse	r2, r1
    5840:	2a 94       	dec	r2
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	82 1a       	sub	r8, r18
    5846:	91 08       	sbc	r9, r1
    5848:	81 14       	cp	r8, r1
    584a:	91 04       	cpc	r9, r1
    584c:	79 f7       	brne	.-34     	; 0x582c <vfprintf+0x19a>
    584e:	e1 c0       	rjmp	.+450    	; 0x5a12 <vfprintf+0x380>
    5850:	84 36       	cpi	r24, 0x64	; 100
    5852:	11 f0       	breq	.+4      	; 0x5858 <vfprintf+0x1c6>
    5854:	89 36       	cpi	r24, 0x69	; 105
    5856:	39 f5       	brne	.+78     	; 0x58a6 <vfprintf+0x214>
    5858:	f8 01       	movw	r30, r16
    585a:	37 fe       	sbrs	r3, 7
    585c:	07 c0       	rjmp	.+14     	; 0x586c <vfprintf+0x1da>
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	0c 5f       	subi	r16, 0xFC	; 252
    5868:	1f 4f       	sbci	r17, 0xFF	; 255
    586a:	08 c0       	rjmp	.+16     	; 0x587c <vfprintf+0x1ea>
    586c:	60 81       	ld	r22, Z
    586e:	71 81       	ldd	r23, Z+1	; 0x01
    5870:	07 2e       	mov	r0, r23
    5872:	00 0c       	add	r0, r0
    5874:	88 0b       	sbc	r24, r24
    5876:	99 0b       	sbc	r25, r25
    5878:	0e 5f       	subi	r16, 0xFE	; 254
    587a:	1f 4f       	sbci	r17, 0xFF	; 255
    587c:	f3 2d       	mov	r31, r3
    587e:	ff 76       	andi	r31, 0x6F	; 111
    5880:	3f 2e       	mov	r3, r31
    5882:	97 ff       	sbrs	r25, 7
    5884:	09 c0       	rjmp	.+18     	; 0x5898 <vfprintf+0x206>
    5886:	90 95       	com	r25
    5888:	80 95       	com	r24
    588a:	70 95       	com	r23
    588c:	61 95       	neg	r22
    588e:	7f 4f       	sbci	r23, 0xFF	; 255
    5890:	8f 4f       	sbci	r24, 0xFF	; 255
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
    5894:	f0 68       	ori	r31, 0x80	; 128
    5896:	3f 2e       	mov	r3, r31
    5898:	2a e0       	ldi	r18, 0x0A	; 10
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	a3 01       	movw	r20, r6
    589e:	5f d2       	rcall	.+1214   	; 0x5d5e <__ultoa_invert>
    58a0:	88 2e       	mov	r8, r24
    58a2:	86 18       	sub	r8, r6
    58a4:	44 c0       	rjmp	.+136    	; 0x592e <vfprintf+0x29c>
    58a6:	85 37       	cpi	r24, 0x75	; 117
    58a8:	31 f4       	brne	.+12     	; 0x58b6 <vfprintf+0x224>
    58aa:	23 2d       	mov	r18, r3
    58ac:	2f 7e       	andi	r18, 0xEF	; 239
    58ae:	b2 2e       	mov	r11, r18
    58b0:	2a e0       	ldi	r18, 0x0A	; 10
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	25 c0       	rjmp	.+74     	; 0x5900 <vfprintf+0x26e>
    58b6:	93 2d       	mov	r25, r3
    58b8:	99 7f       	andi	r25, 0xF9	; 249
    58ba:	b9 2e       	mov	r11, r25
    58bc:	8f 36       	cpi	r24, 0x6F	; 111
    58be:	c1 f0       	breq	.+48     	; 0x58f0 <vfprintf+0x25e>
    58c0:	18 f4       	brcc	.+6      	; 0x58c8 <vfprintf+0x236>
    58c2:	88 35       	cpi	r24, 0x58	; 88
    58c4:	79 f0       	breq	.+30     	; 0x58e4 <vfprintf+0x252>
    58c6:	ae c0       	rjmp	.+348    	; 0x5a24 <vfprintf+0x392>
    58c8:	80 37       	cpi	r24, 0x70	; 112
    58ca:	19 f0       	breq	.+6      	; 0x58d2 <vfprintf+0x240>
    58cc:	88 37       	cpi	r24, 0x78	; 120
    58ce:	21 f0       	breq	.+8      	; 0x58d8 <vfprintf+0x246>
    58d0:	a9 c0       	rjmp	.+338    	; 0x5a24 <vfprintf+0x392>
    58d2:	e9 2f       	mov	r30, r25
    58d4:	e0 61       	ori	r30, 0x10	; 16
    58d6:	be 2e       	mov	r11, r30
    58d8:	b4 fe       	sbrs	r11, 4
    58da:	0d c0       	rjmp	.+26     	; 0x58f6 <vfprintf+0x264>
    58dc:	fb 2d       	mov	r31, r11
    58de:	f4 60       	ori	r31, 0x04	; 4
    58e0:	bf 2e       	mov	r11, r31
    58e2:	09 c0       	rjmp	.+18     	; 0x58f6 <vfprintf+0x264>
    58e4:	34 fe       	sbrs	r3, 4
    58e6:	0a c0       	rjmp	.+20     	; 0x58fc <vfprintf+0x26a>
    58e8:	29 2f       	mov	r18, r25
    58ea:	26 60       	ori	r18, 0x06	; 6
    58ec:	b2 2e       	mov	r11, r18
    58ee:	06 c0       	rjmp	.+12     	; 0x58fc <vfprintf+0x26a>
    58f0:	28 e0       	ldi	r18, 0x08	; 8
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	05 c0       	rjmp	.+10     	; 0x5900 <vfprintf+0x26e>
    58f6:	20 e1       	ldi	r18, 0x10	; 16
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	02 c0       	rjmp	.+4      	; 0x5900 <vfprintf+0x26e>
    58fc:	20 e1       	ldi	r18, 0x10	; 16
    58fe:	32 e0       	ldi	r19, 0x02	; 2
    5900:	f8 01       	movw	r30, r16
    5902:	b7 fe       	sbrs	r11, 7
    5904:	07 c0       	rjmp	.+14     	; 0x5914 <vfprintf+0x282>
    5906:	60 81       	ld	r22, Z
    5908:	71 81       	ldd	r23, Z+1	; 0x01
    590a:	82 81       	ldd	r24, Z+2	; 0x02
    590c:	93 81       	ldd	r25, Z+3	; 0x03
    590e:	0c 5f       	subi	r16, 0xFC	; 252
    5910:	1f 4f       	sbci	r17, 0xFF	; 255
    5912:	06 c0       	rjmp	.+12     	; 0x5920 <vfprintf+0x28e>
    5914:	60 81       	ld	r22, Z
    5916:	71 81       	ldd	r23, Z+1	; 0x01
    5918:	80 e0       	ldi	r24, 0x00	; 0
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	0e 5f       	subi	r16, 0xFE	; 254
    591e:	1f 4f       	sbci	r17, 0xFF	; 255
    5920:	a3 01       	movw	r20, r6
    5922:	1d d2       	rcall	.+1082   	; 0x5d5e <__ultoa_invert>
    5924:	88 2e       	mov	r8, r24
    5926:	86 18       	sub	r8, r6
    5928:	fb 2d       	mov	r31, r11
    592a:	ff 77       	andi	r31, 0x7F	; 127
    592c:	3f 2e       	mov	r3, r31
    592e:	36 fe       	sbrs	r3, 6
    5930:	0d c0       	rjmp	.+26     	; 0x594c <vfprintf+0x2ba>
    5932:	23 2d       	mov	r18, r3
    5934:	2e 7f       	andi	r18, 0xFE	; 254
    5936:	a2 2e       	mov	r10, r18
    5938:	89 14       	cp	r8, r9
    593a:	58 f4       	brcc	.+22     	; 0x5952 <vfprintf+0x2c0>
    593c:	34 fe       	sbrs	r3, 4
    593e:	0b c0       	rjmp	.+22     	; 0x5956 <vfprintf+0x2c4>
    5940:	32 fc       	sbrc	r3, 2
    5942:	09 c0       	rjmp	.+18     	; 0x5956 <vfprintf+0x2c4>
    5944:	83 2d       	mov	r24, r3
    5946:	8e 7e       	andi	r24, 0xEE	; 238
    5948:	a8 2e       	mov	r10, r24
    594a:	05 c0       	rjmp	.+10     	; 0x5956 <vfprintf+0x2c4>
    594c:	b8 2c       	mov	r11, r8
    594e:	a3 2c       	mov	r10, r3
    5950:	03 c0       	rjmp	.+6      	; 0x5958 <vfprintf+0x2c6>
    5952:	b8 2c       	mov	r11, r8
    5954:	01 c0       	rjmp	.+2      	; 0x5958 <vfprintf+0x2c6>
    5956:	b9 2c       	mov	r11, r9
    5958:	a4 fe       	sbrs	r10, 4
    595a:	0f c0       	rjmp	.+30     	; 0x597a <vfprintf+0x2e8>
    595c:	fe 01       	movw	r30, r28
    595e:	e8 0d       	add	r30, r8
    5960:	f1 1d       	adc	r31, r1
    5962:	80 81       	ld	r24, Z
    5964:	80 33       	cpi	r24, 0x30	; 48
    5966:	21 f4       	brne	.+8      	; 0x5970 <vfprintf+0x2de>
    5968:	9a 2d       	mov	r25, r10
    596a:	99 7e       	andi	r25, 0xE9	; 233
    596c:	a9 2e       	mov	r10, r25
    596e:	09 c0       	rjmp	.+18     	; 0x5982 <vfprintf+0x2f0>
    5970:	a2 fe       	sbrs	r10, 2
    5972:	06 c0       	rjmp	.+12     	; 0x5980 <vfprintf+0x2ee>
    5974:	b3 94       	inc	r11
    5976:	b3 94       	inc	r11
    5978:	04 c0       	rjmp	.+8      	; 0x5982 <vfprintf+0x2f0>
    597a:	8a 2d       	mov	r24, r10
    597c:	86 78       	andi	r24, 0x86	; 134
    597e:	09 f0       	breq	.+2      	; 0x5982 <vfprintf+0x2f0>
    5980:	b3 94       	inc	r11
    5982:	a3 fc       	sbrc	r10, 3
    5984:	10 c0       	rjmp	.+32     	; 0x59a6 <vfprintf+0x314>
    5986:	a0 fe       	sbrs	r10, 0
    5988:	06 c0       	rjmp	.+12     	; 0x5996 <vfprintf+0x304>
    598a:	b2 14       	cp	r11, r2
    598c:	80 f4       	brcc	.+32     	; 0x59ae <vfprintf+0x31c>
    598e:	28 0c       	add	r2, r8
    5990:	92 2c       	mov	r9, r2
    5992:	9b 18       	sub	r9, r11
    5994:	0d c0       	rjmp	.+26     	; 0x59b0 <vfprintf+0x31e>
    5996:	b2 14       	cp	r11, r2
    5998:	58 f4       	brcc	.+22     	; 0x59b0 <vfprintf+0x31e>
    599a:	b6 01       	movw	r22, r12
    599c:	80 e2       	ldi	r24, 0x20	; 32
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	a2 d1       	rcall	.+836    	; 0x5ce6 <fputc>
    59a2:	b3 94       	inc	r11
    59a4:	f8 cf       	rjmp	.-16     	; 0x5996 <vfprintf+0x304>
    59a6:	b2 14       	cp	r11, r2
    59a8:	18 f4       	brcc	.+6      	; 0x59b0 <vfprintf+0x31e>
    59aa:	2b 18       	sub	r2, r11
    59ac:	02 c0       	rjmp	.+4      	; 0x59b2 <vfprintf+0x320>
    59ae:	98 2c       	mov	r9, r8
    59b0:	21 2c       	mov	r2, r1
    59b2:	a4 fe       	sbrs	r10, 4
    59b4:	0f c0       	rjmp	.+30     	; 0x59d4 <vfprintf+0x342>
    59b6:	b6 01       	movw	r22, r12
    59b8:	80 e3       	ldi	r24, 0x30	; 48
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	94 d1       	rcall	.+808    	; 0x5ce6 <fputc>
    59be:	a2 fe       	sbrs	r10, 2
    59c0:	16 c0       	rjmp	.+44     	; 0x59ee <vfprintf+0x35c>
    59c2:	a1 fc       	sbrc	r10, 1
    59c4:	03 c0       	rjmp	.+6      	; 0x59cc <vfprintf+0x33a>
    59c6:	88 e7       	ldi	r24, 0x78	; 120
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	02 c0       	rjmp	.+4      	; 0x59d0 <vfprintf+0x33e>
    59cc:	88 e5       	ldi	r24, 0x58	; 88
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	b6 01       	movw	r22, r12
    59d2:	0c c0       	rjmp	.+24     	; 0x59ec <vfprintf+0x35a>
    59d4:	8a 2d       	mov	r24, r10
    59d6:	86 78       	andi	r24, 0x86	; 134
    59d8:	51 f0       	breq	.+20     	; 0x59ee <vfprintf+0x35c>
    59da:	a1 fe       	sbrs	r10, 1
    59dc:	02 c0       	rjmp	.+4      	; 0x59e2 <vfprintf+0x350>
    59de:	8b e2       	ldi	r24, 0x2B	; 43
    59e0:	01 c0       	rjmp	.+2      	; 0x59e4 <vfprintf+0x352>
    59e2:	80 e2       	ldi	r24, 0x20	; 32
    59e4:	a7 fc       	sbrc	r10, 7
    59e6:	8d e2       	ldi	r24, 0x2D	; 45
    59e8:	b6 01       	movw	r22, r12
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	7c d1       	rcall	.+760    	; 0x5ce6 <fputc>
    59ee:	89 14       	cp	r8, r9
    59f0:	30 f4       	brcc	.+12     	; 0x59fe <vfprintf+0x36c>
    59f2:	b6 01       	movw	r22, r12
    59f4:	80 e3       	ldi	r24, 0x30	; 48
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	76 d1       	rcall	.+748    	; 0x5ce6 <fputc>
    59fa:	9a 94       	dec	r9
    59fc:	f8 cf       	rjmp	.-16     	; 0x59ee <vfprintf+0x35c>
    59fe:	8a 94       	dec	r8
    5a00:	f3 01       	movw	r30, r6
    5a02:	e8 0d       	add	r30, r8
    5a04:	f1 1d       	adc	r31, r1
    5a06:	80 81       	ld	r24, Z
    5a08:	b6 01       	movw	r22, r12
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	6c d1       	rcall	.+728    	; 0x5ce6 <fputc>
    5a0e:	81 10       	cpse	r8, r1
    5a10:	f6 cf       	rjmp	.-20     	; 0x59fe <vfprintf+0x36c>
    5a12:	22 20       	and	r2, r2
    5a14:	09 f4       	brne	.+2      	; 0x5a18 <vfprintf+0x386>
    5a16:	4e ce       	rjmp	.-868    	; 0x56b4 <vfprintf+0x22>
    5a18:	b6 01       	movw	r22, r12
    5a1a:	80 e2       	ldi	r24, 0x20	; 32
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	63 d1       	rcall	.+710    	; 0x5ce6 <fputc>
    5a20:	2a 94       	dec	r2
    5a22:	f7 cf       	rjmp	.-18     	; 0x5a12 <vfprintf+0x380>
    5a24:	f6 01       	movw	r30, r12
    5a26:	86 81       	ldd	r24, Z+6	; 0x06
    5a28:	97 81       	ldd	r25, Z+7	; 0x07
    5a2a:	02 c0       	rjmp	.+4      	; 0x5a30 <vfprintf+0x39e>
    5a2c:	8f ef       	ldi	r24, 0xFF	; 255
    5a2e:	9f ef       	ldi	r25, 0xFF	; 255
    5a30:	2b 96       	adiw	r28, 0x0b	; 11
    5a32:	e2 e1       	ldi	r30, 0x12	; 18
    5a34:	0b c2       	rjmp	.+1046   	; 0x5e4c <__epilogue_restores__>

00005a36 <calloc>:
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	86 9f       	mul	r24, r22
    5a40:	80 01       	movw	r16, r0
    5a42:	87 9f       	mul	r24, r23
    5a44:	10 0d       	add	r17, r0
    5a46:	96 9f       	mul	r25, r22
    5a48:	10 0d       	add	r17, r0
    5a4a:	11 24       	eor	r1, r1
    5a4c:	c8 01       	movw	r24, r16
    5a4e:	0d d0       	rcall	.+26     	; 0x5a6a <malloc>
    5a50:	ec 01       	movw	r28, r24
    5a52:	00 97       	sbiw	r24, 0x00	; 0
    5a54:	21 f0       	breq	.+8      	; 0x5a5e <calloc+0x28>
    5a56:	a8 01       	movw	r20, r16
    5a58:	60 e0       	ldi	r22, 0x00	; 0
    5a5a:	70 e0       	ldi	r23, 0x00	; 0
    5a5c:	32 d1       	rcall	.+612    	; 0x5cc2 <memset>
    5a5e:	ce 01       	movw	r24, r28
    5a60:	df 91       	pop	r29
    5a62:	cf 91       	pop	r28
    5a64:	1f 91       	pop	r17
    5a66:	0f 91       	pop	r16
    5a68:	08 95       	ret

00005a6a <malloc>:
    5a6a:	0f 93       	push	r16
    5a6c:	1f 93       	push	r17
    5a6e:	cf 93       	push	r28
    5a70:	df 93       	push	r29
    5a72:	82 30       	cpi	r24, 0x02	; 2
    5a74:	91 05       	cpc	r25, r1
    5a76:	10 f4       	brcc	.+4      	; 0x5a7c <malloc+0x12>
    5a78:	82 e0       	ldi	r24, 0x02	; 2
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	e0 91 b2 2c 	lds	r30, 0x2CB2	; 0x802cb2 <__flp>
    5a80:	f0 91 b3 2c 	lds	r31, 0x2CB3	; 0x802cb3 <__flp+0x1>
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	a0 e0       	ldi	r26, 0x00	; 0
    5a8a:	b0 e0       	ldi	r27, 0x00	; 0
    5a8c:	30 97       	sbiw	r30, 0x00	; 0
    5a8e:	19 f1       	breq	.+70     	; 0x5ad6 <malloc+0x6c>
    5a90:	40 81       	ld	r20, Z
    5a92:	51 81       	ldd	r21, Z+1	; 0x01
    5a94:	02 81       	ldd	r16, Z+2	; 0x02
    5a96:	13 81       	ldd	r17, Z+3	; 0x03
    5a98:	48 17       	cp	r20, r24
    5a9a:	59 07       	cpc	r21, r25
    5a9c:	c8 f0       	brcs	.+50     	; 0x5ad0 <malloc+0x66>
    5a9e:	84 17       	cp	r24, r20
    5aa0:	95 07       	cpc	r25, r21
    5aa2:	69 f4       	brne	.+26     	; 0x5abe <malloc+0x54>
    5aa4:	10 97       	sbiw	r26, 0x00	; 0
    5aa6:	31 f0       	breq	.+12     	; 0x5ab4 <malloc+0x4a>
    5aa8:	12 96       	adiw	r26, 0x02	; 2
    5aaa:	0c 93       	st	X, r16
    5aac:	12 97       	sbiw	r26, 0x02	; 2
    5aae:	13 96       	adiw	r26, 0x03	; 3
    5ab0:	1c 93       	st	X, r17
    5ab2:	27 c0       	rjmp	.+78     	; 0x5b02 <malloc+0x98>
    5ab4:	00 93 b2 2c 	sts	0x2CB2, r16	; 0x802cb2 <__flp>
    5ab8:	10 93 b3 2c 	sts	0x2CB3, r17	; 0x802cb3 <__flp+0x1>
    5abc:	22 c0       	rjmp	.+68     	; 0x5b02 <malloc+0x98>
    5abe:	21 15       	cp	r18, r1
    5ac0:	31 05       	cpc	r19, r1
    5ac2:	19 f0       	breq	.+6      	; 0x5aca <malloc+0x60>
    5ac4:	42 17       	cp	r20, r18
    5ac6:	53 07       	cpc	r21, r19
    5ac8:	18 f4       	brcc	.+6      	; 0x5ad0 <malloc+0x66>
    5aca:	9a 01       	movw	r18, r20
    5acc:	bd 01       	movw	r22, r26
    5ace:	ef 01       	movw	r28, r30
    5ad0:	df 01       	movw	r26, r30
    5ad2:	f8 01       	movw	r30, r16
    5ad4:	db cf       	rjmp	.-74     	; 0x5a8c <malloc+0x22>
    5ad6:	21 15       	cp	r18, r1
    5ad8:	31 05       	cpc	r19, r1
    5ada:	f9 f0       	breq	.+62     	; 0x5b1a <malloc+0xb0>
    5adc:	28 1b       	sub	r18, r24
    5ade:	39 0b       	sbc	r19, r25
    5ae0:	24 30       	cpi	r18, 0x04	; 4
    5ae2:	31 05       	cpc	r19, r1
    5ae4:	80 f4       	brcc	.+32     	; 0x5b06 <malloc+0x9c>
    5ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    5aea:	61 15       	cp	r22, r1
    5aec:	71 05       	cpc	r23, r1
    5aee:	21 f0       	breq	.+8      	; 0x5af8 <malloc+0x8e>
    5af0:	fb 01       	movw	r30, r22
    5af2:	82 83       	std	Z+2, r24	; 0x02
    5af4:	93 83       	std	Z+3, r25	; 0x03
    5af6:	04 c0       	rjmp	.+8      	; 0x5b00 <malloc+0x96>
    5af8:	80 93 b2 2c 	sts	0x2CB2, r24	; 0x802cb2 <__flp>
    5afc:	90 93 b3 2c 	sts	0x2CB3, r25	; 0x802cb3 <__flp+0x1>
    5b00:	fe 01       	movw	r30, r28
    5b02:	32 96       	adiw	r30, 0x02	; 2
    5b04:	44 c0       	rjmp	.+136    	; 0x5b8e <malloc+0x124>
    5b06:	fe 01       	movw	r30, r28
    5b08:	e2 0f       	add	r30, r18
    5b0a:	f3 1f       	adc	r31, r19
    5b0c:	81 93       	st	Z+, r24
    5b0e:	91 93       	st	Z+, r25
    5b10:	22 50       	subi	r18, 0x02	; 2
    5b12:	31 09       	sbc	r19, r1
    5b14:	28 83       	st	Y, r18
    5b16:	39 83       	std	Y+1, r19	; 0x01
    5b18:	3a c0       	rjmp	.+116    	; 0x5b8e <malloc+0x124>
    5b1a:	20 91 b0 2c 	lds	r18, 0x2CB0	; 0x802cb0 <__brkval>
    5b1e:	30 91 b1 2c 	lds	r19, 0x2CB1	; 0x802cb1 <__brkval+0x1>
    5b22:	23 2b       	or	r18, r19
    5b24:	41 f4       	brne	.+16     	; 0x5b36 <malloc+0xcc>
    5b26:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    5b2a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    5b2e:	20 93 b0 2c 	sts	0x2CB0, r18	; 0x802cb0 <__brkval>
    5b32:	30 93 b1 2c 	sts	0x2CB1, r19	; 0x802cb1 <__brkval+0x1>
    5b36:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    5b3a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    5b3e:	21 15       	cp	r18, r1
    5b40:	31 05       	cpc	r19, r1
    5b42:	41 f4       	brne	.+16     	; 0x5b54 <malloc+0xea>
    5b44:	2d b7       	in	r18, 0x3d	; 61
    5b46:	3e b7       	in	r19, 0x3e	; 62
    5b48:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    5b4c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    5b50:	24 1b       	sub	r18, r20
    5b52:	35 0b       	sbc	r19, r21
    5b54:	e0 91 b0 2c 	lds	r30, 0x2CB0	; 0x802cb0 <__brkval>
    5b58:	f0 91 b1 2c 	lds	r31, 0x2CB1	; 0x802cb1 <__brkval+0x1>
    5b5c:	e2 17       	cp	r30, r18
    5b5e:	f3 07       	cpc	r31, r19
    5b60:	a0 f4       	brcc	.+40     	; 0x5b8a <malloc+0x120>
    5b62:	2e 1b       	sub	r18, r30
    5b64:	3f 0b       	sbc	r19, r31
    5b66:	28 17       	cp	r18, r24
    5b68:	39 07       	cpc	r19, r25
    5b6a:	78 f0       	brcs	.+30     	; 0x5b8a <malloc+0x120>
    5b6c:	ac 01       	movw	r20, r24
    5b6e:	4e 5f       	subi	r20, 0xFE	; 254
    5b70:	5f 4f       	sbci	r21, 0xFF	; 255
    5b72:	24 17       	cp	r18, r20
    5b74:	35 07       	cpc	r19, r21
    5b76:	48 f0       	brcs	.+18     	; 0x5b8a <malloc+0x120>
    5b78:	4e 0f       	add	r20, r30
    5b7a:	5f 1f       	adc	r21, r31
    5b7c:	40 93 b0 2c 	sts	0x2CB0, r20	; 0x802cb0 <__brkval>
    5b80:	50 93 b1 2c 	sts	0x2CB1, r21	; 0x802cb1 <__brkval+0x1>
    5b84:	81 93       	st	Z+, r24
    5b86:	91 93       	st	Z+, r25
    5b88:	02 c0       	rjmp	.+4      	; 0x5b8e <malloc+0x124>
    5b8a:	e0 e0       	ldi	r30, 0x00	; 0
    5b8c:	f0 e0       	ldi	r31, 0x00	; 0
    5b8e:	cf 01       	movw	r24, r30
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	08 95       	ret

00005b9a <free>:
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	00 97       	sbiw	r24, 0x00	; 0
    5ba0:	09 f4       	brne	.+2      	; 0x5ba4 <free+0xa>
    5ba2:	81 c0       	rjmp	.+258    	; 0x5ca6 <free+0x10c>
    5ba4:	fc 01       	movw	r30, r24
    5ba6:	32 97       	sbiw	r30, 0x02	; 2
    5ba8:	12 82       	std	Z+2, r1	; 0x02
    5baa:	13 82       	std	Z+3, r1	; 0x03
    5bac:	a0 91 b2 2c 	lds	r26, 0x2CB2	; 0x802cb2 <__flp>
    5bb0:	b0 91 b3 2c 	lds	r27, 0x2CB3	; 0x802cb3 <__flp+0x1>
    5bb4:	10 97       	sbiw	r26, 0x00	; 0
    5bb6:	81 f4       	brne	.+32     	; 0x5bd8 <free+0x3e>
    5bb8:	20 81       	ld	r18, Z
    5bba:	31 81       	ldd	r19, Z+1	; 0x01
    5bbc:	82 0f       	add	r24, r18
    5bbe:	93 1f       	adc	r25, r19
    5bc0:	20 91 b0 2c 	lds	r18, 0x2CB0	; 0x802cb0 <__brkval>
    5bc4:	30 91 b1 2c 	lds	r19, 0x2CB1	; 0x802cb1 <__brkval+0x1>
    5bc8:	28 17       	cp	r18, r24
    5bca:	39 07       	cpc	r19, r25
    5bcc:	51 f5       	brne	.+84     	; 0x5c22 <free+0x88>
    5bce:	e0 93 b0 2c 	sts	0x2CB0, r30	; 0x802cb0 <__brkval>
    5bd2:	f0 93 b1 2c 	sts	0x2CB1, r31	; 0x802cb1 <__brkval+0x1>
    5bd6:	67 c0       	rjmp	.+206    	; 0x5ca6 <free+0x10c>
    5bd8:	ed 01       	movw	r28, r26
    5bda:	20 e0       	ldi	r18, 0x00	; 0
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	ce 17       	cp	r28, r30
    5be0:	df 07       	cpc	r29, r31
    5be2:	40 f4       	brcc	.+16     	; 0x5bf4 <free+0x5a>
    5be4:	4a 81       	ldd	r20, Y+2	; 0x02
    5be6:	5b 81       	ldd	r21, Y+3	; 0x03
    5be8:	9e 01       	movw	r18, r28
    5bea:	41 15       	cp	r20, r1
    5bec:	51 05       	cpc	r21, r1
    5bee:	f1 f0       	breq	.+60     	; 0x5c2c <free+0x92>
    5bf0:	ea 01       	movw	r28, r20
    5bf2:	f5 cf       	rjmp	.-22     	; 0x5bde <free+0x44>
    5bf4:	c2 83       	std	Z+2, r28	; 0x02
    5bf6:	d3 83       	std	Z+3, r29	; 0x03
    5bf8:	40 81       	ld	r20, Z
    5bfa:	51 81       	ldd	r21, Z+1	; 0x01
    5bfc:	84 0f       	add	r24, r20
    5bfe:	95 1f       	adc	r25, r21
    5c00:	c8 17       	cp	r28, r24
    5c02:	d9 07       	cpc	r29, r25
    5c04:	59 f4       	brne	.+22     	; 0x5c1c <free+0x82>
    5c06:	88 81       	ld	r24, Y
    5c08:	99 81       	ldd	r25, Y+1	; 0x01
    5c0a:	84 0f       	add	r24, r20
    5c0c:	95 1f       	adc	r25, r21
    5c0e:	02 96       	adiw	r24, 0x02	; 2
    5c10:	80 83       	st	Z, r24
    5c12:	91 83       	std	Z+1, r25	; 0x01
    5c14:	8a 81       	ldd	r24, Y+2	; 0x02
    5c16:	9b 81       	ldd	r25, Y+3	; 0x03
    5c18:	82 83       	std	Z+2, r24	; 0x02
    5c1a:	93 83       	std	Z+3, r25	; 0x03
    5c1c:	21 15       	cp	r18, r1
    5c1e:	31 05       	cpc	r19, r1
    5c20:	29 f4       	brne	.+10     	; 0x5c2c <free+0x92>
    5c22:	e0 93 b2 2c 	sts	0x2CB2, r30	; 0x802cb2 <__flp>
    5c26:	f0 93 b3 2c 	sts	0x2CB3, r31	; 0x802cb3 <__flp+0x1>
    5c2a:	3d c0       	rjmp	.+122    	; 0x5ca6 <free+0x10c>
    5c2c:	e9 01       	movw	r28, r18
    5c2e:	ea 83       	std	Y+2, r30	; 0x02
    5c30:	fb 83       	std	Y+3, r31	; 0x03
    5c32:	49 91       	ld	r20, Y+
    5c34:	59 91       	ld	r21, Y+
    5c36:	c4 0f       	add	r28, r20
    5c38:	d5 1f       	adc	r29, r21
    5c3a:	ec 17       	cp	r30, r28
    5c3c:	fd 07       	cpc	r31, r29
    5c3e:	61 f4       	brne	.+24     	; 0x5c58 <free+0xbe>
    5c40:	80 81       	ld	r24, Z
    5c42:	91 81       	ldd	r25, Z+1	; 0x01
    5c44:	84 0f       	add	r24, r20
    5c46:	95 1f       	adc	r25, r21
    5c48:	02 96       	adiw	r24, 0x02	; 2
    5c4a:	e9 01       	movw	r28, r18
    5c4c:	88 83       	st	Y, r24
    5c4e:	99 83       	std	Y+1, r25	; 0x01
    5c50:	82 81       	ldd	r24, Z+2	; 0x02
    5c52:	93 81       	ldd	r25, Z+3	; 0x03
    5c54:	8a 83       	std	Y+2, r24	; 0x02
    5c56:	9b 83       	std	Y+3, r25	; 0x03
    5c58:	e0 e0       	ldi	r30, 0x00	; 0
    5c5a:	f0 e0       	ldi	r31, 0x00	; 0
    5c5c:	12 96       	adiw	r26, 0x02	; 2
    5c5e:	8d 91       	ld	r24, X+
    5c60:	9c 91       	ld	r25, X
    5c62:	13 97       	sbiw	r26, 0x03	; 3
    5c64:	00 97       	sbiw	r24, 0x00	; 0
    5c66:	19 f0       	breq	.+6      	; 0x5c6e <free+0xd4>
    5c68:	fd 01       	movw	r30, r26
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	f7 cf       	rjmp	.-18     	; 0x5c5c <free+0xc2>
    5c6e:	8d 91       	ld	r24, X+
    5c70:	9c 91       	ld	r25, X
    5c72:	11 97       	sbiw	r26, 0x01	; 1
    5c74:	9d 01       	movw	r18, r26
    5c76:	2e 5f       	subi	r18, 0xFE	; 254
    5c78:	3f 4f       	sbci	r19, 0xFF	; 255
    5c7a:	82 0f       	add	r24, r18
    5c7c:	93 1f       	adc	r25, r19
    5c7e:	20 91 b0 2c 	lds	r18, 0x2CB0	; 0x802cb0 <__brkval>
    5c82:	30 91 b1 2c 	lds	r19, 0x2CB1	; 0x802cb1 <__brkval+0x1>
    5c86:	28 17       	cp	r18, r24
    5c88:	39 07       	cpc	r19, r25
    5c8a:	69 f4       	brne	.+26     	; 0x5ca6 <free+0x10c>
    5c8c:	30 97       	sbiw	r30, 0x00	; 0
    5c8e:	29 f4       	brne	.+10     	; 0x5c9a <free+0x100>
    5c90:	10 92 b2 2c 	sts	0x2CB2, r1	; 0x802cb2 <__flp>
    5c94:	10 92 b3 2c 	sts	0x2CB3, r1	; 0x802cb3 <__flp+0x1>
    5c98:	02 c0       	rjmp	.+4      	; 0x5c9e <free+0x104>
    5c9a:	12 82       	std	Z+2, r1	; 0x02
    5c9c:	13 82       	std	Z+3, r1	; 0x03
    5c9e:	a0 93 b0 2c 	sts	0x2CB0, r26	; 0x802cb0 <__brkval>
    5ca2:	b0 93 b1 2c 	sts	0x2CB1, r27	; 0x802cb1 <__brkval+0x1>
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	08 95       	ret

00005cac <strnlen_P>:
    5cac:	fc 01       	movw	r30, r24
    5cae:	05 90       	lpm	r0, Z+
    5cb0:	61 50       	subi	r22, 0x01	; 1
    5cb2:	70 40       	sbci	r23, 0x00	; 0
    5cb4:	01 10       	cpse	r0, r1
    5cb6:	d8 f7       	brcc	.-10     	; 0x5cae <strnlen_P+0x2>
    5cb8:	80 95       	com	r24
    5cba:	90 95       	com	r25
    5cbc:	8e 0f       	add	r24, r30
    5cbe:	9f 1f       	adc	r25, r31
    5cc0:	08 95       	ret

00005cc2 <memset>:
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	01 c0       	rjmp	.+2      	; 0x5cc8 <memset+0x6>
    5cc6:	6d 93       	st	X+, r22
    5cc8:	41 50       	subi	r20, 0x01	; 1
    5cca:	50 40       	sbci	r21, 0x00	; 0
    5ccc:	e0 f7       	brcc	.-8      	; 0x5cc6 <memset+0x4>
    5cce:	08 95       	ret

00005cd0 <strnlen>:
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	61 50       	subi	r22, 0x01	; 1
    5cd4:	70 40       	sbci	r23, 0x00	; 0
    5cd6:	01 90       	ld	r0, Z+
    5cd8:	01 10       	cpse	r0, r1
    5cda:	d8 f7       	brcc	.-10     	; 0x5cd2 <strnlen+0x2>
    5cdc:	80 95       	com	r24
    5cde:	90 95       	com	r25
    5ce0:	8e 0f       	add	r24, r30
    5ce2:	9f 1f       	adc	r25, r31
    5ce4:	08 95       	ret

00005ce6 <fputc>:
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	fb 01       	movw	r30, r22
    5cf0:	23 81       	ldd	r18, Z+3	; 0x03
    5cf2:	21 fd       	sbrc	r18, 1
    5cf4:	03 c0       	rjmp	.+6      	; 0x5cfc <fputc+0x16>
    5cf6:	8f ef       	ldi	r24, 0xFF	; 255
    5cf8:	9f ef       	ldi	r25, 0xFF	; 255
    5cfa:	2c c0       	rjmp	.+88     	; 0x5d54 <fputc+0x6e>
    5cfc:	22 ff       	sbrs	r18, 2
    5cfe:	16 c0       	rjmp	.+44     	; 0x5d2c <fputc+0x46>
    5d00:	46 81       	ldd	r20, Z+6	; 0x06
    5d02:	57 81       	ldd	r21, Z+7	; 0x07
    5d04:	24 81       	ldd	r18, Z+4	; 0x04
    5d06:	35 81       	ldd	r19, Z+5	; 0x05
    5d08:	42 17       	cp	r20, r18
    5d0a:	53 07       	cpc	r21, r19
    5d0c:	44 f4       	brge	.+16     	; 0x5d1e <fputc+0x38>
    5d0e:	a0 81       	ld	r26, Z
    5d10:	b1 81       	ldd	r27, Z+1	; 0x01
    5d12:	9d 01       	movw	r18, r26
    5d14:	2f 5f       	subi	r18, 0xFF	; 255
    5d16:	3f 4f       	sbci	r19, 0xFF	; 255
    5d18:	20 83       	st	Z, r18
    5d1a:	31 83       	std	Z+1, r19	; 0x01
    5d1c:	8c 93       	st	X, r24
    5d1e:	26 81       	ldd	r18, Z+6	; 0x06
    5d20:	37 81       	ldd	r19, Z+7	; 0x07
    5d22:	2f 5f       	subi	r18, 0xFF	; 255
    5d24:	3f 4f       	sbci	r19, 0xFF	; 255
    5d26:	26 83       	std	Z+6, r18	; 0x06
    5d28:	37 83       	std	Z+7, r19	; 0x07
    5d2a:	14 c0       	rjmp	.+40     	; 0x5d54 <fputc+0x6e>
    5d2c:	8b 01       	movw	r16, r22
    5d2e:	ec 01       	movw	r28, r24
    5d30:	fb 01       	movw	r30, r22
    5d32:	00 84       	ldd	r0, Z+8	; 0x08
    5d34:	f1 85       	ldd	r31, Z+9	; 0x09
    5d36:	e0 2d       	mov	r30, r0
    5d38:	09 95       	icall
    5d3a:	89 2b       	or	r24, r25
    5d3c:	e1 f6       	brne	.-72     	; 0x5cf6 <fputc+0x10>
    5d3e:	d8 01       	movw	r26, r16
    5d40:	16 96       	adiw	r26, 0x06	; 6
    5d42:	8d 91       	ld	r24, X+
    5d44:	9c 91       	ld	r25, X
    5d46:	17 97       	sbiw	r26, 0x07	; 7
    5d48:	01 96       	adiw	r24, 0x01	; 1
    5d4a:	16 96       	adiw	r26, 0x06	; 6
    5d4c:	8d 93       	st	X+, r24
    5d4e:	9c 93       	st	X, r25
    5d50:	17 97       	sbiw	r26, 0x07	; 7
    5d52:	ce 01       	movw	r24, r28
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	08 95       	ret

00005d5e <__ultoa_invert>:
    5d5e:	fa 01       	movw	r30, r20
    5d60:	aa 27       	eor	r26, r26
    5d62:	28 30       	cpi	r18, 0x08	; 8
    5d64:	51 f1       	breq	.+84     	; 0x5dba <__ultoa_invert+0x5c>
    5d66:	20 31       	cpi	r18, 0x10	; 16
    5d68:	81 f1       	breq	.+96     	; 0x5dca <__ultoa_invert+0x6c>
    5d6a:	e8 94       	clt
    5d6c:	6f 93       	push	r22
    5d6e:	6e 7f       	andi	r22, 0xFE	; 254
    5d70:	6e 5f       	subi	r22, 0xFE	; 254
    5d72:	7f 4f       	sbci	r23, 0xFF	; 255
    5d74:	8f 4f       	sbci	r24, 0xFF	; 255
    5d76:	9f 4f       	sbci	r25, 0xFF	; 255
    5d78:	af 4f       	sbci	r26, 0xFF	; 255
    5d7a:	b1 e0       	ldi	r27, 0x01	; 1
    5d7c:	3e d0       	rcall	.+124    	; 0x5dfa <__ultoa_invert+0x9c>
    5d7e:	b4 e0       	ldi	r27, 0x04	; 4
    5d80:	3c d0       	rcall	.+120    	; 0x5dfa <__ultoa_invert+0x9c>
    5d82:	67 0f       	add	r22, r23
    5d84:	78 1f       	adc	r23, r24
    5d86:	89 1f       	adc	r24, r25
    5d88:	9a 1f       	adc	r25, r26
    5d8a:	a1 1d       	adc	r26, r1
    5d8c:	68 0f       	add	r22, r24
    5d8e:	79 1f       	adc	r23, r25
    5d90:	8a 1f       	adc	r24, r26
    5d92:	91 1d       	adc	r25, r1
    5d94:	a1 1d       	adc	r26, r1
    5d96:	6a 0f       	add	r22, r26
    5d98:	71 1d       	adc	r23, r1
    5d9a:	81 1d       	adc	r24, r1
    5d9c:	91 1d       	adc	r25, r1
    5d9e:	a1 1d       	adc	r26, r1
    5da0:	20 d0       	rcall	.+64     	; 0x5de2 <__ultoa_invert+0x84>
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <__ultoa_invert+0x48>
    5da4:	68 94       	set
    5da6:	3f 91       	pop	r19
    5da8:	2a e0       	ldi	r18, 0x0A	; 10
    5daa:	26 9f       	mul	r18, r22
    5dac:	11 24       	eor	r1, r1
    5dae:	30 19       	sub	r19, r0
    5db0:	30 5d       	subi	r19, 0xD0	; 208
    5db2:	31 93       	st	Z+, r19
    5db4:	de f6       	brtc	.-74     	; 0x5d6c <__ultoa_invert+0xe>
    5db6:	cf 01       	movw	r24, r30
    5db8:	08 95       	ret
    5dba:	46 2f       	mov	r20, r22
    5dbc:	47 70       	andi	r20, 0x07	; 7
    5dbe:	40 5d       	subi	r20, 0xD0	; 208
    5dc0:	41 93       	st	Z+, r20
    5dc2:	b3 e0       	ldi	r27, 0x03	; 3
    5dc4:	0f d0       	rcall	.+30     	; 0x5de4 <__ultoa_invert+0x86>
    5dc6:	c9 f7       	brne	.-14     	; 0x5dba <__ultoa_invert+0x5c>
    5dc8:	f6 cf       	rjmp	.-20     	; 0x5db6 <__ultoa_invert+0x58>
    5dca:	46 2f       	mov	r20, r22
    5dcc:	4f 70       	andi	r20, 0x0F	; 15
    5dce:	40 5d       	subi	r20, 0xD0	; 208
    5dd0:	4a 33       	cpi	r20, 0x3A	; 58
    5dd2:	18 f0       	brcs	.+6      	; 0x5dda <__ultoa_invert+0x7c>
    5dd4:	49 5d       	subi	r20, 0xD9	; 217
    5dd6:	31 fd       	sbrc	r19, 1
    5dd8:	40 52       	subi	r20, 0x20	; 32
    5dda:	41 93       	st	Z+, r20
    5ddc:	02 d0       	rcall	.+4      	; 0x5de2 <__ultoa_invert+0x84>
    5dde:	a9 f7       	brne	.-22     	; 0x5dca <__ultoa_invert+0x6c>
    5de0:	ea cf       	rjmp	.-44     	; 0x5db6 <__ultoa_invert+0x58>
    5de2:	b4 e0       	ldi	r27, 0x04	; 4
    5de4:	a6 95       	lsr	r26
    5de6:	97 95       	ror	r25
    5de8:	87 95       	ror	r24
    5dea:	77 95       	ror	r23
    5dec:	67 95       	ror	r22
    5dee:	ba 95       	dec	r27
    5df0:	c9 f7       	brne	.-14     	; 0x5de4 <__ultoa_invert+0x86>
    5df2:	00 97       	sbiw	r24, 0x00	; 0
    5df4:	61 05       	cpc	r22, r1
    5df6:	71 05       	cpc	r23, r1
    5df8:	08 95       	ret
    5dfa:	9b 01       	movw	r18, r22
    5dfc:	ac 01       	movw	r20, r24
    5dfe:	0a 2e       	mov	r0, r26
    5e00:	06 94       	lsr	r0
    5e02:	57 95       	ror	r21
    5e04:	47 95       	ror	r20
    5e06:	37 95       	ror	r19
    5e08:	27 95       	ror	r18
    5e0a:	ba 95       	dec	r27
    5e0c:	c9 f7       	brne	.-14     	; 0x5e00 <__ultoa_invert+0xa2>
    5e0e:	62 0f       	add	r22, r18
    5e10:	73 1f       	adc	r23, r19
    5e12:	84 1f       	adc	r24, r20
    5e14:	95 1f       	adc	r25, r21
    5e16:	a0 1d       	adc	r26, r0
    5e18:	08 95       	ret

00005e1a <__prologue_saves__>:
    5e1a:	2f 92       	push	r2
    5e1c:	3f 92       	push	r3
    5e1e:	4f 92       	push	r4
    5e20:	5f 92       	push	r5
    5e22:	6f 92       	push	r6
    5e24:	7f 92       	push	r7
    5e26:	8f 92       	push	r8
    5e28:	9f 92       	push	r9
    5e2a:	af 92       	push	r10
    5e2c:	bf 92       	push	r11
    5e2e:	cf 92       	push	r12
    5e30:	df 92       	push	r13
    5e32:	ef 92       	push	r14
    5e34:	ff 92       	push	r15
    5e36:	0f 93       	push	r16
    5e38:	1f 93       	push	r17
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	cd b7       	in	r28, 0x3d	; 61
    5e40:	de b7       	in	r29, 0x3e	; 62
    5e42:	ca 1b       	sub	r28, r26
    5e44:	db 0b       	sbc	r29, r27
    5e46:	cd bf       	out	0x3d, r28	; 61
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	09 94       	ijmp

00005e4c <__epilogue_restores__>:
    5e4c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e4e:	39 88       	ldd	r3, Y+17	; 0x11
    5e50:	48 88       	ldd	r4, Y+16	; 0x10
    5e52:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e54:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e56:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e58:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e5e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e60:	c8 84       	ldd	r12, Y+8	; 0x08
    5e62:	df 80       	ldd	r13, Y+7	; 0x07
    5e64:	ee 80       	ldd	r14, Y+6	; 0x06
    5e66:	fd 80       	ldd	r15, Y+5	; 0x05
    5e68:	0c 81       	ldd	r16, Y+4	; 0x04
    5e6a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e6c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e6e:	b9 81       	ldd	r27, Y+1	; 0x01
    5e70:	ce 0f       	add	r28, r30
    5e72:	d1 1d       	adc	r29, r1
    5e74:	cd bf       	out	0x3d, r28	; 61
    5e76:	de bf       	out	0x3e, r29	; 62
    5e78:	ed 01       	movw	r28, r26
    5e7a:	08 95       	ret

00005e7c <_exit>:
    5e7c:	f8 94       	cli

00005e7e <__stop_program>:
    5e7e:	ff cf       	rjmp	.-2      	; 0x5e7e <__stop_program>
